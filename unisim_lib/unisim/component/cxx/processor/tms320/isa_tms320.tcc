#include "isa_tms320.hh"
#include <cassert>
#line 70 "isa/tms320.isa"

/* code to be included at the beginning of the implementation of the library */
#include <iostream>
#include <string>
#include "unisim/component/cxx/processor/tms320/exception.hh"

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace tms320 {

					using std::ostream;
					using std::hex;
					using std::dec;
					using std::endl;
					using std::string;

					static const char *REG_NAME[] = {
						"R0",  "R1",  "R2",  "R3",  "R4",  "R5",  "R6",  "R7",
						"AR0", "AR1", "AR2", "AR3", "AR4", "AR5", "AR6", "AR7",
						"DP", "IR0", "IR1",  "BK",  "SP",  "ST",  "IE",  "IF",
						"IOF",  "RS",  "RE",  "RC",    0,     0,     0,     0
					};

					static const char *COND_NAME[] = {
						"U",    // 00000
						"LO",   // 00001
						"LS",   // 00010
						"HI",   // 00011
						"HS",   // 00100
						"EQ",   // 00101
						"NE",   // 00110
						"LT",   // 00111
						"LE",   // 01000
						"GT",   // 01001
						"GE",   // 01010
						0,      // 01011
						"NV",   // 01100
						"V",    // 01101
						"NUF",  // 01110
						"UF",   // 01111
						"NLV",  // 10000
						"LV",   // 10001
						"NLUF", // 10010
						"LUF",  // 10011
						"ZUF",  // 10100
						0,      // 10101
						0,      // 10110
						0,      // 10111
						0,      // 11000
						0,      // 11001
						0,      // 11010
						0,      // 11011
						0,      // 11100
						0,      // 11101
						0,      // 11110
						0       // 11111
					};

					using unisim::util::arithmetic::Add32;
					using unisim::util::arithmetic::SignedSatAdd32;
					using unisim::util::arithmetic::Sub32;
					using unisim::util::arithmetic::SignedSatSub32;
					using unisim::util::arithmetic::RotateLeft;
					using unisim::util::arithmetic::RotateRight;
					using unisim::util::arithmetic::ShiftLeft;
					using unisim::util::arithmetic::ShiftRight;
					using unisim::util::arithmetic::ShiftArithmeticRight;
					using unisim::util::arithmetic::SignExtend;

				} // end of namespace tms320
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 82 "isa_tms320.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace tms320 { namespace isa { namespace tms320 {
template <
#line 45 "isa/tms320.isa"
class
#line 87 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106 "isa_tms320.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 128 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 137 "isa_tms320.tcc"
>::~Operation()
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 155 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 159 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 167 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 174 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 181 "isa_tms320.tcc"
)
{
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		return false;
	}
#line 188 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 203 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 207 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 215 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 219 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 222 "isa_tms320.tcc"
)
{
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		throw UnknownOpcodeException<CONFIG, DEBUG>(this);
	}
#line 229 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 244 "isa_tms320.tcc"
>
class OpLDE_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 253 "isa_tms320.tcc"
>
{
public:
	OpLDE_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 263 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 267 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 270 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 274 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 277 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 357 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 361 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 364 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 382 "isa_tms320.tcc"
>
class OpLDE_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 391 "isa_tms320.tcc"
>
{
public:
	OpLDE_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 401 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 405 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 408 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 412 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 415 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 495 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 499 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 502 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 520 "isa_tms320.tcc"
>
class OpLDE_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 529 "isa_tms320.tcc"
>
{
public:
	OpLDE_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 541 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 545 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 548 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 552 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 555 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 635 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 639 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 642 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 660 "isa_tms320.tcc"
>
class OpLDE_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 669 "isa_tms320.tcc"
>
{
public:
	OpLDE_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 679 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 686 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 693 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 773 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 777 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 780 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 798 "isa_tms320.tcc"
>
class OpLDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 807 "isa_tms320.tcc"
>
{
public:
	OpLDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 817 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 821 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 824 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 828 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 831 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 911 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 915 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 918 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 936 "isa_tms320.tcc"
>
class OpLDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 945 "isa_tms320.tcc"
>
{
public:
	OpLDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 955 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 959 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 962 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 966 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 969 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1049 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1053 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1056 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1074 "isa_tms320.tcc"
>
class OpLDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1083 "isa_tms320.tcc"
>
{
public:
	OpLDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1095 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1099 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1102 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1106 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1109 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1189 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1193 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1196 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1214 "isa_tms320.tcc"
>
class OpLDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1223 "isa_tms320.tcc"
>
{
public:
	OpLDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1233 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1237 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1240 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1244 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1247 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1327 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1331 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1334 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1352 "isa_tms320.tcc"
>
class OpLDFcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1361 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1372 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1379 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1466 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1491 "isa_tms320.tcc"
>
class OpLDFcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1500 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1511 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1515 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1518 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1522 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1525 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1605 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1609 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1612 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1630 "isa_tms320.tcc"
>
class OpLDFcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1639 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1652 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1656 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1659 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1663 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1666 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1746 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1750 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1753 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1771 "isa_tms320.tcc"
>
class OpLDFcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1780 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1791 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1795 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1798 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1802 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1805 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1885 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1889 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1892 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1910 "isa_tms320.tcc"
>
class OpLDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1919 "isa_tms320.tcc"
>
{
public:
	OpLDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1929 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1933 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1936 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1940 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1943 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2023 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2027 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2030 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2048 "isa_tms320.tcc"
>
class OpLDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2057 "isa_tms320.tcc"
>
{
public:
	OpLDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2067 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2071 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2074 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2078 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2081 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2161 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2165 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2168 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2186 "isa_tms320.tcc"
>
class OpLDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2195 "isa_tms320.tcc"
>
{
public:
	OpLDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2207 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2211 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2214 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2218 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2221 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2301 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2305 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2308 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2326 "isa_tms320.tcc"
>
class OpLDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2335 "isa_tms320.tcc"
>
{
public:
	OpLDI_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2345 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2349 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2352 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2356 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2359 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2439 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2443 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2446 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2464 "isa_tms320.tcc"
>
class OpLDIcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2473 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2484 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2488 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2491 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2495 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2498 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2578 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2582 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2585 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2603 "isa_tms320.tcc"
>
class OpLDIcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2612 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2623 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2627 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2630 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2634 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2637 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2717 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2721 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2724 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2742 "isa_tms320.tcc"
>
class OpLDIcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2751 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2764 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2768 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2771 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2775 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2778 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2858 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2862 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2865 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2883 "isa_tms320.tcc"
>
class OpLDIcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2892 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2903 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2907 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2910 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2914 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2917 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2997 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3001 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3004 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3022 "isa_tms320.tcc"
>
class OpLDM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3031 "isa_tms320.tcc"
>
{
public:
	OpLDM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3041 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3045 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3048 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3052 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3055 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3135 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3139 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3142 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3160 "isa_tms320.tcc"
>
class OpLDM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3169 "isa_tms320.tcc"
>
{
public:
	OpLDM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3179 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3183 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3186 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3190 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3193 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3273 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3277 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3280 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3298 "isa_tms320.tcc"
>
class OpLDM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3307 "isa_tms320.tcc"
>
{
public:
	OpLDM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3319 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3323 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3326 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3330 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3333 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3413 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3417 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3420 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3438 "isa_tms320.tcc"
>
class OpLDM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3447 "isa_tms320.tcc"
>
{
public:
	OpLDM_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3457 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3461 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3464 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3468 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3471 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3551 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3555 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3558 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3576 "isa_tms320.tcc"
>
class OpLDP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3585 "isa_tms320.tcc"
>
{
public:
	OpLDP(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3594 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3598 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3601 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3605 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3608 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3688 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3692 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3695 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3713 "isa_tms320.tcc"
>
class OpPOP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3722 "isa_tms320.tcc"
>
{
public:
	OpPOP(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3731 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3735 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3738 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3742 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3745 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3825 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3829 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3832 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3850 "isa_tms320.tcc"
>
class OpPOPF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3859 "isa_tms320.tcc"
>
{
public:
	OpPOPF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3868 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3872 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3875 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3879 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3882 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3962 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3966 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3969 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3987 "isa_tms320.tcc"
>
class OpPUSH : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3996 "isa_tms320.tcc"
>
{
public:
	OpPUSH(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4005 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4009 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4012 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4016 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4019 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4099 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4103 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4106 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4124 "isa_tms320.tcc"
>
class OpPUSHF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4133 "isa_tms320.tcc"
>
{
public:
	OpPUSHF(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4142 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4149 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4153 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4156 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4236 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4240 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4243 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4261 "isa_tms320.tcc"
>
class OpSTF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4270 "isa_tms320.tcc"
>
{
public:
	OpSTF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4280 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4284 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4287 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4291 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4294 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4374 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4378 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4381 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4399 "isa_tms320.tcc"
>
class OpSTF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4408 "isa_tms320.tcc"
>
{
public:
	OpSTF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4420 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4424 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4427 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4431 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4434 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4514 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4518 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4521 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4539 "isa_tms320.tcc"
>
class OpSTI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4548 "isa_tms320.tcc"
>
{
public:
	OpSTI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4558 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4562 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4565 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4569 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4572 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4652 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4656 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4659 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4677 "isa_tms320.tcc"
>
class OpSTI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4686 "isa_tms320.tcc"
>
{
public:
	OpSTI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4698 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4702 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4705 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4709 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4712 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4792 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4796 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4799 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4817 "isa_tms320.tcc"
>
class OpABSF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4826 "isa_tms320.tcc"
>
{
public:
	OpABSF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4836 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4840 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4843 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4847 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4850 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4930 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4934 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4937 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4955 "isa_tms320.tcc"
>
class OpABSF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4964 "isa_tms320.tcc"
>
{
public:
	OpABSF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4974 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4978 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4981 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4985 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4988 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5068 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5072 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5075 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5093 "isa_tms320.tcc"
>
class OpABSF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5102 "isa_tms320.tcc"
>
{
public:
	OpABSF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5114 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5118 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5121 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5125 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5128 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5208 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5212 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5215 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5233 "isa_tms320.tcc"
>
class OpABSF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5242 "isa_tms320.tcc"
>
{
public:
	OpABSF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5252 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5256 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5259 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5266 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5346 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5350 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5353 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5371 "isa_tms320.tcc"
>
class OpABSI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5380 "isa_tms320.tcc"
>
{
public:
	OpABSI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5390 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5397 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5404 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5484 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5488 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5491 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5509 "isa_tms320.tcc"
>
class OpABSI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5518 "isa_tms320.tcc"
>
{
public:
	OpABSI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5528 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5535 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5539 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5542 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5622 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5626 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5629 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5647 "isa_tms320.tcc"
>
class OpABSI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5656 "isa_tms320.tcc"
>
{
public:
	OpABSI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5668 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5672 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5675 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5679 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5682 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5762 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5766 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5769 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5787 "isa_tms320.tcc"
>
class OpABSI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5796 "isa_tms320.tcc"
>
{
public:
	OpABSI_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5806 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5810 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5813 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5817 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5820 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5900 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5904 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5907 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5925 "isa_tms320.tcc"
>
class OpADDC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5934 "isa_tms320.tcc"
>
{
public:
	OpADDC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5944 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5948 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5951 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5955 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5958 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6038 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6042 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6045 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6063 "isa_tms320.tcc"
>
class OpADDC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6072 "isa_tms320.tcc"
>
{
public:
	OpADDC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6082 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6086 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6089 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6093 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6096 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6176 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6180 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6183 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6201 "isa_tms320.tcc"
>
class OpADDC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6210 "isa_tms320.tcc"
>
{
public:
	OpADDC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6222 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6226 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6229 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6233 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6236 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6316 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6320 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6323 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6341 "isa_tms320.tcc"
>
class OpADDC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6350 "isa_tms320.tcc"
>
{
public:
	OpADDC_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6360 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6364 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6367 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6371 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6374 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6454 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6458 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6461 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6479 "isa_tms320.tcc"
>
class OpADDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6488 "isa_tms320.tcc"
>
{
public:
	OpADDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6498 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6502 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6505 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6509 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6512 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6592 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6596 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6599 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6617 "isa_tms320.tcc"
>
class OpADDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6626 "isa_tms320.tcc"
>
{
public:
	OpADDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6636 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6640 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6643 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6647 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6650 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6730 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6734 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6737 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6755 "isa_tms320.tcc"
>
class OpADDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6764 "isa_tms320.tcc"
>
{
public:
	OpADDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6776 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6780 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6783 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6787 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6790 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6870 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6874 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6877 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6895 "isa_tms320.tcc"
>
class OpADDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6904 "isa_tms320.tcc"
>
{
public:
	OpADDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6914 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6918 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6921 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6925 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6928 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7008 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7012 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7015 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7033 "isa_tms320.tcc"
>
class OpADDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7042 "isa_tms320.tcc"
>
{
public:
	OpADDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7052 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7056 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7059 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7063 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7066 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7146 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7150 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7153 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7171 "isa_tms320.tcc"
>
class OpADDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7180 "isa_tms320.tcc"
>
{
public:
	OpADDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7190 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7194 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7197 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7201 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7204 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7284 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7288 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7291 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7309 "isa_tms320.tcc"
>
class OpADDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7318 "isa_tms320.tcc"
>
{
public:
	OpADDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7330 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7334 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7337 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7341 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7344 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7424 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7428 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7431 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7449 "isa_tms320.tcc"
>
class OpADDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7458 "isa_tms320.tcc"
>
{
public:
	OpADDI_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7468 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7472 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7475 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7479 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7482 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7562 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7566 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7569 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7587 "isa_tms320.tcc"
>
class OpAND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7596 "isa_tms320.tcc"
>
{
public:
	OpAND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7606 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7610 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7613 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7617 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7620 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7700 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7704 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7707 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7725 "isa_tms320.tcc"
>
class OpAND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7734 "isa_tms320.tcc"
>
{
public:
	OpAND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7744 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7748 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7751 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7755 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7758 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7838 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7842 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7845 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7863 "isa_tms320.tcc"
>
class OpAND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7872 "isa_tms320.tcc"
>
{
public:
	OpAND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7884 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7888 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7891 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7895 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7898 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7978 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7982 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7985 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8003 "isa_tms320.tcc"
>
class OpAND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8012 "isa_tms320.tcc"
>
{
public:
	OpAND_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8022 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8026 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8029 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8033 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8036 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8116 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8120 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8123 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8141 "isa_tms320.tcc"
>
class OpANDN_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8150 "isa_tms320.tcc"
>
{
public:
	OpANDN_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8160 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8164 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8167 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8174 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8254 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8258 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8261 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8279 "isa_tms320.tcc"
>
class OpANDN_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8288 "isa_tms320.tcc"
>
{
public:
	OpANDN_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8298 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8302 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8305 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8309 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8312 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8392 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8396 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8399 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8417 "isa_tms320.tcc"
>
class OpANDN_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8426 "isa_tms320.tcc"
>
{
public:
	OpANDN_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8438 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8442 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8445 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8449 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8452 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8532 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8536 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8539 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8557 "isa_tms320.tcc"
>
class OpANDN_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8566 "isa_tms320.tcc"
>
{
public:
	OpANDN_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8576 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8580 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8583 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8587 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8590 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8670 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8674 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8677 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8695 "isa_tms320.tcc"
>
class OpASH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8704 "isa_tms320.tcc"
>
{
public:
	OpASH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8714 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8718 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8721 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8725 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8728 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8808 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8812 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8815 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8833 "isa_tms320.tcc"
>
class OpASH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8842 "isa_tms320.tcc"
>
{
public:
	OpASH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8852 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8856 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8859 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8863 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8866 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8946 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8950 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8953 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8971 "isa_tms320.tcc"
>
class OpASH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8980 "isa_tms320.tcc"
>
{
public:
	OpASH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8992 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8996 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8999 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9003 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9006 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9086 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9090 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9093 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9111 "isa_tms320.tcc"
>
class OpASH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9120 "isa_tms320.tcc"
>
{
public:
	OpASH_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9130 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9134 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9137 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9141 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9144 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9224 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9228 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9231 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9249 "isa_tms320.tcc"
>
class OpCMPF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9258 "isa_tms320.tcc"
>
{
public:
	OpCMPF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9268 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9272 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9275 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9279 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9282 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9362 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9366 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9369 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9387 "isa_tms320.tcc"
>
class OpCMPF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9396 "isa_tms320.tcc"
>
{
public:
	OpCMPF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9406 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9410 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9413 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9417 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9420 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9500 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9504 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9507 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9525 "isa_tms320.tcc"
>
class OpCMPF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9534 "isa_tms320.tcc"
>
{
public:
	OpCMPF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9546 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9550 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9553 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9557 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9560 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9640 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9644 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9647 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9665 "isa_tms320.tcc"
>
class OpCMPF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9674 "isa_tms320.tcc"
>
{
public:
	OpCMPF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9684 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9688 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9691 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9695 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9698 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9778 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9782 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9785 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9803 "isa_tms320.tcc"
>
class OpCMPI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9812 "isa_tms320.tcc"
>
{
public:
	OpCMPI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9822 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9826 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9829 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9833 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9836 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9916 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9920 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9923 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9941 "isa_tms320.tcc"
>
class OpCMPI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9950 "isa_tms320.tcc"
>
{
public:
	OpCMPI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9960 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9964 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9967 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9971 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9974 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10054 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10058 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10061 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10079 "isa_tms320.tcc"
>
class OpCMPI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10088 "isa_tms320.tcc"
>
{
public:
	OpCMPI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10100 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10107 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10194 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10219 "isa_tms320.tcc"
>
class OpCMPI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10228 "isa_tms320.tcc"
>
{
public:
	OpCMPI_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10238 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10242 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10245 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10249 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10252 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10332 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10336 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10339 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10357 "isa_tms320.tcc"
>
class OpFIX_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10366 "isa_tms320.tcc"
>
{
public:
	OpFIX_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10376 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10380 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10383 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10387 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10390 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10470 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10474 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10477 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10495 "isa_tms320.tcc"
>
class OpFIX_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10504 "isa_tms320.tcc"
>
{
public:
	OpFIX_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10514 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10521 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10528 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10608 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10612 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10615 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10633 "isa_tms320.tcc"
>
class OpFIX_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10642 "isa_tms320.tcc"
>
{
public:
	OpFIX_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10654 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10661 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10665 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10668 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10748 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10752 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10755 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10773 "isa_tms320.tcc"
>
class OpFIX_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10782 "isa_tms320.tcc"
>
{
public:
	OpFIX_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10792 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10796 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10799 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10803 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10806 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10886 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10890 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10893 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10911 "isa_tms320.tcc"
>
class OpFLOAT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10920 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10930 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10934 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10937 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10941 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10944 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11024 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11028 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11031 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11049 "isa_tms320.tcc"
>
class OpFLOAT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11058 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11068 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11072 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11075 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11079 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11082 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11162 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11166 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11169 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11187 "isa_tms320.tcc"
>
class OpFLOAT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11196 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11208 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11212 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11215 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11219 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11222 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11302 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11306 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11309 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11327 "isa_tms320.tcc"
>
class OpFLOAT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11336 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11346 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11350 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11353 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11357 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11360 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11440 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11444 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11447 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11465 "isa_tms320.tcc"
>
class OpLSH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11474 "isa_tms320.tcc"
>
{
public:
	OpLSH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11484 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11488 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11491 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11495 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11498 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11578 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11582 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11585 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11603 "isa_tms320.tcc"
>
class OpLSH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11612 "isa_tms320.tcc"
>
{
public:
	OpLSH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11622 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11626 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11629 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11633 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11636 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11716 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11720 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11723 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11741 "isa_tms320.tcc"
>
class OpLSH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11750 "isa_tms320.tcc"
>
{
public:
	OpLSH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11762 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11766 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11769 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11773 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11776 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11856 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11860 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11863 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11878 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11881 "isa_tms320.tcc"
>
class OpLSH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11890 "isa_tms320.tcc"
>
{
public:
	OpLSH_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11900 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11904 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11907 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11911 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11914 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11994 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11998 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12001 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12019 "isa_tms320.tcc"
>
class OpMPYF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12028 "isa_tms320.tcc"
>
{
public:
	OpMPYF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12038 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12042 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12045 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12049 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12052 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12132 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12136 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12139 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12157 "isa_tms320.tcc"
>
class OpMPYF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12166 "isa_tms320.tcc"
>
{
public:
	OpMPYF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12176 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12180 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12183 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12187 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12190 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12270 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12274 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12277 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12295 "isa_tms320.tcc"
>
class OpMPYF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12304 "isa_tms320.tcc"
>
{
public:
	OpMPYF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12316 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12320 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12323 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12327 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12330 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12410 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12414 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12417 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12435 "isa_tms320.tcc"
>
class OpMPYF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12444 "isa_tms320.tcc"
>
{
public:
	OpMPYF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12454 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12458 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12461 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12465 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12468 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12548 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12552 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12555 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12573 "isa_tms320.tcc"
>
class OpMPYI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12582 "isa_tms320.tcc"
>
{
public:
	OpMPYI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12592 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12596 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12599 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12603 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12606 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12686 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12690 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12693 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12711 "isa_tms320.tcc"
>
class OpMPYI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12720 "isa_tms320.tcc"
>
{
public:
	OpMPYI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12730 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12734 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12737 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12741 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12744 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12824 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12828 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12831 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12849 "isa_tms320.tcc"
>
class OpMPYI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12858 "isa_tms320.tcc"
>
{
public:
	OpMPYI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12870 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12874 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12877 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12881 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12884 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12964 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12968 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12971 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12989 "isa_tms320.tcc"
>
class OpMPYI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12998 "isa_tms320.tcc"
>
{
public:
	OpMPYI_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13008 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13012 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13015 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13019 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13022 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13102 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13106 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13109 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13127 "isa_tms320.tcc"
>
class OpNEGB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13136 "isa_tms320.tcc"
>
{
public:
	OpNEGB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13146 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13150 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13153 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13157 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13160 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13240 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13244 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13247 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13265 "isa_tms320.tcc"
>
class OpNEGB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13274 "isa_tms320.tcc"
>
{
public:
	OpNEGB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13284 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13288 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13291 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13295 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13298 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13378 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13382 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13385 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13403 "isa_tms320.tcc"
>
class OpNEGB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13412 "isa_tms320.tcc"
>
{
public:
	OpNEGB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13424 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13428 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13431 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13435 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13438 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13518 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13522 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13525 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13543 "isa_tms320.tcc"
>
class OpNEGB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13552 "isa_tms320.tcc"
>
{
public:
	OpNEGB_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13562 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13566 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13569 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13573 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13576 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13656 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13660 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13663 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13681 "isa_tms320.tcc"
>
class OpNEGF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13690 "isa_tms320.tcc"
>
{
public:
	OpNEGF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13700 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13704 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13707 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13711 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13714 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13794 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13798 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13801 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13819 "isa_tms320.tcc"
>
class OpNEGF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13828 "isa_tms320.tcc"
>
{
public:
	OpNEGF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13838 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13842 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13845 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13849 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13852 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13932 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13936 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13939 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13957 "isa_tms320.tcc"
>
class OpNEGF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13966 "isa_tms320.tcc"
>
{
public:
	OpNEGF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13978 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13982 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13985 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13989 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13992 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14072 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14076 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14079 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14097 "isa_tms320.tcc"
>
class OpNEGF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14106 "isa_tms320.tcc"
>
{
public:
	OpNEGF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14116 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14120 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14123 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14127 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14130 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14210 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14214 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14217 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14235 "isa_tms320.tcc"
>
class OpNEGI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14244 "isa_tms320.tcc"
>
{
public:
	OpNEGI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14254 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14258 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14261 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14265 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14268 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14348 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14352 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14355 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14373 "isa_tms320.tcc"
>
class OpNEGI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14382 "isa_tms320.tcc"
>
{
public:
	OpNEGI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14392 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14396 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14399 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14403 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14406 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14486 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14490 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14493 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14511 "isa_tms320.tcc"
>
class OpNEGI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14520 "isa_tms320.tcc"
>
{
public:
	OpNEGI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14532 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14536 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14539 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14546 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14626 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14630 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14633 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14651 "isa_tms320.tcc"
>
class OpNEGI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14660 "isa_tms320.tcc"
>
{
public:
	OpNEGI_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14670 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14674 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14677 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14681 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14684 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14764 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14768 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14771 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14789 "isa_tms320.tcc"
>
class OpNORM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14798 "isa_tms320.tcc"
>
{
public:
	OpNORM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14808 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14812 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14815 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14819 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14822 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14902 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14906 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14909 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14927 "isa_tms320.tcc"
>
class OpNORM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14936 "isa_tms320.tcc"
>
{
public:
	OpNORM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14946 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14950 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14953 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14957 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14960 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15040 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15044 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15047 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15065 "isa_tms320.tcc"
>
class OpNORM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15074 "isa_tms320.tcc"
>
{
public:
	OpNORM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15086 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15090 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15093 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15097 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15100 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15180 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15184 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15187 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15205 "isa_tms320.tcc"
>
class OpNORM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15214 "isa_tms320.tcc"
>
{
public:
	OpNORM_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15224 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15228 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15231 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15235 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15238 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15318 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15322 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15325 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15343 "isa_tms320.tcc"
>
class OpNOT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15352 "isa_tms320.tcc"
>
{
public:
	OpNOT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15362 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15366 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15369 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15373 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15376 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15456 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15460 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15463 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15481 "isa_tms320.tcc"
>
class OpNOT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15490 "isa_tms320.tcc"
>
{
public:
	OpNOT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15500 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15504 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15507 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15514 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15594 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15598 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15601 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15619 "isa_tms320.tcc"
>
class OpNOT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15628 "isa_tms320.tcc"
>
{
public:
	OpNOT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15640 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15644 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15647 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15654 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15734 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15738 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15741 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15759 "isa_tms320.tcc"
>
class OpNOT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15768 "isa_tms320.tcc"
>
{
public:
	OpNOT_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15778 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15782 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15785 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15789 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15792 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15872 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15876 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15879 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15897 "isa_tms320.tcc"
>
class OpOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15906 "isa_tms320.tcc"
>
{
public:
	OpOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15916 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15920 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15923 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15927 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15930 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16010 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16014 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16017 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16035 "isa_tms320.tcc"
>
class OpOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16044 "isa_tms320.tcc"
>
{
public:
	OpOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16054 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16058 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16061 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16065 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16068 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16148 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16152 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16155 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16173 "isa_tms320.tcc"
>
class OpOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16182 "isa_tms320.tcc"
>
{
public:
	OpOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16194 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16198 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16201 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16208 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16288 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16292 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16295 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16313 "isa_tms320.tcc"
>
class OpOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16322 "isa_tms320.tcc"
>
{
public:
	OpOR_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16332 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16336 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16339 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16343 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16346 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16426 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16430 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16433 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16451 "isa_tms320.tcc"
>
class OpRND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16460 "isa_tms320.tcc"
>
{
public:
	OpRND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16470 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16474 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16477 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16481 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16484 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16564 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16568 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16571 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16589 "isa_tms320.tcc"
>
class OpRND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16598 "isa_tms320.tcc"
>
{
public:
	OpRND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16608 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16612 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16615 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16619 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16622 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16702 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16706 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16709 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16727 "isa_tms320.tcc"
>
class OpRND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16736 "isa_tms320.tcc"
>
{
public:
	OpRND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16748 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16752 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16755 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16759 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16762 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16842 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16846 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16849 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16867 "isa_tms320.tcc"
>
class OpRND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16876 "isa_tms320.tcc"
>
{
public:
	OpRND_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16886 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16890 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16893 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16897 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16900 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16980 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16984 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16987 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17005 "isa_tms320.tcc"
>
class OpROL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17014 "isa_tms320.tcc"
>
{
public:
	OpROL(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17023 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17027 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17030 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17034 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17037 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17117 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17121 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17124 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17142 "isa_tms320.tcc"
>
class OpROLC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17151 "isa_tms320.tcc"
>
{
public:
	OpROLC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17160 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17164 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17167 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17174 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17254 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17258 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17261 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17279 "isa_tms320.tcc"
>
class OpROR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17288 "isa_tms320.tcc"
>
{
public:
	OpROR(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17297 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17301 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17304 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17308 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17311 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17391 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17395 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17398 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17416 "isa_tms320.tcc"
>
class OpRORC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17425 "isa_tms320.tcc"
>
{
public:
	OpRORC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17434 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17438 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17441 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17445 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17448 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17528 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17532 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17535 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17553 "isa_tms320.tcc"
>
class OpSUBB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17562 "isa_tms320.tcc"
>
{
public:
	OpSUBB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17572 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17576 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17579 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17583 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17586 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17666 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17670 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17673 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17691 "isa_tms320.tcc"
>
class OpSUBB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17700 "isa_tms320.tcc"
>
{
public:
	OpSUBB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17710 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17714 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17717 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17721 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17724 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17804 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17808 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17811 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17829 "isa_tms320.tcc"
>
class OpSUBB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17838 "isa_tms320.tcc"
>
{
public:
	OpSUBB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17850 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17854 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17857 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17861 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17864 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17944 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17948 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17951 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17969 "isa_tms320.tcc"
>
class OpSUBB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17978 "isa_tms320.tcc"
>
{
public:
	OpSUBB_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17988 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17992 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17995 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17999 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18002 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18082 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18086 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18089 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18107 "isa_tms320.tcc"
>
class OpSUBC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18116 "isa_tms320.tcc"
>
{
public:
	OpSUBC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18126 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18130 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18133 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18137 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18140 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18220 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18224 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18227 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18245 "isa_tms320.tcc"
>
class OpSUBC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18254 "isa_tms320.tcc"
>
{
public:
	OpSUBC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18264 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18268 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18271 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18275 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18278 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18358 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18362 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18365 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18383 "isa_tms320.tcc"
>
class OpSUBC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18392 "isa_tms320.tcc"
>
{
public:
	OpSUBC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18404 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18408 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18411 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18418 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18498 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18502 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18505 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18523 "isa_tms320.tcc"
>
class OpSUBC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18532 "isa_tms320.tcc"
>
{
public:
	OpSUBC_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18542 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18549 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18556 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18636 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18640 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18643 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18661 "isa_tms320.tcc"
>
class OpSUBF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18670 "isa_tms320.tcc"
>
{
public:
	OpSUBF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18680 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18687 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18691 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18694 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18774 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18778 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18781 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18799 "isa_tms320.tcc"
>
class OpSUBF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18808 "isa_tms320.tcc"
>
{
public:
	OpSUBF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18818 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18822 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18825 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18829 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18832 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18912 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18916 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18919 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18937 "isa_tms320.tcc"
>
class OpSUBF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18946 "isa_tms320.tcc"
>
{
public:
	OpSUBF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18958 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18962 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18965 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18969 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18972 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19052 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19056 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19059 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19077 "isa_tms320.tcc"
>
class OpSUBF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19086 "isa_tms320.tcc"
>
{
public:
	OpSUBF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19096 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19103 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19107 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19110 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19190 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19197 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19215 "isa_tms320.tcc"
>
class OpSUBI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19224 "isa_tms320.tcc"
>
{
public:
	OpSUBI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19234 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19238 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19241 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19245 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19248 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19328 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19332 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19335 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19353 "isa_tms320.tcc"
>
class OpSUBI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19362 "isa_tms320.tcc"
>
{
public:
	OpSUBI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19372 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19379 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19466 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19491 "isa_tms320.tcc"
>
class OpSUBI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19500 "isa_tms320.tcc"
>
{
public:
	OpSUBI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19512 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19516 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19519 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19523 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19526 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19606 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19610 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19613 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19631 "isa_tms320.tcc"
>
class OpSUBI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19640 "isa_tms320.tcc"
>
{
public:
	OpSUBI_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19650 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19654 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19657 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19661 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19664 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19744 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19748 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19751 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19769 "isa_tms320.tcc"
>
class OpSUBRB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19778 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19788 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19792 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19795 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19799 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19802 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19882 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19886 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19889 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19907 "isa_tms320.tcc"
>
class OpSUBRB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19916 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19926 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19930 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19933 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19937 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19940 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20020 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20024 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20027 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20045 "isa_tms320.tcc"
>
class OpSUBRB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20054 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20066 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20070 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20073 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20080 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20160 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20164 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20167 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20185 "isa_tms320.tcc"
>
class OpSUBRB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20194 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20204 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20208 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20211 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20215 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20218 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20298 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20302 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20305 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20323 "isa_tms320.tcc"
>
class OpSUBRF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20332 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20342 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20346 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20349 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20353 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20356 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20436 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20440 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20443 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20461 "isa_tms320.tcc"
>
class OpSUBRF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20470 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20480 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20487 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20491 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20494 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20574 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20578 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20581 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20599 "isa_tms320.tcc"
>
class OpSUBRF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20608 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20620 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20624 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20627 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20631 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20634 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20714 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20718 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20721 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20739 "isa_tms320.tcc"
>
class OpSUBRF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20748 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20758 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20762 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20765 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20769 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20772 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20852 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20856 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20859 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20877 "isa_tms320.tcc"
>
class OpSUBRI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20886 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20896 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20900 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20903 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20907 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20910 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20990 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20994 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20997 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21015 "isa_tms320.tcc"
>
class OpSUBRI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21024 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21034 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21038 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21041 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21045 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21048 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21128 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21132 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21135 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21153 "isa_tms320.tcc"
>
class OpSUBRI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21162 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21174 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21181 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21185 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21188 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21268 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21272 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21275 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21293 "isa_tms320.tcc"
>
class OpSUBRI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21302 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21312 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21316 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21319 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21323 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21326 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21406 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21410 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21413 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21431 "isa_tms320.tcc"
>
class OpTSTB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21440 "isa_tms320.tcc"
>
{
public:
	OpTSTB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21450 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21454 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21457 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21461 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21464 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21544 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21548 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21551 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21569 "isa_tms320.tcc"
>
class OpTSTB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21578 "isa_tms320.tcc"
>
{
public:
	OpTSTB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21588 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21592 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21595 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21599 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21602 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21682 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21686 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21689 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21707 "isa_tms320.tcc"
>
class OpTSTB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21716 "isa_tms320.tcc"
>
{
public:
	OpTSTB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21728 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21732 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21735 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21739 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21742 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21822 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21826 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21829 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21847 "isa_tms320.tcc"
>
class OpTSTB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21856 "isa_tms320.tcc"
>
{
public:
	OpTSTB_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21866 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21870 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21873 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21877 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21880 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21960 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21964 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21967 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21985 "isa_tms320.tcc"
>
class OpXOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21994 "isa_tms320.tcc"
>
{
public:
	OpXOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22004 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22008 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22011 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22015 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22018 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22098 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22102 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22105 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22123 "isa_tms320.tcc"
>
class OpXOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22132 "isa_tms320.tcc"
>
{
public:
	OpXOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22142 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22149 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22153 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22156 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22236 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22240 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22243 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22261 "isa_tms320.tcc"
>
class OpXOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22270 "isa_tms320.tcc"
>
{
public:
	OpXOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22282 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22286 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22289 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22293 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22296 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22376 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22380 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22383 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22401 "isa_tms320.tcc"
>
class OpXOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22410 "isa_tms320.tcc"
>
{
public:
	OpXOR_imm(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22420 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22424 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22427 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22431 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22434 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22514 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22518 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22521 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22539 "isa_tms320.tcc"
>
class OpADDC3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22548 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22559 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22563 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22566 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22570 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22573 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22653 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22657 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22660 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22678 "isa_tms320.tcc"
>
class OpADDC3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22687 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22699 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22703 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22706 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22710 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22713 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22793 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22797 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22800 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22818 "isa_tms320.tcc"
>
class OpADDC3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22827 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22839 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22843 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22846 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22850 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22853 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22933 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22937 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22940 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22958 "isa_tms320.tcc"
>
class OpADDC3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22967 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22980 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22984 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22987 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22991 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22994 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23074 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23078 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23081 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23099 "isa_tms320.tcc"
>
class OpADDF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23108 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23119 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23123 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23126 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23130 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23133 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23213 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23217 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23220 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23238 "isa_tms320.tcc"
>
class OpADDF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23247 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23259 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23266 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23270 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23273 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23353 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23357 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23360 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23378 "isa_tms320.tcc"
>
class OpADDF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23387 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23399 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23403 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23406 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23410 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23413 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23493 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23497 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23500 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23518 "isa_tms320.tcc"
>
class OpADDF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23527 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23540 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23544 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23547 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23551 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23554 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23634 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23638 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23641 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23659 "isa_tms320.tcc"
>
class OpADDI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23668 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23679 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23686 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23693 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23773 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23777 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23780 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23798 "isa_tms320.tcc"
>
class OpADDI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23807 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23819 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23823 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23826 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23830 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23833 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23913 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23917 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23920 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23938 "isa_tms320.tcc"
>
class OpADDI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23947 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23959 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23966 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23973 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24053 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24057 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24060 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24078 "isa_tms320.tcc"
>
class OpADDI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24087 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24100 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24107 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24194 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24219 "isa_tms320.tcc"
>
class OpAND3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24228 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24239 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24243 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24246 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24250 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24253 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24333 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24337 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24340 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24358 "isa_tms320.tcc"
>
class OpAND3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24367 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24379 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24386 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24390 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24393 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24473 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24477 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24480 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24498 "isa_tms320.tcc"
>
class OpAND3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24507 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24519 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24523 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24526 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24530 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24533 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24613 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24617 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24620 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24638 "isa_tms320.tcc"
>
class OpAND3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24647 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24660 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24664 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24667 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24671 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24674 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24754 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24758 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24761 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24779 "isa_tms320.tcc"
>
class OpANDN3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24788 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24799 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24803 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24806 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24810 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24813 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24893 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24897 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24900 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24918 "isa_tms320.tcc"
>
class OpANDN3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24927 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24939 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24943 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24946 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24950 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24953 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25033 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25037 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25040 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25058 "isa_tms320.tcc"
>
class OpANDN3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25067 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25079 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25083 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25086 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25090 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25093 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25173 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25177 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25180 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25198 "isa_tms320.tcc"
>
class OpANDN3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25207 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25220 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25224 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25227 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25231 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25234 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25314 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25318 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25321 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25339 "isa_tms320.tcc"
>
class OpASH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25348 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25359 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25363 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25366 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25370 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25373 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25453 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25457 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25460 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25478 "isa_tms320.tcc"
>
class OpASH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25487 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25499 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25503 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25506 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25510 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25513 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25593 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25597 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25600 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25618 "isa_tms320.tcc"
>
class OpASH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25627 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25639 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25643 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25646 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25650 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25653 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25733 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25737 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25740 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25758 "isa_tms320.tcc"
>
class OpASH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25767 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25780 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25784 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25787 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25791 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25794 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25874 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25878 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25881 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25899 "isa_tms320.tcc"
>
class OpCMPF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25908 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25918 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25925 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25929 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25932 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26012 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26016 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26019 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26037 "isa_tms320.tcc"
>
class OpCMPF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26046 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26057 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26061 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26064 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26068 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26071 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26151 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26155 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26158 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26176 "isa_tms320.tcc"
>
class OpCMPF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26181 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26185 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26196 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26200 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26203 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26207 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26210 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26290 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26294 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26297 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26315 "isa_tms320.tcc"
>
class OpCMPF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26324 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26336 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26340 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26343 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26347 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26350 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26430 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26434 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26437 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26455 "isa_tms320.tcc"
>
class OpCMPI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26464 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26474 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26478 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26481 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26485 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26488 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26568 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26572 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26575 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26593 "isa_tms320.tcc"
>
class OpCMPI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26602 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26613 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26617 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26620 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26624 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26627 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26707 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26711 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26714 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26732 "isa_tms320.tcc"
>
class OpCMPI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26741 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26752 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26756 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26759 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26763 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26766 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26846 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26850 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26853 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26871 "isa_tms320.tcc"
>
class OpCMPI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26880 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26892 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26896 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26899 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26903 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26906 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26986 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26990 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26993 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27011 "isa_tms320.tcc"
>
class OpLSH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27020 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27031 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27035 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27038 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27042 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27045 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27125 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27129 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27132 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27150 "isa_tms320.tcc"
>
class OpLSH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27159 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27171 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27175 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27178 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27182 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27185 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27265 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27269 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27272 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27290 "isa_tms320.tcc"
>
class OpLSH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27299 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27311 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27315 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27318 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27322 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27325 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27405 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27409 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27412 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27430 "isa_tms320.tcc"
>
class OpLSH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27439 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27452 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27456 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27459 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27463 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27466 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27546 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27550 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27553 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27571 "isa_tms320.tcc"
>
class OpMPYF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27580 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27591 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27595 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27598 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27602 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27605 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27685 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27689 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27692 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27710 "isa_tms320.tcc"
>
class OpMPYF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27719 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27731 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27735 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27738 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27742 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27745 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27825 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27829 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27832 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27850 "isa_tms320.tcc"
>
class OpMPYF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27859 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27871 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27875 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27878 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27882 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27885 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27965 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27969 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27972 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27990 "isa_tms320.tcc"
>
class OpMPYF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27999 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28012 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28016 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28019 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28023 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28026 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28106 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28110 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28113 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28131 "isa_tms320.tcc"
>
class OpMPYI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28140 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28151 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28155 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28158 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28162 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28165 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28245 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28249 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28252 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28270 "isa_tms320.tcc"
>
class OpMPYI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28279 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28291 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28295 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28298 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28302 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28305 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28385 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28389 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28392 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28410 "isa_tms320.tcc"
>
class OpMPYI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28419 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28431 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28435 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28438 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28442 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28445 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28525 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28529 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28532 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28550 "isa_tms320.tcc"
>
class OpMPYI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28559 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28572 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28576 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28579 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28583 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28586 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28666 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28670 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28673 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28691 "isa_tms320.tcc"
>
class OpOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28700 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28711 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28715 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28718 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28722 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28725 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28805 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28809 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28812 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28830 "isa_tms320.tcc"
>
class OpOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28839 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28851 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28855 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28858 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28862 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28865 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28945 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28949 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28952 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28970 "isa_tms320.tcc"
>
class OpOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28979 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28991 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28998 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29002 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29005 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29085 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29089 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29092 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29110 "isa_tms320.tcc"
>
class OpOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29119 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29132 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29136 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29139 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29143 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29146 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29226 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29230 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29233 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29251 "isa_tms320.tcc"
>
class OpSUBB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29260 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29271 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29275 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29278 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29282 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29285 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29365 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29369 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29372 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29390 "isa_tms320.tcc"
>
class OpSUBB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29399 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29411 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29418 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29425 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29505 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29509 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29512 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29530 "isa_tms320.tcc"
>
class OpSUBB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29539 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29551 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29555 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29558 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29562 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29565 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29645 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29649 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29652 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29670 "isa_tms320.tcc"
>
class OpSUBB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29679 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29692 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29696 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29699 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29703 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29706 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29786 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29790 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29793 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29811 "isa_tms320.tcc"
>
class OpSUBF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29820 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29831 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29835 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29838 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29842 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29845 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29925 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29929 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29932 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29950 "isa_tms320.tcc"
>
class OpSUBF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29959 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29971 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29975 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29978 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29982 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29985 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30065 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30069 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30072 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30090 "isa_tms320.tcc"
>
class OpSUBF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30099 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30111 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30115 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30118 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30122 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30125 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30205 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30209 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30212 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30230 "isa_tms320.tcc"
>
class OpSUBF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30239 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30252 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30256 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30259 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30266 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30346 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30350 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30353 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30371 "isa_tms320.tcc"
>
class OpSUBI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30380 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30391 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30395 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30398 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30402 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30405 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30485 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30489 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30492 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30510 "isa_tms320.tcc"
>
class OpSUBI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30519 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30531 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30535 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30538 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30542 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30545 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30625 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30629 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30632 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30650 "isa_tms320.tcc"
>
class OpSUBI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30659 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30671 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30675 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30678 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30682 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30685 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30765 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30769 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30772 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30790 "isa_tms320.tcc"
>
class OpSUBI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30799 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30812 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30816 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30819 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30823 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30826 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30906 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30910 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30913 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30931 "isa_tms320.tcc"
>
class OpTSTB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30940 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30950 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30954 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30957 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30961 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30964 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31044 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31048 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31051 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31069 "isa_tms320.tcc"
>
class OpTSTB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31078 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31089 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31093 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31096 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31103 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31183 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31187 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31190 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31208 "isa_tms320.tcc"
>
class OpTSTB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31217 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31228 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31232 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31235 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31239 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31242 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31322 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31326 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31329 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31347 "isa_tms320.tcc"
>
class OpTSTB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31356 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31368 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31372 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31375 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31379 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31382 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31462 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31466 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31469 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31487 "isa_tms320.tcc"
>
class OpXOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31496 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31507 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31514 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31521 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31601 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31605 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31608 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31626 "isa_tms320.tcc"
>
class OpXOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31635 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31647 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31654 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31661 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31741 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31745 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31748 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31766 "isa_tms320.tcc"
>
class OpXOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31775 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t src1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31787 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31791 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31794 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31798 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31801 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31881 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31885 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31888 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31906 "isa_tms320.tcc"
>
class OpXOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31915 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar2;
	uint32_t mod2;
	uint32_t ar1;
	uint32_t mod1;
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31928 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31932 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31935 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31939 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31942 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32022 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32026 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32029 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32047 "isa_tms320.tcc"
>
class OpBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32056 "isa_tms320.tcc"
>
{
public:
	OpBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32066 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32070 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32073 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32080 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32160 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32164 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32167 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32185 "isa_tms320.tcc"
>
class OpBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32194 "isa_tms320.tcc"
>
{
public:
	OpBcond_disp(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32204 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32208 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32211 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32215 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32218 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32298 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32302 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32305 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32323 "isa_tms320.tcc"
>
class OpBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32332 "isa_tms320.tcc"
>
{
public:
	OpBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32342 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32346 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32349 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32353 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32356 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32436 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32440 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32443 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32461 "isa_tms320.tcc"
>
class OpBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32470 "isa_tms320.tcc"
>
{
public:
	OpBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32480 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32487 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32491 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32494 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32574 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32578 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32581 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32599 "isa_tms320.tcc"
>
class OpBR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32608 "isa_tms320.tcc"
>
{
public:
	OpBR(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32617 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32621 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32624 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32628 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32631 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32711 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32715 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32718 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32736 "isa_tms320.tcc"
>
class OpBRD : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32745 "isa_tms320.tcc"
>
{
public:
	OpBRD(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32754 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32758 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32761 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32765 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32768 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32848 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32852 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32855 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32873 "isa_tms320.tcc"
>
class OpCALL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32882 "isa_tms320.tcc"
>
{
public:
	OpCALL(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32891 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32895 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32898 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32902 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32905 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32985 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32989 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32992 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33010 "isa_tms320.tcc"
>
class OpCALLcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33019 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33029 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33033 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33036 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33040 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33043 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33123 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33127 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33130 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33148 "isa_tms320.tcc"
>
class OpCALLcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33157 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33167 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33174 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33181 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33261 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33265 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33268 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33286 "isa_tms320.tcc"
>
class OpDBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33295 "isa_tms320.tcc"
>
{
public:
	OpDBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	uint32_t cond;
	uint32_t ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33306 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33310 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33313 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33317 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33320 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33400 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33404 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33407 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33425 "isa_tms320.tcc"
>
class OpDBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33434 "isa_tms320.tcc"
>
{
public:
	OpDBcond_disp(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t cond;
	uint32_t ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33445 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33449 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33452 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33456 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33459 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33539 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33543 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33546 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33564 "isa_tms320.tcc"
>
class OpDBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33573 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	uint32_t cond;
	uint32_t ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33584 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33588 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33591 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33595 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33598 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33678 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33682 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33685 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33703 "isa_tms320.tcc"
>
class OpDBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33712 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	uint32_t cond;
	uint32_t ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33723 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33727 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33730 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33734 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33737 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33817 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33821 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33824 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33842 "isa_tms320.tcc"
>
class OpIACK_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33851 "isa_tms320.tcc"
>
{
public:
	OpIACK_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33860 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33864 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33867 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33871 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33874 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33954 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33958 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33961 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33979 "isa_tms320.tcc"
>
class OpIACK_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33988 "isa_tms320.tcc"
>
{
public:
	OpIACK_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33999 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34003 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34006 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34010 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34013 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34093 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34097 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34100 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34118 "isa_tms320.tcc"
>
class OpIDLE : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34127 "isa_tms320.tcc"
>
{
public:
	OpIDLE(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34135 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34139 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34142 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34149 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34229 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34233 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34236 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34254 "isa_tms320.tcc"
>
class OpNOP_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34263 "isa_tms320.tcc"
>
{
public:
	OpNOP_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34272 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34276 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34279 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34283 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34286 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34366 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34370 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34373 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34391 "isa_tms320.tcc"
>
class OpNOP_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34400 "isa_tms320.tcc"
>
{
public:
	OpNOP_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34411 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34418 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34425 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34505 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34509 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34512 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34530 "isa_tms320.tcc"
>
class OpRETIcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34539 "isa_tms320.tcc"
>
{
public:
	OpRETIcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34548 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34552 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34555 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34559 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34562 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34642 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34646 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34649 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34667 "isa_tms320.tcc"
>
class OpRETScond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34676 "isa_tms320.tcc"
>
{
public:
	OpRETScond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34685 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34689 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34692 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34696 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34699 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34779 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34783 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34786 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34804 "isa_tms320.tcc"
>
class OpRPTB : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34813 "isa_tms320.tcc"
>
{
public:
	OpRPTB(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34822 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34826 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34829 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34833 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34836 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34916 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34920 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34923 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34941 "isa_tms320.tcc"
>
class OpRPTS_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34950 "isa_tms320.tcc"
>
{
public:
	OpRPTS_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34959 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34966 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34973 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35053 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35057 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35060 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35078 "isa_tms320.tcc"
>
class OpRPTS_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35087 "isa_tms320.tcc"
>
{
public:
	OpRPTS_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35096 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35103 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35107 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35110 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35190 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35197 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35215 "isa_tms320.tcc"
>
class OpRPTS_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35224 "isa_tms320.tcc"
>
{
public:
	OpRPTS_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35235 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35239 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35242 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35246 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35249 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35329 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35333 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35336 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35354 "isa_tms320.tcc"
>
class OpRPTS_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35363 "isa_tms320.tcc"
>
{
public:
	OpRPTS_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35372 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35379 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35466 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35491 "isa_tms320.tcc"
>
class OpSWI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35500 "isa_tms320.tcc"
>
{
public:
	OpSWI(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35508 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35512 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35515 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35519 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35522 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35602 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35606 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35609 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35627 "isa_tms320.tcc"
>
class OpTRAPcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35636 "isa_tms320.tcc"
>
{
public:
	OpTRAPcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t n;
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35646 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35650 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35653 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35657 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35660 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35740 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35744 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35747 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35765 "isa_tms320.tcc"
>
class OpIDLE2 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35774 "isa_tms320.tcc"
>
{
public:
	OpIDLE2(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35782 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35786 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35789 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35793 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35796 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35876 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35880 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35883 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35901 "isa_tms320.tcc"
>
class OpLOPOWER : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35910 "isa_tms320.tcc"
>
{
public:
	OpLOPOWER(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35918 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35925 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35929 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35932 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36012 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36016 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36019 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36037 "isa_tms320.tcc"
>
class OpMAXSPEED : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36046 "isa_tms320.tcc"
>
{
public:
	OpMAXSPEED(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 36054 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36058 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36061 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 36065 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 36068 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36148 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36152 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36155 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36173 "isa_tms320.tcc"
>
class OpLDFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36182 "isa_tms320.tcc"
>
{
public:
	OpLDFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36267 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36271 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36274 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36292 "isa_tms320.tcc"
>
class OpLDFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36301 "isa_tms320.tcc"
>
{
public:
	OpLDFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36388 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36392 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36395 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36413 "isa_tms320.tcc"
>
class OpLDII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36422 "isa_tms320.tcc"
>
{
public:
	OpLDII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t dst;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36507 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36511 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36514 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36532 "isa_tms320.tcc"
>
class OpLDII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36541 "isa_tms320.tcc"
>
{
public:
	OpLDII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t dst;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36628 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36632 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36635 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36653 "isa_tms320.tcc"
>
class OpSIGI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36662 "isa_tms320.tcc"
>
{
public:
	OpSIGI(CodeType code, typename CONFIG::address_t addr);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36745 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36749 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36752 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36770 "isa_tms320.tcc"
>
class OpSTFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36779 "isa_tms320.tcc"
>
{
public:
	OpSTFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t src;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36864 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36868 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36871 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36889 "isa_tms320.tcc"
>
class OpSTFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36898 "isa_tms320.tcc"
>
{
public:
	OpSTFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t src;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36985 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36989 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36992 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37010 "isa_tms320.tcc"
>
class OpSTII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37019 "isa_tms320.tcc"
>
{
public:
	OpSTII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	uint32_t src;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37104 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37108 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37111 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37129 "isa_tms320.tcc"
>
class OpSTII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37138 "isa_tms320.tcc"
>
{
public:
	OpSTII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t disp;
	uint32_t ar;
	uint32_t mod;
	uint32_t src;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37225 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37229 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37232 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37250 "isa_tms320.tcc"
>
class OpABSF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37259 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37273 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37277 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37280 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37284 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37287 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37367 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37371 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37374 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37392 "isa_tms320.tcc"
>
class OpABSF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37401 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37414 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37418 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37421 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37425 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37428 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37508 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37512 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37515 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37533 "isa_tms320.tcc"
>
class OpABSI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37542 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37556 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37560 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37563 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37567 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37570 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37650 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37654 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37657 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37675 "isa_tms320.tcc"
>
class OpABSI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37684 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37697 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37701 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37704 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37708 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37711 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37791 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37795 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37798 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37816 "isa_tms320.tcc"
>
class OpADDF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37825 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37840 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37844 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37847 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37851 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37854 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37934 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37938 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37941 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37959 "isa_tms320.tcc"
>
class OpADDF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37968 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37982 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37986 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37989 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37993 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37996 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38076 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38080 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38083 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38101 "isa_tms320.tcc"
>
class OpADDI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38110 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38125 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38129 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38132 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38136 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38139 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38219 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38223 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38226 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38244 "isa_tms320.tcc"
>
class OpADDI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38253 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38267 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38271 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38274 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38278 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38281 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38361 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38365 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38368 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38386 "isa_tms320.tcc"
>
class OpAND3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38395 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38410 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38414 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38417 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38421 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38424 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38504 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38508 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38511 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38529 "isa_tms320.tcc"
>
class OpAND3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38538 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38552 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38556 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38559 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38563 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38566 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38646 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38650 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38653 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38671 "isa_tms320.tcc"
>
class OpASH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38680 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t count;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38695 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38699 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38702 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38706 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38709 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38789 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38793 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38796 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38814 "isa_tms320.tcc"
>
class OpASH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38823 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t count;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38837 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38841 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38844 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38848 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38851 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38931 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38935 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38938 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38956 "isa_tms320.tcc"
>
class OpFIX_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38965 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38979 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38983 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38986 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38990 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38993 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39073 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39077 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39080 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39098 "isa_tms320.tcc"
>
class OpFIX_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39107 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39120 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39124 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39127 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39131 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39134 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39214 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39218 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39221 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39239 "isa_tms320.tcc"
>
class OpFLOAT_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39248 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39262 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39266 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39269 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39273 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39276 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39356 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39360 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39363 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39381 "isa_tms320.tcc"
>
class OpFLOAT_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39390 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39403 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39407 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39410 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39414 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39417 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39497 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39501 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39504 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39522 "isa_tms320.tcc"
>
class OpLDF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39531 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39545 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39549 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39552 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39556 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39559 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39639 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39643 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39646 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39664 "isa_tms320.tcc"
>
class OpLDF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39673 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39686 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39693 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39697 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39700 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39780 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39784 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39787 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39805 "isa_tms320.tcc"
>
class OpLDI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39814 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39828 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39832 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39835 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39839 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39842 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39922 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39926 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39929 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39947 "isa_tms320.tcc"
>
class OpLDI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39956 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39969 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39973 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39976 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39980 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39983 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40063 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40067 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40070 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40088 "isa_tms320.tcc"
>
class OpLSH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40097 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t count;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40112 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40116 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40119 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40123 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40126 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40206 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40210 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40213 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40231 "isa_tms320.tcc"
>
class OpLSH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40240 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t count;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40254 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40258 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40261 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40265 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40268 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40348 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40352 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40355 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40373 "isa_tms320.tcc"
>
class OpMPYF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40382 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40397 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40404 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40408 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40411 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40491 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40495 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40498 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40516 "isa_tms320.tcc"
>
class OpMPYF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40525 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40539 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40546 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40550 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40553 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40633 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40637 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40640 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40658 "isa_tms320.tcc"
>
class OpMPYI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40667 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40682 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40686 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40689 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40693 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40696 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40776 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40780 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40783 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40801 "isa_tms320.tcc"
>
class OpMPYI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40810 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40824 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40828 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40831 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40835 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40838 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40918 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40922 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40925 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40943 "isa_tms320.tcc"
>
class OpNEGF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40952 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40966 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40973 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40977 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40980 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41060 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41064 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41067 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41085 "isa_tms320.tcc"
>
class OpNEGF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41094 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41107 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41114 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41118 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41121 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41201 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41205 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41208 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41226 "isa_tms320.tcc"
>
class OpNEGI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41235 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41249 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41253 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41256 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41260 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41263 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41343 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41347 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41350 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41368 "isa_tms320.tcc"
>
class OpNEGI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41377 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41390 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41397 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41404 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41484 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41488 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41491 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41509 "isa_tms320.tcc"
>
class OpNOT_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41518 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41532 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41536 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41539 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41546 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41626 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41630 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41633 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41651 "isa_tms320.tcc"
>
class OpNOT_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41660 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41673 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41680 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41687 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41767 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41771 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41774 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41792 "isa_tms320.tcc"
>
class OpOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41801 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41816 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41823 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41827 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41830 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41910 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41914 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41917 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41935 "isa_tms320.tcc"
>
class OpOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41944 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41958 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41962 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41965 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41969 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41972 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42052 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42056 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42059 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42077 "isa_tms320.tcc"
>
class OpSTF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42086 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t d1_ar;
	uint32_t d1_mod;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42100 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42107 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42194 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42219 "isa_tms320.tcc"
>
class OpSTF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42228 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t d1_ar;
	uint32_t d1_mod;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42241 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42245 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42248 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42252 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42255 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42335 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42339 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42342 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42360 "isa_tms320.tcc"
>
class OpSTI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42369 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t d1_ar;
	uint32_t d1_mod;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42383 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42387 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42390 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42397 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42477 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42481 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42484 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42502 "isa_tms320.tcc"
>
class OpSTI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42511 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t d1_ar;
	uint32_t d1_mod;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42524 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42528 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42531 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42535 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42538 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42618 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42622 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42625 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42643 "isa_tms320.tcc"
>
class OpSUBF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42652 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42667 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42671 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42674 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42678 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42681 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42761 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42765 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42768 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42786 "isa_tms320.tcc"
>
class OpSUBF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42795 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42809 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42813 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42816 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42823 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42903 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42907 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42910 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42928 "isa_tms320.tcc"
>
class OpSUBI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42937 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42952 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42956 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42959 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42966 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43046 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43050 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43053 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43071 "isa_tms320.tcc"
>
class OpSUBI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43080 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43094 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43098 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43101 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43105 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43108 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43188 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43192 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43195 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43213 "isa_tms320.tcc"
>
class OpXOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43222 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43237 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43241 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43244 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43248 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43251 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43331 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43335 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43338 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43356 "isa_tms320.tcc"
>
class OpXOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43365 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t d2_ar;
	uint32_t d2_mod;
	uint32_t src3;
	uint32_t src1;
	uint32_t dst1;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43379 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43386 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43390 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43393 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43473 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43477 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43480 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43498 "isa_tms320.tcc"
>
class OpLDF_LDF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43507 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t s1_ar;
	uint32_t s1_mod;
	uint32_t dst1;
	uint32_t dst2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43521 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43528 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43535 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43615 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43619 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43622 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43640 "isa_tms320.tcc"
>
class OpLDF_LDF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43649 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t s1_ar;
	uint32_t s1_mod;
	uint32_t dst1;
	uint32_t dst2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43662 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43666 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43669 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43673 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43676 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43756 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43760 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43763 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43781 "isa_tms320.tcc"
>
class OpLDI_LDI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43790 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI(CodeType code, typename CONFIG::address_t addr);
	uint32_t s2_ar;
	uint32_t s2_mod;
	uint32_t s1_ar;
	uint32_t s1_mod;
	uint32_t dst1;
	uint32_t dst2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43804 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43808 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43811 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43815 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43818 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43898 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43902 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43905 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43923 "isa_tms320.tcc"
>
class OpLDI_LDI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43932 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t s1_ar;
	uint32_t s1_mod;
	uint32_t dst1;
	uint32_t dst2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43945 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43949 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43952 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43956 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43959 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44039 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44043 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44046 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44064 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44073 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t s4_ar;
	uint32_t s4_mod;
	uint32_t s3_ar;
	uint32_t s3_mod;
	uint32_t src2;
	uint32_t src1;
	uint32_t d2;
	uint32_t d1;
	uint32_t p;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44090 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44094 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44097 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44101 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44104 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44184 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44188 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44191 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44209 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44218 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src4;
	uint32_t src3;
	uint32_t src2;
	uint32_t src1;
	uint32_t d2;
	uint32_t d1;
	uint32_t p;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44233 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44237 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44240 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44244 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44247 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44327 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44331 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44334 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44352 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44361 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t s4_ar;
	uint32_t s4_mod;
	uint32_t s3_ar;
	uint32_t s3_mod;
	uint32_t src2;
	uint32_t src1;
	uint32_t d2;
	uint32_t d1;
	uint32_t p;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44378 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44382 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44385 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44389 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44392 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44472 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44476 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44479 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44497 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44506 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src4;
	uint32_t src3;
	uint32_t src2;
	uint32_t src1;
	uint32_t d2;
	uint32_t d1;
	uint32_t p;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44521 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44528 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44535 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44615 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44619 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44622 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44640 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44649 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t s4_ar;
	uint32_t s4_mod;
	uint32_t s3_ar;
	uint32_t s3_mod;
	uint32_t src2;
	uint32_t src1;
	uint32_t d2;
	uint32_t d1;
	uint32_t p;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44666 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44670 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44673 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44680 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44760 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44764 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44767 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44785 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44794 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src4;
	uint32_t src3;
	uint32_t src2;
	uint32_t src1;
	uint32_t d2;
	uint32_t d1;
	uint32_t p;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44809 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44813 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44816 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44823 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44903 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44907 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44910 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44928 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44937 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t s4_ar;
	uint32_t s4_mod;
	uint32_t s3_ar;
	uint32_t s3_mod;
	uint32_t src2;
	uint32_t src1;
	uint32_t d2;
	uint32_t d1;
	uint32_t p;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44954 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44958 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44961 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44965 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44968 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 45048 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45052 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45055 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 45063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45073 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45082 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src4;
	uint32_t src3;
	uint32_t src2;
	uint32_t src1;
	uint32_t d2;
	uint32_t d1;
	uint32_t p;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 45097 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45101 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45104 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 45108 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 45111 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 45191 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45195 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45198 "isa_tms320.tcc"
	);
private:
};

/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of load/store operations:
* - LDE          load floating-point exponent
* - LDF          load floating-point value
* - LDFcond      load floating-point value conditionally
* - LDI          load integer
* - LDIcond      load integer conditionally
* - LDM          load floating-point mantissa
* - LDP          load data page pointer
* - POP          pop integer from stack
* - POPF         pop floating-point value from stack
* - PUSH         push integer on stack
* - PUSHF        push floating-point value on stack
* - STF          store floating-point value
* - STI          store integer
*/
/************************************************
* LDE (load floating-point exponent)
* op LDE(0b000[3]:0b001101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45269 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45273 "isa_tms320.tcc"
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45281 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45285 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45288 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45292 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45295 "isa_tms320.tcc"
)
{
#line 62 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDE " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 45307 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45322 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45326 "isa_tms320.tcc"
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45334 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45338 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45341 "isa_tms320.tcc"
)
{
#line 96 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		dst_reg.LoadExp(src_reg);

		// no flags to generate
	}
#line 45358 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45374 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45383 "isa_tms320.tcc"
> *DecodeOpLDE_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45389 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45393 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45410 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45414 "isa_tms320.tcc"
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45422 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45426 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45429 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45433 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45436 "isa_tms320.tcc"
)
{
#line 71 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDE " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 45447 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45462 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45466 "isa_tms320.tcc"
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45474 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45478 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45481 "isa_tms320.tcc"
)
{
#line 110 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		dst_reg.LoadExp(src_value);

		// no flags to generate
	}
#line 45501 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45517 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45526 "isa_tms320.tcc"
> *DecodeOpLDE_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45532 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45536 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45553 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45557 "isa_tms320.tcc"
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45565 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45569 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45572 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45576 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45579 "isa_tms320.tcc"
)
{
#line 79 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDE " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 45591 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45606 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45610 "isa_tms320.tcc"
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45618 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45622 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45625 "isa_tms320.tcc"
)
{
#line 127 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		dst_reg.LoadExp(src_value);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// no flags to generate
	}
#line 45658 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45674 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45683 "isa_tms320.tcc"
> *DecodeOpLDE_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45689 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45693 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45710 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45714 "isa_tms320.tcc"
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 45718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45722 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45726 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45729 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45733 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45736 "isa_tms320.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDE " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 45747 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45762 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45766 "isa_tms320.tcc"
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 45770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45774 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45778 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45781 "isa_tms320.tcc"
)
{
#line 157 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		dst_reg.LoadExp((uint16_t)imm);

		// no flags to generate
	}
#line 45795 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45811 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45820 "isa_tms320.tcc"
> *DecodeOpLDE_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45826 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45830 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDE (load floating-point exponent)
*************************************************/
/************************************************
* LDF (load floating-point value)
* op LDF(0b000[3]:0b001110[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45846 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45853 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45857 "isa_tms320.tcc"
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45865 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45869 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45872 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45876 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45879 "isa_tms320.tcc"
)
{
#line 181 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDF " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 45891 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45906 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45910 "isa_tms320.tcc"
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45918 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45922 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45925 "isa_tms320.tcc"
)
{
#line 215 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		dst_reg = src_reg;

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V  // or mask
		);
	}
#line 45947 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45963 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45972 "isa_tms320.tcc"
> *DecodeOpLDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45978 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45982 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45989 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45996 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45999 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46003 "isa_tms320.tcc"
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46011 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46015 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46018 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46022 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46025 "isa_tms320.tcc"
)
{
#line 190 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 46036 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46051 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46055 "isa_tms320.tcc"
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46063 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46067 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46070 "isa_tms320.tcc"
)
{
#line 234 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		dst_reg.SetFromSinglePrecisionFPFormat(src_value);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V  // or mask
		);
	}
#line 46095 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46111 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46120 "isa_tms320.tcc"
> *DecodeOpLDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46126 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46130 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46147 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46151 "isa_tms320.tcc"
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46159 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46163 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46166 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46170 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46173 "isa_tms320.tcc"
)
{
#line 198 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDF " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 46185 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46200 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46204 "isa_tms320.tcc"
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46212 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46216 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46219 "isa_tms320.tcc"
)
{
#line 256 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		dst_reg.SetFromSinglePrecisionFPFormat(src_value);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V  // or mask
		);
	}
#line 46257 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46263 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46273 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46282 "isa_tms320.tcc"
> *DecodeOpLDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46288 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46292 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46309 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46313 "isa_tms320.tcc"
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46321 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46325 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46328 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46332 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46335 "isa_tms320.tcc"
)
{
#line 207 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDF " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 46346 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46361 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46365 "isa_tms320.tcc"
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46373 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46377 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46380 "isa_tms320.tcc"
)
{
#line 291 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		dst_reg.SetFromShortFPFormat((uint16_t)imm);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V  // or mask
		);
	}
#line 46399 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46415 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46424 "isa_tms320.tcc"
> *DecodeOpLDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46430 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46434 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF (load floating-point value)
*************************************************/
/************************************************
* LDFcond (load floating-point value conditionally)
* op LDFcond(0b0100[4]:cond[4]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 46447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46457 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46461 "isa_tms320.tcc"
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46469 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46473 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46476 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46480 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46483 "isa_tms320.tcc"
)
{
#line 320 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!cond_name || !dst_reg_name || !src_reg_name) return false;

		os << "LDF" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 46496 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46511 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46515 "isa_tms320.tcc"
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46523 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46527 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46530 "isa_tms320.tcc"
)
{
#line 358 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		dst_reg = src_reg;
	}
#line 46548 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46564 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46573 "isa_tms320.tcc"
> *DecodeOpLDFcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46579 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46583 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46600 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46604 "isa_tms320.tcc"
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46612 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46616 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46619 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46623 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46626 "isa_tms320.tcc"
)
{
#line 330 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDF" << cond_name << " " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 46638 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46653 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46657 "isa_tms320.tcc"
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46665 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46669 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46672 "isa_tms320.tcc"
)
{
#line 373 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		dst_reg.SetFromSinglePrecisionFPFormat(src_value);
	}
#line 46693 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46709 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46718 "isa_tms320.tcc"
> *DecodeOpLDFcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46724 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46728 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46735 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46742 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46745 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46749 "isa_tms320.tcc"
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46757 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46761 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46764 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46768 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46771 "isa_tms320.tcc"
)
{
#line 339 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDF" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 46784 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46799 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46803 "isa_tms320.tcc"
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46811 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46815 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46818 "isa_tms320.tcc"
)
{
#line 391 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Note: Auxiliary Register Arithmetic
		// The test condition does not affect
		// the auxiliary register arithmetic.
		// (AR modification always occurs.) (pg 13-126)

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		dst_reg.SetFromSinglePrecisionFPFormat(src_value);
	}
#line 46857 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46873 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46882 "isa_tms320.tcc"
> *DecodeOpLDFcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46888 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46892 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46909 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46913 "isa_tms320.tcc"
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46921 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46925 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46928 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46932 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46935 "isa_tms320.tcc"
)
{
#line 349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;
		os << "LDF" << cond_name << " " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 46947 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46962 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46966 "isa_tms320.tcc"
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46974 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46978 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46981 "isa_tms320.tcc"
)
{
#line 427 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		dst_reg.SetFromShortFPFormat((uint16_t)imm);
	}
#line 46996 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47012 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47021 "isa_tms320.tcc"
> *DecodeOpLDFcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47027 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47031 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFcond (load floating-point value conditionally)
*************************************************/
/*************************************************
* LDI (load integer)
* op LDI(0b000[3]:0b010000[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 47044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47051 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47054 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47058 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47066 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47070 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47073 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47080 "isa_tms320.tcc"
)
{
#line 449 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDI " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 47092 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47107 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47111 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47119 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47123 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47126 "isa_tms320.tcc"
)
{
#line 458 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination register number are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Write back result in destination operand
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47154 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47170 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47179 "isa_tms320.tcc"
> *DecodeOpLDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47185 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47189 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47206 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47210 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47218 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47222 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47225 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47229 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47232 "isa_tms320.tcc"
)
{
#line 485 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;

		return true;
	}
#line 47244 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47259 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47263 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47271 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47275 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47278 "isa_tms320.tcc"
)
{
#line 494 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47309 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47325 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47334 "isa_tms320.tcc"
> *DecodeOpLDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47340 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47344 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47361 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47365 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47373 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47377 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47380 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47384 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47387 "isa_tms320.tcc"
)
{
#line 524 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDI " << disasm_src_indir << ", " << dst_reg_name;

		return true;
	}
#line 47400 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47415 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47419 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47427 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47431 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47434 "isa_tms320.tcc"
)
{
#line 534 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47478 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47494 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47503 "isa_tms320.tcc"
> *DecodeOpLDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47513 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47530 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47534 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47542 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47549 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47556 "isa_tms320.tcc"
)
{
#line 577 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI " << imm << ", " << dst_reg_name;
		return true;
	}
#line 47567 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47572 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47575 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47582 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47586 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47594 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47598 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47601 "isa_tms320.tcc"
)
{
#line 585 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47629 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47645 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47654 "isa_tms320.tcc"
> *DecodeOpLDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47660 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47664 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI (load integer)
*************************************************/
/*************************************************
* LDIcond (load integer conditionally)
* op LDIcond(0b0101[4]:cond[4]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 47677 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47684 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47687 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47691 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47699 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47703 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47706 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47710 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47713 "isa_tms320.tcc"
)
{
#line 620 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *src_reg_name = REG_NAME[src];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !src_reg_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 47726 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47741 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47745 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47753 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47757 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47760 "isa_tms320.tcc"
)
{
#line 630 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination registers, and the condition are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Write back result in destination operand
		cpu.SetReg(dst, result);
	}
#line 47780 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47796 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47805 "isa_tms320.tcc"
> *DecodeOpLDIcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47811 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47815 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47832 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47836 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47844 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47848 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47851 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47855 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47858 "isa_tms320.tcc"
)
{
#line 649 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;

		return true;
	}
#line 47871 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47879 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47886 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47890 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47898 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47902 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47905 "isa_tms320.tcc"
)
{
#line 659 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 47928 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47944 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47953 "isa_tms320.tcc"
> *DecodeOpLDIcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47959 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47963 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47980 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47984 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47992 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47996 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47999 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48003 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48006 "isa_tms320.tcc"
)
{
#line 681 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDI" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;

		return true;
	}
#line 48021 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48036 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48040 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48048 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48052 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48055 "isa_tms320.tcc"
)
{
#line 693 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Note: Auxiliary Register Arithmetic
		// The test condition does not affect
		// the auxiliary register arithmetic.
		// (AR modification always occurs.) (pg 13-126)

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 48096 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48112 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48121 "isa_tms320.tcc"
> *DecodeOpLDIcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48127 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48131 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48148 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48152 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48160 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48164 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48167 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48174 "isa_tms320.tcc"
)
{
#line 733 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << imm << ", " << dst_reg_name;
		return true;
	}
#line 48187 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48202 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48206 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48214 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48218 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48221 "isa_tms320.tcc"
)
{
#line 743 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetReg(dst, result);
	}
#line 48241 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48254 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48257 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48266 "isa_tms320.tcc"
> *DecodeOpLDIcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48272 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48276 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDIcond (load integer conditionally)
*************************************************/
/*************************************************
* LDM (load floating-point mantissa)
* op LDM(0b000[3]:0b010010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48299 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48303 "isa_tms320.tcc"
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48311 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48315 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48318 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48322 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48325 "isa_tms320.tcc"
)
{
#line 773 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDM " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 48337 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48352 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48356 "isa_tms320.tcc"
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48364 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48368 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48371 "isa_tms320.tcc"
)
{
#line 807 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		dst_reg.LoadMan(src_reg);

		// no flags to generate
	}
#line 48388 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48404 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48413 "isa_tms320.tcc"
> *DecodeOpLDM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48419 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48423 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48440 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48444 "isa_tms320.tcc"
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48452 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48456 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48459 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48463 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48466 "isa_tms320.tcc"
)
{
#line 782 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDM " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 48477 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48492 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48496 "isa_tms320.tcc"
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48504 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48508 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48511 "isa_tms320.tcc"
)
{
#line 821 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		dst_reg.LoadMan(src_value);

		// no flags to generate
	}
#line 48531 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48547 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48556 "isa_tms320.tcc"
> *DecodeOpLDM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48562 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48566 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48583 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48587 "isa_tms320.tcc"
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48595 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48599 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48602 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48606 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48609 "isa_tms320.tcc"
)
{
#line 790 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDM " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 48621 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48636 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48640 "isa_tms320.tcc"
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48648 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48652 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48655 "isa_tms320.tcc"
)
{
#line 838 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		dst_reg.LoadMan(src_value);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// no flags to generate
	}
#line 48688 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48704 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48713 "isa_tms320.tcc"
> *DecodeOpLDM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48719 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48723 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48740 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48744 "isa_tms320.tcc"
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48752 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48756 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48759 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48763 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48766 "isa_tms320.tcc"
)
{
#line 799 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDM " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 48777 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48792 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48796 "isa_tms320.tcc"
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48804 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48808 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48811 "isa_tms320.tcc"
)
{
#line 868 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		dst_reg.LoadMan((uint16_t)imm);

		// no flags to generate
	}
#line 48825 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48841 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48846 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48850 "isa_tms320.tcc"
> *DecodeOpLDM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48856 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48860 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDM (load floating-point mantissa)
*************************************************/
/*************************************************
* LDP (load data page pointer)
* op LDP(0b000[3]:0b010000[6]:0b11[2]:0b10000[5]:0b00000000[8]:src[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48883 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48887 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48891 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48895 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48899 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48902 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48906 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48909 "isa_tms320.tcc"
)
{
#line 889 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		os << "LDP @0x" << hex << (src << 16) << dec;
		return true;
	}
#line 48917 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48932 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48936 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48944 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48948 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48951 "isa_tms320.tcc"
)
{
#line 894 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Update DP
		cpu.SetDP(src);
	}
#line 48959 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48975 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48984 "isa_tms320.tcc"
> *DecodeOpLDP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48990 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48994 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDP (load data page pointer)
*************************************************/
/*************************************************
* POP (pop integer from stack)
* op POP(0b000[3]:0b011100[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49017 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49021 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 49025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49029 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49033 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49036 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49040 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49043 "isa_tms320.tcc"
)
{
#line 909 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POP " << dst_reg_name;

		if(cpu.GetPC() == (Operation<CONFIG, DEBUG>::GetAddr() / 4))
		{
			os << " <" << cpu.GetObjectFriendlyName(cpu.GetSP()) << ">";
		}
		return true;
	}
#line 49060 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49075 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49079 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 49083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49087 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49091 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49094 "isa_tms320.tcc"
)
{
#line 923 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Read the word at SP from memory
		uint32_t result = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Write back the result
		cpu.SetReg(dst, result);

		// Update SP
		cpu.SetSP(sp);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 49131 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49147 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49156 "isa_tms320.tcc"
> *DecodeOpPOP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49162 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49166 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POP (pop integer from stack)
*************************************************/
/*************************************************
* POPF (pop floating-point value from stack)
* op POPF(0b000[3]:0b011101[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49189 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49193 "isa_tms320.tcc"
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49201 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49208 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49212 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49215 "isa_tms320.tcc"
)
{
#line 967 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POPF " << dst_reg_name;
		return true;
	}
#line 49227 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49242 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49246 "isa_tms320.tcc"
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49254 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49258 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49261 "isa_tms320.tcc"
)
{
#line 976 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Read the word at SP from memory
		uint32_t result = cpu.IntLoad(sp & ADDRESS_MASK);
		uint8_t hi = result >> 24;
		uint32_t lo = result << 8;

		// Compute the new value of SP
		sp = sp - 1;

		// Write back the result
		Register& reg = cpu.GetExtReg(dst);
		reg.SetLo(lo);
		reg.SetHi(hi);

		// Update SP
		cpu.SetSP(sp);

		// Generate flags (into ST)
		cpu.GenFlags(
		reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 49292 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49308 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49317 "isa_tms320.tcc"
> *DecodeOpPOPF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49323 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49327 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSH (push integer on stack)
* op PUSH(0b000[3]:0b011110[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49350 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49354 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 49358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49362 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49366 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49369 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49373 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49376 "isa_tms320.tcc"
)
{
#line 1014 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSH " << src_reg_name;

		if(cpu.GetPC() == (Operation<CONFIG, DEBUG>::GetAddr() / 4))
		{
			os << " <" << cpu.GetObjectFriendlyName(cpu.GetSP() + 1) << ">";
		}
		return true;
	}
#line 49393 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49408 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49412 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 49416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49420 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49424 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49427 "isa_tms320.tcc"
)
{
#line 1028 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Store the source operand at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, src_value);

		// Update SP
		cpu.SetSP(sp);
	}
#line 49450 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49466 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49475 "isa_tms320.tcc"
> *DecodeOpPUSH(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49481 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49485 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSHF (push floating-point value on stack)
* op PUSHF(0b000[3]:0b011111[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49498 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49508 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49512 "isa_tms320.tcc"
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49520 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49524 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49527 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49531 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49534 "isa_tms320.tcc"
)
{
#line 1058 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSHF " << src_reg_name;
		return true;
	}
#line 49546 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49558 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49561 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49565 "isa_tms320.tcc"
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49573 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49577 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49580 "isa_tms320.tcc"
)
{
#line 1067 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Read the source operand
		const Register& src_value = cpu.GetExtRegConst(src);

		// compute the result
		uint32_t result = ((uint32_t)src_value.GetHi() << 24) + (src_value.GetLo() >> 8);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Store the result at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, result);

		// Update SP
		cpu.SetSP(sp);
	}
#line 49600 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49616 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49625 "isa_tms320.tcc"
> *DecodeOpPUSHF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49631 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49635 "isa_tms320.tcc"
	>(code, addr);
}

/* end of PUSHF (push floating-point value on stack)
*************************************************/
/*************************************************
* STF (store floating-point value)
* op STF(0b000[3]:0b101000[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49658 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49662 "isa_tms320.tcc"
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49670 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49674 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49677 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49681 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49684 "isa_tms320.tcc"
)
{
#line 1095 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STF " << src_reg_name << ", " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec;
		return true;
	}
#line 49695 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49710 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49714 "isa_tms320.tcc"
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49722 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49726 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49729 "isa_tms320.tcc"
)
{
#line 1112 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// get a 32bits version of the source register (containing a float)
		uint32_t result = src_reg.GetSinglePrecisionFPFormat();

		// store the word into memory
		cpu.IntStore(ea, result);

		// no flags to generate
	}
#line 49750 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49766 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49775 "isa_tms320.tcc"
> *DecodeOpSTF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49781 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49785 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 49792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49802 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49806 "isa_tms320.tcc"
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49814 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49818 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49821 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49825 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49828 "isa_tms320.tcc"
)
{
#line 1103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "STF " << src_reg_name << ", " << disasm_dst_indir;
		return true;
	}
#line 49840 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49855 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49859 "isa_tms320.tcc"
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49867 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49871 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49874 "isa_tms320.tcc"
)
{
#line 1130 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// get a 32bits version of the source register (containing a float)
		uint32_t result = src_reg.GetSinglePrecisionFPFormat();

		// Store the word into memory
		cpu.IntStore(ea, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 49906 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49922 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49931 "isa_tms320.tcc"
> *DecodeOpSTF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49937 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49941 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF (store floating-point value)
*************************************************/
/*************************************************
* STI (store integer)
* op STI(0b000[3]:0b101010[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49964 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49968 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49976 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49980 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49983 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49987 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49990 "isa_tms320.tcc"
)
{
#line 1171 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STI " << src_reg_name << ", " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec;

		return true;
	}
#line 50002 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50017 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50021 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50029 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50033 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50036 "isa_tms320.tcc"
)
{
#line 1190 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Store the word into memory
		cpu.IntStore(ea, result);
	}
#line 50056 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50072 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50081 "isa_tms320.tcc"
> *DecodeOpSTI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50087 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50091 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50108 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50112 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50120 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50124 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50127 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50131 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50134 "isa_tms320.tcc"
)
{
#line 1180 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "STI " << src_reg_name << ", " << disasm_dst_indir;

		return true;
	}
#line 50147 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50162 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50166 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50174 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50178 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50181 "isa_tms320.tcc"
)
{
#line 1207 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(ea, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 50214 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50230 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50239 "isa_tms320.tcc"
> *DecodeOpSTI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50245 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50249 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI (store integer)
*************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 2 operands operations:
* - ABSF         absolute value of a floating-point number
* - ABSI         absolute value of an integer
* - ADDC         add integers with carry
* - ADDF         add floating-point values
* - ADDI         add integers
* - AND          bitwise-logical AND
* - ANDN         bitwise-logical AND with complement
* - ASH          arithmetic shift
* - CMPF         compare floating-point values
* - CMPI         compare integers
* - FIX          convert floating-point value to integer
* - FLOAT        convert integer to floating-point value
* - LSH          logical shift
* - MPYF         multiply floating-point values
* - MPYI         multiply integers
* - NEGB         negate integer with borrow
* - NEGF         negate floating-point value
* - NEGI         negate integer
* - NORM         normalize floating-point value
* - NOT          bitwise-logical complement
* - OR           bitwise-logical OR
* - RND          round floating-point value
* - ROL          rotate left
* - ROLC         rotate left through carry
* - ROR          rotate right
* - RORC         rotate right through carry
* - SUBB         subtract integers with borrow
* - SUBC         subtract integers conditionally
* - SUBF         subtract floating-point values
* - SUBI         subtract integer
* - SUBRB        subtract reverse integer with borrow
* - SUBRF        subtract reverse floating-point value
* - SUBRI        subtract reverse integer
* - TSTB         test bit fields
* - XOR          bitwise-exclusive OR
*/
/**********************************************************
* ABSF (absolute value of a floating-point number)
* op ABSF(0b000[3]:0b000000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50343 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50347 "isa_tms320.tcc"
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50355 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50359 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50362 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50366 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50369 "isa_tms320.tcc"
)
{
#line 84 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSF " << src_name << ", " << dst_name;
		return true;
	}
#line 50383 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50398 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50402 "isa_tms320.tcc"
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50410 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50414 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50417 "isa_tms320.tcc"
)
{
#line 127 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check src and dst registers

		// Read source register
		Register& src_reg = cpu.GetExtReg(src);

		// Read destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the result
		uint32_t overflow;

		dst_reg.Abs(src_reg, overflow);

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 50443 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50459 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50468 "isa_tms320.tcc"
> *DecodeOpABSF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50478 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50495 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50499 "isa_tms320.tcc"
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50507 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50514 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50521 "isa_tms320.tcc"
)
{
#line 95 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ABSF @0x" << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 50535 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50550 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50554 "isa_tms320.tcc"
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50562 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50566 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50569 "isa_tms320.tcc"
)
{
#line 150 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check dst register

		// Read destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t overflow;

		dst_reg.Abs(src_value, overflow);

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 50598 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50614 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50623 "isa_tms320.tcc"
> *DecodeOpABSF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50629 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50633 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50650 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50654 "isa_tms320.tcc"
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50662 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50666 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50669 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50673 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50676 "isa_tms320.tcc"
)
{
#line 106 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ABSF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 50690 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50705 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50709 "isa_tms320.tcc"
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50717 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50721 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50724 "isa_tms320.tcc"
)
{
#line 176 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check dst register

		// Read destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t overflow;

		dst_reg.Abs(src_value, overflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 50766 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50782 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50791 "isa_tms320.tcc"
> *DecodeOpABSF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50797 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50801 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50818 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50822 "isa_tms320.tcc"
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 50826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50830 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50834 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50837 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50841 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50844 "isa_tms320.tcc"
)
{
#line 117 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 50857 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50872 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50876 "isa_tms320.tcc"
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 50880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50884 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50888 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50891 "isa_tms320.tcc"
)
{
#line 215 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check dst register

		// Read destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the result
		uint32_t overflow;

		dst_reg.Abs(imm, overflow);

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 50914 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50930 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50939 "isa_tms320.tcc"
> *DecodeOpABSF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50945 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50949 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSF (absolute value of a floating-point number)
**********************************************************/
/**********************************************************
* ABSI (absolute value of an integer)
* op ABSI(0b000[3]:0b000001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50972 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50976 "isa_tms320.tcc"
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50984 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50988 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50991 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50998 "isa_tms320.tcc"
)
{
#line 248 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSI " << src_name << ", " << dst_name;
		return true;
	}
#line 51012 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51027 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51031 "isa_tms320.tcc"
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51039 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51043 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51046 "isa_tms320.tcc"
)
{
#line 291 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51092 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51108 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51113 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51117 "isa_tms320.tcc"
> *DecodeOpABSI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51123 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51127 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51134 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51144 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51148 "isa_tms320.tcc"
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51156 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51160 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51163 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51167 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51170 "isa_tms320.tcc"
)
{
#line 259 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ABSI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 51184 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51199 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51203 "isa_tms320.tcc"
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51211 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51215 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51218 "isa_tms320.tcc"
)
{
#line 334 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51267 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51283 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51292 "isa_tms320.tcc"
> *DecodeOpABSI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51298 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51302 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51319 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51323 "isa_tms320.tcc"
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51331 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51335 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51338 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51342 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51345 "isa_tms320.tcc"
)
{
#line 270 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ABSI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 51359 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51374 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51378 "isa_tms320.tcc"
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51386 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51390 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51393 "isa_tms320.tcc"
)
{
#line 380 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51455 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51471 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51480 "isa_tms320.tcc"
> *DecodeOpABSI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51486 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51490 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51507 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51511 "isa_tms320.tcc"
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51519 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51523 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51526 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51530 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51533 "isa_tms320.tcc"
)
{
#line 281 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSI " << imm << ", " << dst_name;
		return true;
	}
#line 51546 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51558 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51561 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51565 "isa_tms320.tcc"
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51573 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51577 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51580 "isa_tms320.tcc"
)
{
#line 439 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if((uint32_t) imm == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = (imm >= 0) ? imm : -imm;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51626 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51642 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51651 "isa_tms320.tcc"
> *DecodeOpABSI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51657 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51661 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSI (absolute value of an integer)
**********************************************************/
/**********************************************************
* ADDC (add integers with carry)
* op ADDC(0b000[3]:0b000010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51684 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51688 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51696 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51700 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51703 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51707 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51710 "isa_tms320.tcc"
)
{
#line 495 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDC " << src_name << ", " << dst_name;
		return true;
	}
#line 51724 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51739 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51743 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51751 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51755 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51758 "isa_tms320.tcc"
)
{
#line 539 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51805 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51821 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51830 "isa_tms320.tcc"
> *DecodeOpADDC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51836 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51840 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51857 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51861 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51869 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51873 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51876 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51880 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51883 "isa_tms320.tcc"
)
{
#line 506 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ADDC " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 51897 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51902 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51912 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51916 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51924 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51928 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51931 "isa_tms320.tcc"
)
{
#line 583 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51981 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51997 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52006 "isa_tms320.tcc"
> *DecodeOpADDC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52012 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52016 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52033 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52037 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52045 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52049 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52052 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52056 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52059 "isa_tms320.tcc"
)
{
#line 517 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDC " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 52074 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52089 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52093 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52101 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52105 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52108 "isa_tms320.tcc"
)
{
#line 630 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 52171 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52187 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52196 "isa_tms320.tcc"
> *DecodeOpADDC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52202 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52206 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52223 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52227 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52235 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52239 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52242 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52246 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52249 "isa_tms320.tcc"
)
{
#line 529 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDC " << imm << ", " << dst_name;
		return true;
	}
#line 52262 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52277 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52281 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52289 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52293 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52296 "isa_tms320.tcc"
)
{
#line 690 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, imm, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 52340 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52356 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52365 "isa_tms320.tcc"
> *DecodeOpADDC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52371 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52375 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC (add integers with carry)
**********************************************************/
/**********************************************************
* ADDF (add floating-point values)
* op ADDF(0b000[3]:0b000011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52398 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52402 "isa_tms320.tcc"
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52410 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52414 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52417 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52421 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52424 "isa_tms320.tcc"
)
{
#line 744 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDF " << src_name << ", " << dst_name;
		return true;
	}
#line 52438 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52446 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52453 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52457 "isa_tms320.tcc"
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52465 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52469 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52472 "isa_tms320.tcc"
)
{
#line 787 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Add(src_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 52500 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52516 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52525 "isa_tms320.tcc"
> *DecodeOpADDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52531 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52535 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52552 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52556 "isa_tms320.tcc"
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52564 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52568 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52571 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52575 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52578 "isa_tms320.tcc"
)
{
#line 755 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ADDF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 52592 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52607 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52611 "isa_tms320.tcc"
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52619 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52623 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52626 "isa_tms320.tcc"
)
{
#line 812 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Add(src_value, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 52657 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52663 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52670 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52673 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52682 "isa_tms320.tcc"
> *DecodeOpADDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52688 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52692 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52709 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52713 "isa_tms320.tcc"
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52721 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52725 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52728 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52732 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52735 "isa_tms320.tcc"
)
{
#line 766 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 52749 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52764 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52768 "isa_tms320.tcc"
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52776 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52780 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52783 "isa_tms320.tcc"
)
{
#line 840 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Add(src_value, overflow, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 52827 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52833 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52843 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52852 "isa_tms320.tcc"
> *DecodeOpADDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52858 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52862 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52879 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52883 "isa_tms320.tcc"
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52891 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52895 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52898 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52902 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52905 "isa_tms320.tcc"
)
{
#line 777 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 52918 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52930 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52933 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52937 "isa_tms320.tcc"
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52945 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52949 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52952 "isa_tms320.tcc"
)
{
#line 881 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Add((uint16_t)imm, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 52977 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52993 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53002 "isa_tms320.tcc"
> *DecodeOpADDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53008 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53012 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI (add integers)
* op ADDI(0b000[3]:0b000100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53035 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53039 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53047 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53051 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53054 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53058 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53061 "isa_tms320.tcc"
)
{
#line 916 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDI " << src_name << ", " << dst_name;
		return true;
	}
#line 53075 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53090 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53094 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53102 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53106 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53109 "isa_tms320.tcc"
)
{
#line 960 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53153 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53169 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53178 "isa_tms320.tcc"
> *DecodeOpADDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53184 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53188 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53205 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53209 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53217 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53221 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53224 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53228 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53231 "isa_tms320.tcc"
)
{
#line 927 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ADDI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 53245 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53257 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53260 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53264 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53272 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53276 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53279 "isa_tms320.tcc"
)
{
#line 1001 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53326 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53339 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53342 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53351 "isa_tms320.tcc"
> *DecodeOpADDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53357 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53361 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53378 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53382 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53390 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53397 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53404 "isa_tms320.tcc"
)
{
#line 938 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 53419 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53434 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53438 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53446 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53450 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53453 "isa_tms320.tcc"
)
{
#line 1045 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53513 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53529 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53538 "isa_tms320.tcc"
> *DecodeOpADDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53544 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53548 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53565 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53569 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53577 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53581 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53584 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53588 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53591 "isa_tms320.tcc"
)
{
#line 950 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDI " << imm << ", " << dst_name;
		return true;
	}
#line 53604 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53619 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53623 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53631 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53635 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53638 "isa_tms320.tcc"
)
{
#line 1102 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, 0);
		else
		Add32(result, carry_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53679 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53695 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53704 "isa_tms320.tcc"
> *DecodeOpADDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53710 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53714 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI (add integers)
**********************************************************/
/**********************************************************
* AND (bitwise-logical AND)
* op AND(0b000[3]:0b000101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53737 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53741 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53749 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53753 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53756 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53760 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53763 "isa_tms320.tcc"
)
{
#line 1153 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "AND " << src_name << ", " << dst_name;
		return true;
	}
#line 53777 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53792 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53796 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53804 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53808 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53811 "isa_tms320.tcc"
)
{
#line 1197 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53845 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53861 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53870 "isa_tms320.tcc"
> *DecodeOpAND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53876 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53880 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53897 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53901 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53909 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53913 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53916 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53920 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53923 "isa_tms320.tcc"
)
{
#line 1164 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "AND " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 53937 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53952 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53956 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53964 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53968 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53971 "isa_tms320.tcc"
)
{
#line 1228 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54008 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54021 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54024 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54033 "isa_tms320.tcc"
> *DecodeOpAND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54039 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54043 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54060 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54064 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54072 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54076 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54079 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54083 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54086 "isa_tms320.tcc"
)
{
#line 1175 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "AND " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 54101 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54116 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54120 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54128 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54132 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54135 "isa_tms320.tcc"
)
{
#line 1262 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54185 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54201 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54210 "isa_tms320.tcc"
> *DecodeOpAND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54216 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54220 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54237 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54241 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54249 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54253 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54256 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54260 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54263 "isa_tms320.tcc"
)
{
#line 1187 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "AND " << imm << ", " << dst_name;
		return true;
	}
#line 54276 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54291 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54295 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54303 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54307 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54310 "isa_tms320.tcc"
)
{
#line 1309 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54341 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54357 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54366 "isa_tms320.tcc"
> *DecodeOpAND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54372 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54376 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN (bitwise-logical AND with complement)
* op ANDN(0b000[3]:0b000110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54399 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54403 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54411 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54418 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54425 "isa_tms320.tcc"
)
{
#line 1350 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ANDN " << src_name << ", " << dst_name;
		return true;
	}
#line 54439 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54454 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54458 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54466 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54473 "isa_tms320.tcc"
)
{
#line 1394 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54507 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54523 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54532 "isa_tms320.tcc"
> *DecodeOpANDN_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54538 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54542 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54559 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54563 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54571 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54575 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54578 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54582 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54585 "isa_tms320.tcc"
)
{
#line 1361 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ANDN " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 54599 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54614 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54618 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54626 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54630 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54633 "isa_tms320.tcc"
)
{
#line 1425 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54670 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54686 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54695 "isa_tms320.tcc"
> *DecodeOpANDN_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54701 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54705 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54722 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54726 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54734 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54738 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54741 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54745 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54748 "isa_tms320.tcc"
)
{
#line 1372 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ANDN " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 54763 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54778 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54782 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54790 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54794 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54797 "isa_tms320.tcc"
)
{
#line 1459 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54847 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54863 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54872 "isa_tms320.tcc"
> *DecodeOpANDN_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54878 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54882 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54899 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54903 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54911 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54915 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54918 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54925 "isa_tms320.tcc"
)
{
#line 1384 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ANDN " << imm << ", " << dst_name;
		return true;
	}
#line 54938 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54950 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54953 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54957 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54965 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54969 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54972 "isa_tms320.tcc"
)
{
#line 1506 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~imm & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 55003 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55019 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55028 "isa_tms320.tcc"
> *DecodeOpANDN_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55034 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55038 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH (arithmetic shift)
* op ASH(0b000[3]:0b000111[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55051 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55058 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55061 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55065 "isa_tms320.tcc"
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55073 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55080 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55084 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55087 "isa_tms320.tcc"
)
{
#line 1547 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ASH " << src_name << ", " << dst_name;
		return true;
	}
#line 55101 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55116 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55120 "isa_tms320.tcc"
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55128 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55132 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55135 "isa_tms320.tcc"
)
{
#line 1590 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55205 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55221 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55230 "isa_tms320.tcc"
> *DecodeOpASH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55236 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55240 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55254 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55257 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55261 "isa_tms320.tcc"
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55265 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55269 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55273 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55276 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55280 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55283 "isa_tms320.tcc"
)
{
#line 1558 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ASH " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 55297 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55312 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55316 "isa_tms320.tcc"
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55324 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55328 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55331 "isa_tms320.tcc"
)
{
#line 1657 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55404 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55420 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55425 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55429 "isa_tms320.tcc"
> *DecodeOpASH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55435 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55439 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55456 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55460 "isa_tms320.tcc"
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55468 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55472 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55475 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55479 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55482 "isa_tms320.tcc"
)
{
#line 1569 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ASH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 55496 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55511 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55515 "isa_tms320.tcc"
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55523 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55527 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55530 "isa_tms320.tcc"
)
{
#line 1727 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55610 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55626 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55635 "isa_tms320.tcc"
> *DecodeOpASH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55641 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55645 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55652 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55659 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55662 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55666 "isa_tms320.tcc"
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55674 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55678 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55681 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55685 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55688 "isa_tms320.tcc"
)
{
#line 1580 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ASH " << imm << ", " << dst_name;
		return true;
	}
#line 55701 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55716 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55720 "isa_tms320.tcc"
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55728 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55732 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55735 "isa_tms320.tcc"
)
{
#line 1804 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the immediate value to get the shift count
		int32_t count = imm; // imm has alread been sign extended by the decoder

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55802 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55818 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55827 "isa_tms320.tcc"
> *DecodeOpASH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55833 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55837 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF (compare floating-point values)
* op CMPF(0b000[3]:0b001000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55860 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55864 "isa_tms320.tcc"
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55872 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55876 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55879 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55883 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55886 "isa_tms320.tcc"
)
{
#line 1881 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPF " << src_name << ", " << dst_name;
		return true;
	}
#line 55900 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55915 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55919 "isa_tms320.tcc"
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55927 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55931 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55934 "isa_tms320.tcc"
)
{
#line 1924 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// a fake register is needed to keep the compare result
		Register result_reg;

		// compute
		uint32_t underflow;
		uint32_t overflow;
		result_reg.Sub(dst_reg, src_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(result_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 55964 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55980 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55989 "isa_tms320.tcc"
> *DecodeOpCMPF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55995 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55999 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56016 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56020 "isa_tms320.tcc"
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56028 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56032 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56035 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56039 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56042 "isa_tms320.tcc"
)
{
#line 1892 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "CMPF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 56056 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56071 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56075 "isa_tms320.tcc"
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56083 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56087 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56090 "isa_tms320.tcc"
)
{
#line 1951 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// a fake register is needed to keep the compare result
		Register result_reg;

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		result_reg.Sub(dst_reg, src_value, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(result_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 56123 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56139 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56148 "isa_tms320.tcc"
> *DecodeOpCMPF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56154 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56158 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56175 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56179 "isa_tms320.tcc"
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56187 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56191 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56194 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56198 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56201 "isa_tms320.tcc"
)
{
#line 1903 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "CMPF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 56215 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56230 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56234 "isa_tms320.tcc"
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56242 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56246 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56249 "isa_tms320.tcc"
)
{
#line 1981 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// a fake register is needed to keep the compare result
		Register result_reg;

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		result_reg.Sub(dst_reg, src_value, overflow, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(result_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 56295 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56311 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56320 "isa_tms320.tcc"
> *DecodeOpCMPF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56326 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56330 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56347 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56351 "isa_tms320.tcc"
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 56355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56359 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56363 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56366 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56370 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56373 "isa_tms320.tcc"
)
{
#line 1914 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 56386 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56401 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56405 "isa_tms320.tcc"
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 56409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56413 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56417 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56420 "isa_tms320.tcc"
)
{
#line 2024 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// a fake register is needed to keep the compare result
		Register result_reg;

		// compute
		uint32_t underflow;
		uint32_t overflow;
		result_reg.Sub(dst_reg, (uint16_t)imm, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(result_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 56447 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56460 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56463 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56468 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56472 "isa_tms320.tcc"
> *DecodeOpCMPF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56478 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56482 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI (compare integers)
* op CMPI(0b000[3]:0b001001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56505 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56509 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56517 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56521 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56524 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56528 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56531 "isa_tms320.tcc"
)
{
#line 2061 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPI " << src_name << ", " << dst_name;
		return true;
	}
#line 56545 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56560 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56564 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56572 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56576 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56579 "isa_tms320.tcc"
)
{
#line 2105 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56612 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56628 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56637 "isa_tms320.tcc"
> *DecodeOpCMPI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56643 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56647 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56664 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56668 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56676 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56680 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56683 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56687 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56690 "isa_tms320.tcc"
)
{
#line 2072 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "CMPI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 56704 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56716 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56719 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56723 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56731 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56735 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56738 "isa_tms320.tcc"
)
{
#line 2135 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56774 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56790 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56799 "isa_tms320.tcc"
> *DecodeOpCMPI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56805 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56809 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56826 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56830 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56838 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56842 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56845 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56849 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56852 "isa_tms320.tcc"
)
{
#line 2083 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "CMPI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 56867 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56882 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56886 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56894 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56898 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56901 "isa_tms320.tcc"
)
{
#line 2168 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56950 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56966 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56975 "isa_tms320.tcc"
> *DecodeOpCMPI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56981 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56985 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57002 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57006 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57014 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57018 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57021 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57025 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57028 "isa_tms320.tcc"
)
{
#line 2095 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPI " << imm << ", " << dst_name;
		return true;
	}
#line 57041 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57056 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57060 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57068 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57072 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57075 "isa_tms320.tcc"
)
{
#line 2214 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 57105 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57121 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57130 "isa_tms320.tcc"
> *DecodeOpCMPI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57136 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57140 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI (compare integers)
**********************************************************/
/**********************************************************
* FIX (convert floating-point value to integer)
* op FIX(0b000[3]:0b001010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57163 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57167 "isa_tms320.tcc"
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57175 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57179 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57182 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57186 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57189 "isa_tms320.tcc"
)
{
#line 2254 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FIX " << src_name << ", " << dst_name;
		return true;
	}
#line 57203 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57218 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57222 "isa_tms320.tcc"
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57230 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57234 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57237 "isa_tms320.tcc"
)
{
#line 2297 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		Register &src_reg = cpu.GetExtReg(src);

		// Perform computation
		uint32_t overflow;
		uint32_t result = src_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 57267 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57283 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57292 "isa_tms320.tcc"
> *DecodeOpFIX_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57298 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57302 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57319 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57323 "isa_tms320.tcc"
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57331 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57335 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57338 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57342 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57345 "isa_tms320.tcc"
)
{
#line 2265 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "FIX " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 57359 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57374 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57378 "isa_tms320.tcc"
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57386 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57390 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57393 "isa_tms320.tcc"
)
{
#line 2324 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Convert value into a float
		Register tmp_reg;
		tmp_reg.SetFromSinglePrecisionFPFormat(src_value);

		// Perform computation
		uint32_t overflow;
		uint32_t result = tmp_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 57430 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57446 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57455 "isa_tms320.tcc"
> *DecodeOpFIX_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57461 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57465 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57482 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57486 "isa_tms320.tcc"
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57494 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57498 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57501 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57505 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57508 "isa_tms320.tcc"
)
{
#line 2276 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "FIX " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 57522 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57534 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57537 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57541 "isa_tms320.tcc"
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57549 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57553 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57556 "isa_tms320.tcc"
)
{
#line 2358 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Convert value into a float
		Register tmp_reg;
		tmp_reg.SetFromSinglePrecisionFPFormat(src_value);

		// Perform computation
		uint32_t overflow;
		uint32_t result = tmp_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Update AR if necessary
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 57607 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57623 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57632 "isa_tms320.tcc"
> *DecodeOpFIX_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57638 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57642 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57659 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57663 "isa_tms320.tcc"
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57671 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57675 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57678 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57682 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57685 "isa_tms320.tcc"
)
{
#line 2287 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FIX " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 57698 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57713 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57717 "isa_tms320.tcc"
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57725 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57729 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57732 "isa_tms320.tcc"
)
{
#line 2406 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Convert immediate into a float
		Register tmp_reg;
		tmp_reg.SetFromShortFPFormat(imm);

		// Perform computation
		uint32_t overflow;
		uint32_t result = tmp_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 57763 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57779 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57788 "isa_tms320.tcc"
> *DecodeOpFIX_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57794 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57798 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FIX (convert floating-point value to integer)
**********************************************************/
/**********************************************************
* FLOAT (convert integer to floating-point value)
* op FLOAT(0b000[3]:0b001011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57821 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57825 "isa_tms320.tcc"
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57833 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57837 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57840 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57844 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57847 "isa_tms320.tcc"
)
{
#line 2447 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FLOAT " << src_name << ", " << dst_name;
		return true;
	}
#line 57861 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57866 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57876 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57880 "isa_tms320.tcc"
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57888 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57892 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57895 "isa_tms320.tcc"
)
{
#line 2490 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.IsExtReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float(src_value);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 57921 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57937 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57946 "isa_tms320.tcc"
> *DecodeOpFLOAT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57952 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57956 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57973 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57977 "isa_tms320.tcc"
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57985 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57989 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57992 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57996 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57999 "isa_tms320.tcc"
)
{
#line 2458 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "FLOAT " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 58013 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58028 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58032 "isa_tms320.tcc"
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58040 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58044 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58047 "isa_tms320.tcc"
)
{
#line 2513 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float(src_value);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 58076 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58092 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58101 "isa_tms320.tcc"
> *DecodeOpFLOAT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58107 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58111 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58128 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58132 "isa_tms320.tcc"
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58140 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58144 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58147 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58151 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58154 "isa_tms320.tcc"
)
{
#line 2469 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "FLOAT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 58168 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58183 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58187 "isa_tms320.tcc"
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58195 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58199 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58202 "isa_tms320.tcc"
)
{
#line 2539 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float((uint32_t)src_value);

		// Update AR if necessary
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 58245 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58261 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58270 "isa_tms320.tcc"
> *DecodeOpFLOAT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58276 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58280 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58297 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58301 "isa_tms320.tcc"
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58309 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58313 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58316 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58320 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58323 "isa_tms320.tcc"
)
{
#line 2480 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FLOAT " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 58336 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58341 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58351 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58355 "isa_tms320.tcc"
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58363 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58367 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58370 "isa_tms320.tcc"
)
{
#line 2579 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.IsExtReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float((uint32_t)imm);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 58393 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58409 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58418 "isa_tms320.tcc"
> *DecodeOpFLOAT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58424 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58428 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT (convert integer to floating-point value)
**********************************************************/
/**********************************************************
* LSH (logical shift)
* op LSH(0b000[3]:0b010011[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 58441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58451 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58455 "isa_tms320.tcc"
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 58459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58463 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58467 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58470 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58474 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58477 "isa_tms320.tcc"
)
{
#line 2612 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "LSH " << src_name << ", " << dst_name;
		return true;
	}
#line 58491 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58506 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58510 "isa_tms320.tcc"
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 58514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58518 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58522 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58525 "isa_tms320.tcc"
)
{
#line 2655 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58595 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58611 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58620 "isa_tms320.tcc"
> *DecodeOpLSH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58626 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58630 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58647 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58651 "isa_tms320.tcc"
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58659 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58663 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58666 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58670 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58673 "isa_tms320.tcc"
)
{
#line 2623 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "LSH " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 58687 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58702 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58706 "isa_tms320.tcc"
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58714 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58718 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58721 "isa_tms320.tcc"
)
{
#line 2722 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58794 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58810 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58819 "isa_tms320.tcc"
> *DecodeOpLSH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58825 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58829 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58846 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58850 "isa_tms320.tcc"
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58858 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58862 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58865 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58869 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58872 "isa_tms320.tcc"
)
{
#line 2634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "LSH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 58886 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58901 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58905 "isa_tms320.tcc"
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58913 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58917 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58920 "isa_tms320.tcc"
)
{
#line 2792 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// TODO: check if AR needs to be updated

		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 59002 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59011 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59015 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59018 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59027 "isa_tms320.tcc"
> *DecodeOpLSH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59033 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59037 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59051 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59054 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59058 "isa_tms320.tcc"
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59066 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59070 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59073 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59080 "isa_tms320.tcc"
)
{
#line 2645 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "LSH " << imm << ", " << dst_name;
		return true;
	}
#line 59093 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59108 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59112 "isa_tms320.tcc"
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59120 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59124 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59127 "isa_tms320.tcc"
)
{
#line 2871 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the immediate value to get the shift count
		int32_t count = imm; // imm has alread been sign extended by the decoder

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 59194 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59210 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59219 "isa_tms320.tcc"
> *DecodeOpLSH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59225 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59229 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH (logical shift)
**********************************************************/
/**********************************************************
* MPYF (multiply floating-point values)
* op MPYF(0b000[3]:0b010100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 59242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59252 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59256 "isa_tms320.tcc"
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59264 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59268 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59271 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59275 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59278 "isa_tms320.tcc"
)
{
#line 2948 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYF " << src_name << ", " << dst_name;
		return true;
	}
#line 59292 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59307 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59311 "isa_tms320.tcc"
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59319 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59323 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59326 "isa_tms320.tcc"
)
{
#line 2991 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// No need to check input registers, they must exist

		// Get the source register
		Register src_reg = cpu.GetExtReg(src);

		// Get the destination register
		Register src_dst_reg = cpu.GetExtReg(dst);
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute result and flags
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Mpy(src_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);

		// NOTE: the ST_N flag may need to be fixed if the result is equal to 0.0,
		//   then the ST_N flag is set to 1 if one of two inputs is negative (but
		//   not both) and none of them had 0x80 as exponent
		if (dst_reg.GetHi() == 0x80)
		{
			if (((src_reg.GetHi() != (uint8_t)0x80)
			&& (src_dst_reg.GetHi() != (uint8_t)0x80))
			&& (((src_reg.GetLo() & (uint32_t)0x80000000)
			^ (src_dst_reg.GetLo() & (uint32_t)0x80000000)) != 0))
			{
				uint32_t st = cpu.GetST();
				st |= ((uint32_t)1 << ST_N);
				cpu.SetST(st);
			}
		}
	}
#line 59371 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59387 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59396 "isa_tms320.tcc"
> *DecodeOpMPYF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59402 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59406 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59423 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59427 "isa_tms320.tcc"
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59435 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59439 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59442 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59446 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59449 "isa_tms320.tcc"
)
{
#line 2959 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "MPYF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 59463 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59478 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59482 "isa_tms320.tcc"
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59490 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59494 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59497 "isa_tms320.tcc"
)
{
#line 3033 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// No need to check input registers, they must exist

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory and sign extend value from 24 bits to 64 bits
		uint32_t src_value = cpu.IntLoad(ea);

		// Get the destination register
		Register src_dst_reg = cpu.GetExtReg(dst);
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute result and flags
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Mpy(src_value, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);

		// NOTE: the ST_N flag may need to be fixed if the result is equal to 0.0,
		//   then the ST_N flag is set to 1 if one of two inputs is negative (but
		//   not both) and none of them had 0x80 as exponent
		if (dst_reg.GetHi() == 0x80)
		{
			Register src_reg;
			src_reg.SetFromSinglePrecisionFPFormat(src_value);
			if (((src_reg.GetHi() != (uint8_t)0x80)
			&& (src_dst_reg.GetHi() != (uint8_t)0x80))
			&& (((src_reg.GetLo() & (uint32_t)0x80000000)
			^ (src_dst_reg.GetLo() & (uint32_t)0x80000000)) != 0))
			{
				uint32_t st = cpu.GetST();
				st |= ((uint32_t)1 << ST_N);
				cpu.SetST(st);
			}
		}
	}
#line 59547 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59563 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59572 "isa_tms320.tcc"
> *DecodeOpMPYF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59578 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59582 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59599 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59603 "isa_tms320.tcc"
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59611 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59615 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59618 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59622 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59625 "isa_tms320.tcc"
)
{
#line 2970 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "MPYF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 59639 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59654 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59658 "isa_tms320.tcc"
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59666 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59670 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59673 "isa_tms320.tcc"
)
{
#line 3080 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// No need to check input registers, they must exist

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Get the destination register
		Register src_dst_reg = cpu.GetExtReg(dst);
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute result and flags
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Mpy(src_value, overflow, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);

		// NOTE: the ST_N flag may need to be fixed if the result is equal to 0.0,
		//   then the ST_N flag is set to 1 if one of two inputs is negative (but
		//   not both) and none of them had 0x80 as exponent
		if (dst_reg.GetHi() == 0x80)
		{
			Register src_reg;
			src_reg.SetFromSinglePrecisionFPFormat(src_value);
			if (((src_reg.GetHi() != (uint8_t)0x80)
			&& (src_dst_reg.GetHi() != (uint8_t)0x80))
			&& (((src_reg.GetLo() & (uint32_t)0x80000000)
			^ (src_dst_reg.GetLo() & (uint32_t)0x80000000)) != 0))
			{
				uint32_t st = cpu.GetST();
				st |= ((uint32_t)1 << ST_N);
				cpu.SetST(st);
			}
		}
	}
#line 59736 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59742 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59752 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59761 "isa_tms320.tcc"
> *DecodeOpMPYF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59767 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59771 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59788 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59792 "isa_tms320.tcc"
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59800 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59804 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59807 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59811 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59814 "isa_tms320.tcc"
)
{
#line 2981 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 59827 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59842 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59846 "isa_tms320.tcc"
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59854 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59858 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59861 "isa_tms320.tcc"
)
{
#line 3140 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// No need to check input registers, they must exist

		// Get the destination register
		Register src_dst_reg = cpu.GetExtReg(dst);
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute result and flags
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Mpy((uint16_t)imm, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);

		// NOTE: the ST_N flag may need to be fixed if the result is equal to 0.0,
		//   then the ST_N flag is set to 1 if one of two inputs is negative (but
		//   not both) and none of them had 0x80 as exponent
		if (dst_reg.GetHi() == 0x80)
		{
			if ((((uint16_t)imm & (uint16_t)0xf000 != (uint16_t)0x8000)
			&& (src_dst_reg.GetHi() != (uint8_t)0x80))
			&& ((((uint16_t)imm & (uint16_t)0x0800)
			^ (src_dst_reg.GetLo() & (uint32_t)0x80000000)) != 0))
			{
				uint32_t st = cpu.GetST();
				st |= ((uint32_t)1 << ST_N);
				cpu.SetST(st);
			}
		}
	}
#line 59903 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59919 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59928 "isa_tms320.tcc"
> *DecodeOpMPYF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59934 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59938 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI (multiply integers)
* op MPYI(0b000[3]:0b010101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 59951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59961 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59965 "isa_tms320.tcc"
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59973 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59977 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59980 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59984 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59987 "isa_tms320.tcc"
)
{
#line 3192 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYI " << src_name << ", " << dst_name;
		return true;
	}
#line 60001 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60016 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60020 "isa_tms320.tcc"
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60028 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60032 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60035 "isa_tms320.tcc"
)
{
#line 3235 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand and sign extend value from 24 bits to 64 bits
		int64_t src_value = SignExtend((uint64_t)(cpu.GetReg(src) & 0xffffff), 24);

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 60082 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60098 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60107 "isa_tms320.tcc"
> *DecodeOpMPYI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60113 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60117 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60134 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60138 "isa_tms320.tcc"
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60146 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60150 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60153 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60157 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60160 "isa_tms320.tcc"
)
{
#line 3203 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "MPYI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 60174 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60189 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60193 "isa_tms320.tcc"
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60201 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60205 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60208 "isa_tms320.tcc"
)
{
#line 3279 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 60258 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60274 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60283 "isa_tms320.tcc"
> *DecodeOpMPYI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60289 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60293 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60310 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60314 "isa_tms320.tcc"
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60322 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60326 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60329 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60333 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60336 "isa_tms320.tcc"
)
{
#line 3214 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "MPYI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 60350 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60365 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60369 "isa_tms320.tcc"
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60377 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60381 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60384 "isa_tms320.tcc"
)
{
#line 3326 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory and sign extend value from 24 bits to 64 bits
		uint32_t src_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 60447 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60460 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60463 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60468 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60472 "isa_tms320.tcc"
> *DecodeOpMPYI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60478 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60482 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60499 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60503 "isa_tms320.tcc"
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60511 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60515 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60518 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60522 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60525 "isa_tms320.tcc"
)
{
#line 3225 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYI " << imm << ", " << dst_name;
		return true;
	}
#line 60538 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60553 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60557 "isa_tms320.tcc"
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60565 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60569 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60572 "isa_tms320.tcc"
)
{
#line 3386 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		// Note: imm has been sign extended from 16 bits to 32 bits the decoder
		// Below, imm is sign extended from 32 bits to 64 bits
		int64_t result64 = imm * dst_value;         // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 60618 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60634 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60643 "isa_tms320.tcc"
> *DecodeOpMPYI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60649 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60653 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI (multiply integers)
**********************************************************/
/**********************************************************
* NEGB (negate integer with borrow)
* op NEGB(0b000[3]:0b010110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 60666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60676 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60680 "isa_tms320.tcc"
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60688 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60692 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60695 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60699 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60702 "isa_tms320.tcc"
)
{
#line 3442 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGB " << src_name << ", " << dst_name;
		return true;
	}
#line 60716 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60731 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60735 "isa_tms320.tcc"
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60743 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60747 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60750 "isa_tms320.tcc"
)
{
#line 3485 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60794 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60810 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60819 "isa_tms320.tcc"
> *DecodeOpNEGB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60825 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60829 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60846 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60850 "isa_tms320.tcc"
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60858 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60862 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60865 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60869 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60872 "isa_tms320.tcc"
)
{
#line 3453 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NEGB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 60886 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60901 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60905 "isa_tms320.tcc"
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60913 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60917 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60920 "isa_tms320.tcc"
)
{
#line 3526 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60967 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60973 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60983 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60992 "isa_tms320.tcc"
> *DecodeOpNEGB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60998 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61002 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61019 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61023 "isa_tms320.tcc"
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61031 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61035 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61038 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61042 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61045 "isa_tms320.tcc"
)
{
#line 3464 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 61059 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61074 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61078 "isa_tms320.tcc"
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61086 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61090 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61093 "isa_tms320.tcc"
)
{
#line 3570 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61153 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61169 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61178 "isa_tms320.tcc"
> *DecodeOpNEGB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61184 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61188 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61205 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61209 "isa_tms320.tcc"
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61217 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61221 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61224 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61228 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61231 "isa_tms320.tcc"
)
{
#line 3475 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGB " << imm << ", " << dst_name;
		return true;
	}
#line 61244 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61259 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61263 "isa_tms320.tcc"
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61271 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61275 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61278 "isa_tms320.tcc"
)
{
#line 3627 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, imm, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, imm, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61319 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61335 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61344 "isa_tms320.tcc"
> *DecodeOpNEGB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61350 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61354 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGB (negate integer with borrow)
**********************************************************/
/**********************************************************
* NEGF (negate floating-point value)
* op NEGF(0b000[3]:0b010111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 61367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61377 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61381 "isa_tms320.tcc"
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61389 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61393 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61396 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61400 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61403 "isa_tms320.tcc"
)
{
#line 3678 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGF " << src_name << ", " << dst_name;
		return true;
	}
#line 61417 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61425 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61432 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61436 "isa_tms320.tcc"
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61444 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61448 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61451 "isa_tms320.tcc"
)
{
#line 3721 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Neg(src_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 61478 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61494 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61503 "isa_tms320.tcc"
> *DecodeOpNEGF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61513 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61530 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61534 "isa_tms320.tcc"
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61542 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61549 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61556 "isa_tms320.tcc"
)
{
#line 3689 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NEGF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 61570 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61585 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61589 "isa_tms320.tcc"
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61597 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61601 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61604 "isa_tms320.tcc"
)
{
#line 3745 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Neg(src_value, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 61634 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61650 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61659 "isa_tms320.tcc"
> *DecodeOpNEGF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61665 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61669 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61686 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61690 "isa_tms320.tcc"
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61698 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61702 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61705 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61709 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61712 "isa_tms320.tcc"
)
{
#line 3700 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 61726 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61741 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61745 "isa_tms320.tcc"
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61753 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61757 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61760 "isa_tms320.tcc"
)
{
#line 3772 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Neg(src_value, overflow, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 61803 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61819 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61828 "isa_tms320.tcc"
> *DecodeOpNEGF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61834 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61838 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61855 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61859 "isa_tms320.tcc"
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61867 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61871 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61874 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61878 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61881 "isa_tms320.tcc"
)
{
#line 3711 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 61894 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61909 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61913 "isa_tms320.tcc"
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61921 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61925 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61928 "isa_tms320.tcc"
)
{
#line 3812 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Neg((uint16_t)imm, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 61952 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61968 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61977 "isa_tms320.tcc"
> *DecodeOpNEGF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61983 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61987 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF (negate floating-point value)
**********************************************************/
/**********************************************************
* NEGI (negate integer)
* op NEGI(0b000[3]:0b011000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 62000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62010 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62014 "isa_tms320.tcc"
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62018 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62022 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62026 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62029 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62033 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62036 "isa_tms320.tcc"
)
{
#line 3846 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGI " << src_name << ", " << dst_name;
		return true;
	}
#line 62050 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62065 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62069 "isa_tms320.tcc"
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62077 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62081 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62084 "isa_tms320.tcc"
)
{
#line 3889 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 62125 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62141 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62150 "isa_tms320.tcc"
> *DecodeOpNEGI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62156 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62160 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62177 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62181 "isa_tms320.tcc"
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62189 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62193 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62196 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62200 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62203 "isa_tms320.tcc"
)
{
#line 3857 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NEGI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 62217 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62232 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62236 "isa_tms320.tcc"
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62244 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62248 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62251 "isa_tms320.tcc"
)
{
#line 3927 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 62295 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62311 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62320 "isa_tms320.tcc"
> *DecodeOpNEGI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62326 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62330 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62347 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62351 "isa_tms320.tcc"
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62359 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62363 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62366 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62370 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62373 "isa_tms320.tcc"
)
{
#line 3868 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 62387 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62402 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62406 "isa_tms320.tcc"
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62414 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62418 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62421 "isa_tms320.tcc"
)
{
#line 3968 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 62478 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62494 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62503 "isa_tms320.tcc"
> *DecodeOpNEGI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62513 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62530 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62534 "isa_tms320.tcc"
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62542 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62549 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62556 "isa_tms320.tcc"
)
{
#line 3879 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGI " << imm << ", " << dst_name;
		return true;
	}
#line 62569 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62584 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62588 "isa_tms320.tcc"
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62596 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62600 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62603 "isa_tms320.tcc"
)
{
#line 4022 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, imm, 0);
		else
		Sub32(result, borrow_out, overflow, 0, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 62644 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62660 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62669 "isa_tms320.tcc"
> *DecodeOpNEGI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62675 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62679 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI (negate integer)
**********************************************************/
/**********************************************************
* NORM (normalize floating-point value)
* op NORM(0b000[3]:0b011010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 62692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62702 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62706 "isa_tms320.tcc"
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62714 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62718 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62721 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62725 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62728 "isa_tms320.tcc"
)
{
#line 4073 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NORM " << src_name << ", " << dst_name;
		return true;
	}
#line 62742 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62757 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62761 "isa_tms320.tcc"
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62769 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62773 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62776 "isa_tms320.tcc"
)
{
#line 4116 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		// NOTE: we make a copy because we need to perform a fix of the ST_N flag
		//  at the end of the instruction execution where the value of the source
		//  needs to be kept
		Register src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		dst_reg.Norm(src_reg, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_UF | M_ST_N | M_ST_Z,  // or mask
		0,
		0,
		underflow
		);

		// NOTE: from the target behavior we have noted that the ST_N flag needs
		//  to be fixed if the result is 0 and the source mantissa value was
		//  negative, in that case ST_N needs to be set to true
		if (dst_reg.GetHi() == (uint8_t)0x80 && dst_reg.GetLo() == 0)
		if (src_reg.GetLo() & (uint32_t)0x80000000)
		{
			uint32_t st = cpu.GetST();
			st |= ((uint32_t)1 << ST_N);
			cpu.SetST(st);
		}
	}
#line 62816 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62832 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62841 "isa_tms320.tcc"
> *DecodeOpNORM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62847 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62851 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62868 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62872 "isa_tms320.tcc"
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62880 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62884 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62887 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62891 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62894 "isa_tms320.tcc"
)
{
#line 4084 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NORM " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 62908 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62923 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62927 "isa_tms320.tcc"
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62935 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62939 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62942 "isa_tms320.tcc"
)
{
#line 4153 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		dst_reg.Norm(src_value, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_UF | M_ST_N | M_ST_Z,  // or mask
		0,
		0,
		underflow
		);
	}
#line 62971 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62987 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62996 "isa_tms320.tcc"
> *DecodeOpNORM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63002 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63006 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63023 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63027 "isa_tms320.tcc"
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63031 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63035 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63039 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63042 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63046 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63049 "isa_tms320.tcc"
)
{
#line 4095 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NORM " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 63063 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63078 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63082 "isa_tms320.tcc"
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63090 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63094 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63097 "isa_tms320.tcc"
)
{
#line 4179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		dst_reg.Norm(src_value, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_UF | M_ST_N | M_ST_Z,  // or mask
		0,
		0,
		underflow
		);
	}
#line 63139 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63155 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63164 "isa_tms320.tcc"
> *DecodeOpNORM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63170 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63174 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63191 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63195 "isa_tms320.tcc"
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63203 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63207 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63210 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63214 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63217 "isa_tms320.tcc"
)
{
#line 4106 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NORM " << imm << ", " << dst_name;
		return true;
	}
#line 63230 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63245 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63249 "isa_tms320.tcc"
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63257 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63261 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63264 "isa_tms320.tcc"
)
{
#line 4218 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		dst_reg.Norm((uint16_t)imm, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_UF | M_ST_N | M_ST_Z,  // or mask
		0,
		0,
		underflow
		);
	}
#line 63287 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63303 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63312 "isa_tms320.tcc"
> *DecodeOpNORM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63318 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63322 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NORM (normalize floating-point value)
**********************************************************/
/**********************************************************
* NOT (bitwise-logical complement)
* op NOT(0b000[3]:0b011011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 63335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63345 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63349 "isa_tms320.tcc"
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63357 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63361 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63364 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63368 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63371 "isa_tms320.tcc"
)
{
#line 4251 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NOT " << src_name << ", " << dst_name;
		return true;
	}
#line 63385 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63400 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63404 "isa_tms320.tcc"
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63412 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63416 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63419 "isa_tms320.tcc"
)
{
#line 4294 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63450 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63466 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63475 "isa_tms320.tcc"
> *DecodeOpNOT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63481 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63485 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63502 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63506 "isa_tms320.tcc"
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63514 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63521 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63528 "isa_tms320.tcc"
)
{
#line 4262 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NOT " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 63542 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63557 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63561 "isa_tms320.tcc"
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63569 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63573 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63576 "isa_tms320.tcc"
)
{
#line 4322 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63610 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63626 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63635 "isa_tms320.tcc"
> *DecodeOpNOT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63641 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63645 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63652 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63659 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63662 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63666 "isa_tms320.tcc"
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63674 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63678 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63681 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63685 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63688 "isa_tms320.tcc"
)
{
#line 4273 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NOT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 63702 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63717 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63721 "isa_tms320.tcc"
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63729 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63733 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63736 "isa_tms320.tcc"
)
{
#line 4353 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63783 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63799 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63808 "isa_tms320.tcc"
> *DecodeOpNOT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63814 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63818 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63835 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63839 "isa_tms320.tcc"
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63847 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63851 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63854 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63858 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63861 "isa_tms320.tcc"
)
{
#line 4284 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NOT " << imm << ", " << dst_name;
		return true;
	}
#line 63874 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63889 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63893 "isa_tms320.tcc"
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63901 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63905 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63908 "isa_tms320.tcc"
)
{
#line 4397 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~imm;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63939 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63955 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63964 "isa_tms320.tcc"
> *DecodeOpNOT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63970 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63974 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT (bitwise-logical complement)
**********************************************************/
/**********************************************************
* OR (bitwise-logical OR)
* op OR(0b000[3]:0b100000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 63987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63997 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64001 "isa_tms320.tcc"
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64009 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64013 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64016 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64020 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64023 "isa_tms320.tcc"
)
{
#line 4438 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "OR " << src_name << ", " << dst_name;
		return true;
	}
#line 64037 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64052 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64056 "isa_tms320.tcc"
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64064 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64068 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64071 "isa_tms320.tcc"
)
{
#line 4481 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 64105 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64121 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64130 "isa_tms320.tcc"
> *DecodeOpOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64136 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64140 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64157 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64161 "isa_tms320.tcc"
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64169 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64173 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64176 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64180 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64183 "isa_tms320.tcc"
)
{
#line 4449 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "OR " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 64197 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64212 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64216 "isa_tms320.tcc"
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64224 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64228 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64231 "isa_tms320.tcc"
)
{
#line 4512 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 64268 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64284 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64293 "isa_tms320.tcc"
> *DecodeOpOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64299 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64303 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64320 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64324 "isa_tms320.tcc"
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64332 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64336 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64339 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64343 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64346 "isa_tms320.tcc"
)
{
#line 4460 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "OR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 64360 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64375 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64379 "isa_tms320.tcc"
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64387 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64391 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64394 "isa_tms320.tcc"
)
{
#line 4546 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 64444 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64460 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64469 "isa_tms320.tcc"
> *DecodeOpOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64479 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64496 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64500 "isa_tms320.tcc"
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64508 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64512 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64515 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64519 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64522 "isa_tms320.tcc"
)
{
#line 4471 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "OR " << imm << ", " << dst_name;
		return true;
	}
#line 64535 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64550 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64554 "isa_tms320.tcc"
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64562 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64566 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64569 "isa_tms320.tcc"
)
{
#line 4593 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 64600 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64616 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64625 "isa_tms320.tcc"
> *DecodeOpOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64631 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64635 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR (bitwise-logical OR)
**********************************************************/
/**********************************************************
* RND (round floating-point value)
* op RND(0b000[3]:0b100010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64658 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64662 "isa_tms320.tcc"
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64670 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64674 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64677 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64681 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64684 "isa_tms320.tcc"
)
{
#line 4634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "RND " << src_name << ", " << dst_name;
		return true;
	}
#line 64698 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64713 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64717 "isa_tms320.tcc"
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64725 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64729 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64732 "isa_tms320.tcc"
)
{
#line 4677 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Rnd(src_reg, overflow, underflow);

		// Generate flags (into ST)
		// the documentation says that the rnd instruction doesn't touch the Z flag
		//   however the real hardware systematically sets Z to 0. We consider it
		//   a bug. The simulator user can chose the behavior to use using the
		//   enable-rnd-bug parameter.
		if (cpu.EnableRndBug())
		cpu.GenFlags(dst_reg,
		M_ST_Z | M_ST_UF | M_ST_N | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
		else
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 64772 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64788 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64797 "isa_tms320.tcc"
> *DecodeOpRND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64803 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64807 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64824 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64828 "isa_tms320.tcc"
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64836 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64840 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64843 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64847 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64850 "isa_tms320.tcc"
)
{
#line 4645 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "RND " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 64864 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64879 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64883 "isa_tms320.tcc"
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64891 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64895 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64898 "isa_tms320.tcc"
)
{
#line 4714 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Rnd(src_value, overflow, underflow);

		// Generate flags (into ST)
		// the documentation says that the rnd instruction doesn't touch the Z flag
		//   however the real hardware systematically sets Z to 0. We consider it
		//   a bug. The simulator user can chose the behavior to use using the
		//   enable-rnd-bug parameter.
		if (cpu.EnableRndBug())
		cpu.GenFlags(dst_reg,
		M_ST_Z | M_ST_UF | M_ST_N | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
		else
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 64941 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64957 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64966 "isa_tms320.tcc"
> *DecodeOpRND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64972 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64976 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64993 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64997 "isa_tms320.tcc"
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65005 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65009 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65012 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65016 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65019 "isa_tms320.tcc"
)
{
#line 4656 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "RND " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 65033 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65048 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65052 "isa_tms320.tcc"
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65060 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65064 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65067 "isa_tms320.tcc"
)
{
#line 4754 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Rnd(src_value, overflow, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		// the documentation says that the rnd instruction doesn't touch the Z flag
		//   however the real hardware systematically sets Z to 0. We consider it
		//   a bug. The simulator user can chose the behavior to use using the
		//   enable-rnd-bug parameter.
		if (cpu.EnableRndBug())
		cpu.GenFlags(dst_reg,
		M_ST_Z | M_ST_UF | M_ST_N | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
		else
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 65123 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65139 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65148 "isa_tms320.tcc"
> *DecodeOpRND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65154 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65158 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65175 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65179 "isa_tms320.tcc"
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65187 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65191 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65194 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65198 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65201 "isa_tms320.tcc"
)
{
#line 4667 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RND " << imm << ", " << dst_name;
		return true;
	}
#line 65214 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65229 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65233 "isa_tms320.tcc"
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65241 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65245 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65248 "isa_tms320.tcc"
)
{
#line 4807 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Rnd((uint16_t)imm, overflow, underflow);

		// Generate flags (into ST)
		// the documentation says that the rnd instruction doesn't touch the Z flag
		//   however the real hardware systematically sets Z to 0. We consider it
		//   a bug. The simulator user can chose the behavior to use using the
		//   enable-rnd-bug parameter.
		if (cpu.EnableRndBug())
		cpu.GenFlags(dst_reg,
		M_ST_Z | M_ST_UF | M_ST_N | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
		else
		cpu.GenFlags(dst_reg,
		M_ST_UF | M_ST_N | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 65285 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65301 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65310 "isa_tms320.tcc"
> *DecodeOpRND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65316 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65320 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RND (round floating-point value)
**********************************************************/
/**********************************************************
* ROL (rotate left)
* op ROL(0b000[3]:0b100011[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 65333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65343 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65347 "isa_tms320.tcc"
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 65351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65355 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65359 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65362 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65366 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65369 "isa_tms320.tcc"
)
{
#line 4851 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROL " << dst_name;
		return true;
	}
#line 65382 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65397 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65401 "isa_tms320.tcc"
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 65405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65409 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65413 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65416 "isa_tms320.tcc"
)
{
#line 4861 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateLeft(dst_value, 1, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 65449 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65465 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65474 "isa_tms320.tcc"
> *DecodeOpROL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65480 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65484 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROL (rotate left)
**********************************************************/
/**********************************************************
* ROLC (rotate left through carry)
* op ROLC(0b000[3]:0b100100[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 65497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65507 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65511 "isa_tms320.tcc"
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 65515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65519 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65523 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65526 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65530 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65533 "isa_tms320.tcc"
)
{
#line 4901 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROLC " << dst_name;
		return true;
	}
#line 65546 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65558 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65561 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65565 "isa_tms320.tcc"
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 65569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65573 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65577 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65580 "isa_tms320.tcc"
)
{
#line 4911 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateLeft(dst_value, 1, carry_in, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 65616 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65632 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65641 "isa_tms320.tcc"
> *DecodeOpROLC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65647 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65651 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROLC (rotate left through carry)
**********************************************************/
/**********************************************************
* ROR (rotate right)
* op ROR(0b000[3]:0b100101[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 65664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65674 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65678 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 65682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65686 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65693 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65697 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65700 "isa_tms320.tcc"
)
{
#line 4954 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROR " << dst_name;
		return true;
	}
#line 65713 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65728 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65732 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 65736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65740 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65744 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65747 "isa_tms320.tcc"
)
{
#line 4964 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 65780 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65796 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65805 "isa_tms320.tcc"
> *DecodeOpROR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65811 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65815 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROR (rotate right)
**********************************************************/
/**********************************************************
* RORC (rotate right through carry)
* op RORC(0b000[3]:0b100110[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 65828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65838 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65842 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 65846 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65850 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65854 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65857 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65861 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65864 "isa_tms320.tcc"
)
{
#line 5004 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RORC " << dst_name;
		return true;
	}
#line 65877 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65892 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65896 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 65900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65904 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65908 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65911 "isa_tms320.tcc"
)
{
#line 5014 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_in, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 65947 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65963 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65972 "isa_tms320.tcc"
> *DecodeOpRORC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65978 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65982 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RORC (rotate right through carry)
**********************************************************/
/**********************************************************
* SUBB (subtract integers with borrow)
* op SUBB(0b000[3]:0b101101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 65995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66005 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66009 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66017 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66021 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66024 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66028 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66031 "isa_tms320.tcc"
)
{
#line 5060 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBB " << src_name << ", " << dst_name;
		return true;
	}
#line 66045 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66060 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66064 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66072 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66076 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66079 "isa_tms320.tcc"
)
{
#line 5104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 66126 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66142 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66151 "isa_tms320.tcc"
> *DecodeOpSUBB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66157 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66161 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66178 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66182 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66190 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66194 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66197 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66201 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66204 "isa_tms320.tcc"
)
{
#line 5071 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 66218 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66233 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66237 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66245 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66249 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66252 "isa_tms320.tcc"
)
{
#line 5148 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 66302 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66318 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66327 "isa_tms320.tcc"
> *DecodeOpSUBB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66333 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66337 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66354 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66358 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66366 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66370 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66373 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66377 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66380 "isa_tms320.tcc"
)
{
#line 5082 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBB " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 66395 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66410 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66414 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66422 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66426 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66429 "isa_tms320.tcc"
)
{
#line 5195 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 66492 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66498 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66508 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66517 "isa_tms320.tcc"
> *DecodeOpSUBB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66523 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66527 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66534 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66544 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66548 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66556 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66560 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66563 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66567 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66570 "isa_tms320.tcc"
)
{
#line 5094 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBB " << imm << ", " << dst_name;
		return true;
	}
#line 66583 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66588 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66595 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66598 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66602 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66610 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66614 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66617 "isa_tms320.tcc"
)
{
#line 5255 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 66661 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66677 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66686 "isa_tms320.tcc"
> *DecodeOpSUBB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66692 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66696 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBC (subtract integers conditionally)
* op SUBC(0b000[3]:0b101110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 66709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66716 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66719 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66723 "isa_tms320.tcc"
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66731 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66735 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66738 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66742 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66745 "isa_tms320.tcc"
)
{
#line 5309 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBC " << src_name << ", " << dst_name;
		return true;
	}
#line 66759 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66774 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66778 "isa_tms320.tcc"
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66786 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66790 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66793 "isa_tms320.tcc"
)
{
#line 5352 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 66821 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66837 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66846 "isa_tms320.tcc"
> *DecodeOpSUBC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66852 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66856 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66873 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66877 "isa_tms320.tcc"
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66881 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66885 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66889 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66892 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66896 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66899 "isa_tms320.tcc"
)
{
#line 5320 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBC " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 66913 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66928 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66932 "isa_tms320.tcc"
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66940 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66944 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66947 "isa_tms320.tcc"
)
{
#line 5377 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 66978 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66994 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67003 "isa_tms320.tcc"
> *DecodeOpSUBC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67009 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67013 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67030 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67034 "isa_tms320.tcc"
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67042 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67046 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67049 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67053 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67056 "isa_tms320.tcc"
)
{
#line 5331 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBC " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 67070 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67085 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67089 "isa_tms320.tcc"
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67097 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67101 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67104 "isa_tms320.tcc"
)
{
#line 5405 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 67148 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67164 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67173 "isa_tms320.tcc"
> *DecodeOpSUBC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67179 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67183 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67200 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67204 "isa_tms320.tcc"
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67212 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67216 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67219 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67223 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67226 "isa_tms320.tcc"
)
{
#line 5342 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBC " << imm << ", " << dst_name;
		return true;
	}
#line 67239 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67254 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67258 "isa_tms320.tcc"
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67266 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67270 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67273 "isa_tms320.tcc"
)
{
#line 5446 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		int32_t substract_result = dst_value - imm;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 67298 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67314 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67323 "isa_tms320.tcc"
> *DecodeOpSUBC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67329 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67333 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBC (subtract integers conditionally)
**********************************************************/
/**********************************************************
* SUBF (subtract floating-point values)
* op SUBF(0b000[3]:0b101111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 67346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67356 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67360 "isa_tms320.tcc"
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67368 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67372 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67375 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67379 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67382 "isa_tms320.tcc"
)
{
#line 5481 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBF " << src_name << ", " << dst_name;
		return true;
	}
#line 67396 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67411 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67415 "isa_tms320.tcc"
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67423 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67427 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67430 "isa_tms320.tcc"
)
{
#line 5524 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Sub(src_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 67458 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67474 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67479 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67483 "isa_tms320.tcc"
> *DecodeOpSUBF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67489 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67493 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67510 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67514 "isa_tms320.tcc"
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67522 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67526 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67529 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67533 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67536 "isa_tms320.tcc"
)
{
#line 5492 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 67550 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67565 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67569 "isa_tms320.tcc"
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67577 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67581 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67584 "isa_tms320.tcc"
)
{
#line 5549 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Sub(src_value, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 67615 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67631 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67640 "isa_tms320.tcc"
> *DecodeOpSUBF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67646 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67650 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67667 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67671 "isa_tms320.tcc"
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67679 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67686 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67693 "isa_tms320.tcc"
)
{
#line 5503 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 67707 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67722 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67726 "isa_tms320.tcc"
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67734 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67738 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67741 "isa_tms320.tcc"
)
{
#line 5577 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Sub(src_value, overflow, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 67785 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67801 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67810 "isa_tms320.tcc"
> *DecodeOpSUBF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67816 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67820 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67837 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67841 "isa_tms320.tcc"
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67849 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67853 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67856 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67860 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67863 "isa_tms320.tcc"
)
{
#line 5514 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 67876 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67888 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67891 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67895 "isa_tms320.tcc"
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67903 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67907 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67910 "isa_tms320.tcc"
)
{
#line 5618 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Sub((uint16_t)imm, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 67935 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67951 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67960 "isa_tms320.tcc"
> *DecodeOpSUBF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67966 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67970 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI (subtract integer)
* op SUBI(0b000[3]:0b110000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 67983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67993 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67997 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68005 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68009 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68012 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68016 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68019 "isa_tms320.tcc"
)
{
#line 5653 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBI " << src_name << ", " << dst_name;
		return true;
	}
#line 68033 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68048 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68052 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68060 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68064 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68067 "isa_tms320.tcc"
)
{
#line 5697 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68111 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68127 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68136 "isa_tms320.tcc"
> *DecodeOpSUBI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68142 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68146 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68163 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68167 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68175 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68179 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68182 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68186 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68189 "isa_tms320.tcc"
)
{
#line 5664 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 68203 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68218 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68222 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68230 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68234 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68237 "isa_tms320.tcc"
)
{
#line 5738 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68284 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68300 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68309 "isa_tms320.tcc"
> *DecodeOpSUBI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68315 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68319 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68336 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68340 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68348 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68352 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68355 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68359 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68362 "isa_tms320.tcc"
)
{
#line 5675 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 68377 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68392 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68396 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68404 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68408 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68411 "isa_tms320.tcc"
)
{
#line 5782 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68471 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68487 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68496 "isa_tms320.tcc"
> *DecodeOpSUBI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68502 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68506 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68523 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68527 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68535 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68539 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68542 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68549 "isa_tms320.tcc"
)
{
#line 5687 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBI " << imm << ", " << dst_name;
		return true;
	}
#line 68562 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68577 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68581 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68589 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68593 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68596 "isa_tms320.tcc"
)
{
#line 5839 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68637 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68653 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68662 "isa_tms320.tcc"
> *DecodeOpSUBI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68668 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68672 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI (subtract integer)
**********************************************************/
/**********************************************************
* SUBRB (subtract reverse integer with borrow)
* op SUBRB(0b000[3]:0b110001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 68685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68695 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68699 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68707 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68711 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68714 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68718 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68721 "isa_tms320.tcc"
)
{
#line 5890 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRB " << src_name << ", " << dst_name;
		return true;
	}
#line 68735 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68750 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68754 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68762 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68766 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68769 "isa_tms320.tcc"
)
{
#line 5934 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68816 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68832 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68841 "isa_tms320.tcc"
> *DecodeOpSUBRB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68847 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68851 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68868 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68872 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68880 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68884 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68887 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68891 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68894 "isa_tms320.tcc"
)
{
#line 5901 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBRB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 68908 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68923 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68927 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68935 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68939 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68942 "isa_tms320.tcc"
)
{
#line 5978 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68992 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69008 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69017 "isa_tms320.tcc"
> *DecodeOpSUBRB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69023 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69027 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69044 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69048 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69056 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69060 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69063 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69067 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69070 "isa_tms320.tcc"
)
{
#line 5912 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRB " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 69085 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69100 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69104 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69112 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69116 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69119 "isa_tms320.tcc"
)
{
#line 6025 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69182 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69198 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69207 "isa_tms320.tcc"
> *DecodeOpSUBRB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69213 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69217 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69234 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69238 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69246 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69250 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69253 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69257 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69260 "isa_tms320.tcc"
)
{
#line 5924 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRB " << imm << ", " << dst_name;
		return true;
	}
#line 69273 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69278 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69281 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69288 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69292 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69300 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69304 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69307 "isa_tms320.tcc"
)
{
#line 6085 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69351 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69367 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69376 "isa_tms320.tcc"
> *DecodeOpSUBRB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69382 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69386 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRB (subtract reverse integer with borrow)
**********************************************************/
/**********************************************************
* SUBRF (subtract reverse floating-point value)
* op SUBRF(0b000[3]:0b110010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 69399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69409 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69413 "isa_tms320.tcc"
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69421 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69425 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69428 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69432 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69435 "isa_tms320.tcc"
)
{
#line 6139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRF " << src_name << ", " << dst_name;
		return true;
	}
#line 69449 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69464 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69468 "isa_tms320.tcc"
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69476 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69480 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69483 "isa_tms320.tcc"
)
{
#line 6182 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get source register
		Register& src_reg = cpu.GetExtReg(src);

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Sub(src_reg, dst_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 69511 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69527 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69536 "isa_tms320.tcc"
> *DecodeOpSUBRF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69542 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69546 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69563 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69567 "isa_tms320.tcc"
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69575 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69579 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69582 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69586 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69589 "isa_tms320.tcc"
)
{
#line 6150 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBRF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 69603 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69618 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69622 "isa_tms320.tcc"
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69630 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69634 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69637 "isa_tms320.tcc"
)
{
#line 6207 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Sub(src_value, dst_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 69668 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69684 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69693 "isa_tms320.tcc"
> *DecodeOpSUBRF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69699 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69703 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69720 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69724 "isa_tms320.tcc"
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69732 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69736 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69739 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69743 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69746 "isa_tms320.tcc"
)
{
#line 6161 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 69760 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69765 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69775 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69779 "isa_tms320.tcc"
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69787 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69791 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69794 "isa_tms320.tcc"
)
{
#line 6235 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Sub(src_value, dst_reg, overflow, underflow);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 69838 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69854 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69863 "isa_tms320.tcc"
> *DecodeOpSUBRF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69869 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69873 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69890 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69894 "isa_tms320.tcc"
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69902 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69906 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69909 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69913 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69916 "isa_tms320.tcc"
)
{
#line 6172 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 69929 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69944 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69948 "isa_tms320.tcc"
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69956 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69960 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69963 "isa_tms320.tcc"
)
{
#line 6276 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// no need to check the operands, they must be valid

		// get destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// compute
		uint32_t underflow;
		uint32_t overflow;
		dst_reg.Sub((uint16_t)imm, dst_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 69988 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70004 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70013 "isa_tms320.tcc"
> *DecodeOpSUBRF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70019 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70023 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRF (subtract reverse floating-point value)
**********************************************************/
/**********************************************************
* SUBRI (subtract reverse integer)
* op SUBRI(0b000[3]:0b110011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 70036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70046 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70050 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70058 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70062 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70065 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70069 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70072 "isa_tms320.tcc"
)
{
#line 6311 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRI " << src_name << ", " << dst_name;
		return true;
	}
#line 70086 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70101 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70105 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70113 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70117 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70120 "isa_tms320.tcc"
)
{
#line 6355 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 70164 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70173 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70180 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70189 "isa_tms320.tcc"
> *DecodeOpSUBRI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70195 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70199 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70216 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70220 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70228 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70232 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70235 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70239 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70242 "isa_tms320.tcc"
)
{
#line 6322 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBRI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 70256 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70261 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70264 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70268 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70271 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70275 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70283 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70287 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70290 "isa_tms320.tcc"
)
{
#line 6396 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 70337 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70353 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70362 "isa_tms320.tcc"
> *DecodeOpSUBRI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70368 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70372 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70389 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70393 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70401 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70405 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70408 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70412 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70415 "isa_tms320.tcc"
)
{
#line 6333 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 70430 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70445 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70449 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70457 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70461 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70464 "isa_tms320.tcc"
)
{
#line 6440 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 70518 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70534 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70543 "isa_tms320.tcc"
> *DecodeOpSUBRI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70549 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70553 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70570 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70574 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70582 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70586 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70589 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70593 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70596 "isa_tms320.tcc"
)
{
#line 6345 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRI " << imm << ", " << dst_name;
		return true;
	}
#line 70609 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70624 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70628 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70636 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70640 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70643 "isa_tms320.tcc"
)
{
#line 6491 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 70684 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70693 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70700 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70709 "isa_tms320.tcc"
> *DecodeOpSUBRI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70715 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70719 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRI (subtract reverse integer)
**********************************************************/
/**********************************************************
* TSTB (test bit fields)
* op TSTB(0b000[3]:0b110100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 70732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70742 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70746 "isa_tms320.tcc"
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70754 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70758 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70761 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70765 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70768 "isa_tms320.tcc"
)
{
#line 6542 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "TSTB " << src_name << ", " << dst_name;
		return true;
	}
#line 70782 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70797 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70801 "isa_tms320.tcc"
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70809 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70813 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70816 "isa_tms320.tcc"
)
{
#line 6585 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 70843 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70859 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70868 "isa_tms320.tcc"
> *DecodeOpTSTB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70874 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70878 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70895 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70899 "isa_tms320.tcc"
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70907 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70911 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70914 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70918 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70921 "isa_tms320.tcc"
)
{
#line 6553 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "TSTB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 70935 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70950 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70954 "isa_tms320.tcc"
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70962 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70966 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70969 "isa_tms320.tcc"
)
{
#line 6609 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 70999 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71015 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71024 "isa_tms320.tcc"
> *DecodeOpTSTB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71030 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71034 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71051 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71055 "isa_tms320.tcc"
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71063 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71067 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71070 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71074 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71077 "isa_tms320.tcc"
)
{
#line 6564 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "TSTB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 71091 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71106 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71110 "isa_tms320.tcc"
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71118 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71122 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71125 "isa_tms320.tcc"
)
{
#line 6636 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 71168 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71184 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71193 "isa_tms320.tcc"
> *DecodeOpTSTB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71199 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71203 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71220 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71224 "isa_tms320.tcc"
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 71228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71232 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71236 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71239 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71243 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71246 "isa_tms320.tcc"
)
{
#line 6575 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "TSTB " << imm << ", " << dst_name;
		return true;
	}
#line 71259 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71274 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71278 "isa_tms320.tcc"
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 71282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71286 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71290 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71293 "isa_tms320.tcc"
)
{
#line 6676 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 71317 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71333 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71342 "isa_tms320.tcc"
> *DecodeOpTSTB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71348 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71352 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB (test bit fields)
**********************************************************/
/**********************************************************
* XOR (bitwise-exclusive OR)
* op XOR(0b000[3]:0b110101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 71365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71375 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71379 "isa_tms320.tcc"
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71387 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71391 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71394 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71398 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71401 "isa_tms320.tcc"
)
{
#line 6710 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "XOR " << src_name << ", " << dst_name;
		return true;
	}
#line 71415 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71430 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71434 "isa_tms320.tcc"
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71442 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71446 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71449 "isa_tms320.tcc"
)
{
#line 6753 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 71483 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71499 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71508 "isa_tms320.tcc"
> *DecodeOpXOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71514 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71518 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71535 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71539 "isa_tms320.tcc"
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71547 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71551 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71554 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71558 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71561 "isa_tms320.tcc"
)
{
#line 6721 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "XOR " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 71575 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71587 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71590 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71594 "isa_tms320.tcc"
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71602 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71606 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71609 "isa_tms320.tcc"
)
{
#line 6784 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 71646 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71652 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71659 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71662 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71671 "isa_tms320.tcc"
> *DecodeOpXOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71677 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71681 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71698 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71702 "isa_tms320.tcc"
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71710 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71714 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71717 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71721 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71724 "isa_tms320.tcc"
)
{
#line 6732 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "XOR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 71738 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71753 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71757 "isa_tms320.tcc"
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71765 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71769 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71772 "isa_tms320.tcc"
)
{
#line 6818 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 71822 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71838 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71847 "isa_tms320.tcc"
> *DecodeOpXOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71853 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71857 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71874 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71878 "isa_tms320.tcc"
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 71882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71886 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71890 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71893 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71897 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71900 "isa_tms320.tcc"
)
{
#line 6743 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "XOR " << imm << ", " << dst_name;
		return true;
	}
#line 71913 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71928 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71932 "isa_tms320.tcc"
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 71936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71940 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71944 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71947 "isa_tms320.tcc"
)
{
#line 6865 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 71978 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71994 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72003 "isa_tms320.tcc"
> *DecodeOpXOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72009 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72013 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 3 operands operations:
* - ADDC3        add with carry
* - ADDF3        add floating-point values
* - ADDI3        add integers
* - AND3         bitwise-logical AND
* - ANDN3        bitwise-logical AND with complement
* - ASH3         arithmetic shift
* - CMPF3        compare floating-point values
* - CMPI3        compare integers
* - LSH3         logical shift
* - MPYF3        multiply floating-point values
* - MPYI3        multiply integers
* - OR3          bitwise-logical OR
* - SUBB3        subtract integers with borrow
* - SUBF3        subtract floating-point values
* - SUBI3        subtract integers
* - TSTB3        test bit fields
* - XOR3         bitwise-exclusive OR
*/
/**********************************************************
* ADDC3 (add with carry)
* op ADDC3(0b001[3]:0b000000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 72079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72089 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72093 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72101 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72105 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72108 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72112 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72115 "isa_tms320.tcc"
)
{
#line 66 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72130 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72145 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72149 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72157 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72161 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72164 "isa_tms320.tcc"
)
{
#line 114 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72211 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72227 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72236 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72242 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72246 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72263 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72267 "isa_tms320.tcc"
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72275 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72279 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72282 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72286 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72289 "isa_tms320.tcc"
)
{
#line 78 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 72304 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72319 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72323 "isa_tms320.tcc"
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72331 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72335 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72338 "isa_tms320.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72402 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72418 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72427 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72433 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72437 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72454 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72458 "isa_tms320.tcc"
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72466 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72470 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72473 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72477 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72480 "isa_tms320.tcc"
)
{
#line 90 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72495 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72510 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72514 "isa_tms320.tcc"
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72522 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72526 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72529 "isa_tms320.tcc"
)
{
#line 219 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72593 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72609 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72618 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72624 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72628 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72645 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72649 "isa_tms320.tcc"
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72657 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72661 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72664 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72668 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72671 "isa_tms320.tcc"
)
{
#line 102 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 72686 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72701 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72705 "isa_tms320.tcc"
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72713 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72717 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72720 "isa_tms320.tcc"
)
{
#line 280 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72806 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72822 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72831 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72837 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72841 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC3 (add with carry)
**********************************************************/
/**********************************************************
* ADDF3 (add floating-point values)
* op ADDF3(0b001[3]:0b000001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 72854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72864 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72868 "isa_tms320.tcc"
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72876 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72880 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72883 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72887 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72890 "isa_tms320.tcc"
)
{
#line 376 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72905 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72920 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72924 "isa_tms320.tcc"
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72932 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72936 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72939 "isa_tms320.tcc"
)
{
#line 424 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 1st source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Add(src1_reg, src2_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 72970 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72986 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72995 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73001 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73005 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73022 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73026 "isa_tms320.tcc"
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73034 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73038 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73041 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73045 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73048 "isa_tms320.tcc"
)
{
#line 388 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73063 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73078 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73082 "isa_tms320.tcc"
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73090 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73094 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73097 "isa_tms320.tcc"
)
{
#line 452 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Add(src1_value, src2_reg, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 73145 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73154 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73161 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73170 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73176 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73180 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73197 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73201 "isa_tms320.tcc"
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73209 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73213 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73216 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73220 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73223 "isa_tms320.tcc"
)
{
#line 400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73238 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73253 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73257 "isa_tms320.tcc"
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73265 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73269 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73272 "isa_tms320.tcc"
)
{
#line 497 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Add(src1_reg, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 73320 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73336 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73345 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73351 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73355 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73372 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73376 "isa_tms320.tcc"
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73384 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73388 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73391 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73395 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73398 "isa_tms320.tcc"
)
{
#line 412 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73413 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73428 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73432 "isa_tms320.tcc"
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73440 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73444 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73447 "isa_tms320.tcc"
)
{
#line 542 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Add(src1_value, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 73517 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73533 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73542 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73548 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73552 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF3 (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI3 (add integers)
* op ADDI3(0b001[3]:0b000010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 73565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73572 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73575 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73579 "isa_tms320.tcc"
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73587 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73591 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73594 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73598 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73601 "isa_tms320.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73616 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73631 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73635 "isa_tms320.tcc"
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73643 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73647 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73650 "isa_tms320.tcc"
)
{
#line 670 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 73694 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73710 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73719 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73725 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73729 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73746 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73750 "isa_tms320.tcc"
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73758 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73762 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73765 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73769 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73772 "isa_tms320.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73787 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73802 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73806 "isa_tms320.tcc"
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73814 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73818 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73821 "isa_tms320.tcc"
)
{
#line 711 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 73882 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73888 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73891 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73895 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73898 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73907 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73913 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73917 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73934 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73938 "isa_tms320.tcc"
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73946 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73950 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73953 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73957 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73960 "isa_tms320.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73975 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73990 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73994 "isa_tms320.tcc"
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74002 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74006 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74009 "isa_tms320.tcc"
)
{
#line 769 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 74070 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74086 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74095 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74101 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74105 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74112 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74122 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74126 "isa_tms320.tcc"
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74130 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74134 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74138 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74141 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74145 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74148 "isa_tms320.tcc"
)
{
#line 658 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74163 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74178 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74182 "isa_tms320.tcc"
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74190 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74197 "isa_tms320.tcc"
)
{
#line 827 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 74280 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74296 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74305 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74315 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI3 (add integers)
**********************************************************/
/**********************************************************
* AND3 (bitwise-logical AND)
* op AND3(0b001[3]:0b000011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 74328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74338 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74342 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74350 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74354 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74357 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74361 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74364 "isa_tms320.tcc"
)
{
#line 921 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 74379 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74394 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74398 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74406 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74410 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74413 "isa_tms320.tcc"
)
{
#line 969 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 74447 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74460 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74463 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74468 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74472 "isa_tms320.tcc"
> *DecodeOpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74478 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74482 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74499 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74503 "isa_tms320.tcc"
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74511 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74515 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74518 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74522 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74525 "isa_tms320.tcc"
)
{
#line 933 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74540 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74555 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74559 "isa_tms320.tcc"
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74567 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74571 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74574 "isa_tms320.tcc"
)
{
#line 1001 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 74625 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74641 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74650 "isa_tms320.tcc"
> *DecodeOpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74656 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74660 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74677 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74681 "isa_tms320.tcc"
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74689 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74693 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74696 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74700 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74703 "isa_tms320.tcc"
)
{
#line 945 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 74718 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74723 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74733 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74737 "isa_tms320.tcc"
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74745 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74749 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74752 "isa_tms320.tcc"
)
{
#line 1049 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 74803 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74819 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74828 "isa_tms320.tcc"
> *DecodeOpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74834 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74838 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74855 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74859 "isa_tms320.tcc"
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74867 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74871 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74874 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74878 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74881 "isa_tms320.tcc"
)
{
#line 957 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74896 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74911 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74915 "isa_tms320.tcc"
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74923 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74927 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74930 "isa_tms320.tcc"
)
{
#line 1097 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 75003 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75019 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75028 "isa_tms320.tcc"
> *DecodeOpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75034 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75038 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND3 (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN3 (bitwise-logical AND with complement)
* op ANDN3(0b001[3]:0b000100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 75051 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75058 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75061 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75065 "isa_tms320.tcc"
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75073 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75080 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75084 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75087 "isa_tms320.tcc"
)
{
#line 1180 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{ const char *dst_name = REG_NAME[dst]; const char *src1_name = REG_NAME[src1]; const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 75099 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75114 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75118 "isa_tms320.tcc"
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75126 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75130 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75133 "isa_tms320.tcc"
)
{
#line 1225 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 75167 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75183 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75192 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75198 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75202 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75219 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75223 "isa_tms320.tcc"
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75231 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75235 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75238 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75242 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75245 "isa_tms320.tcc"
)
{
#line 1189 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 75260 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75275 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75279 "isa_tms320.tcc"
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75287 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75291 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75294 "isa_tms320.tcc"
)
{
#line 1257 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 75345 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75361 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75370 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75376 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75380 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75397 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75401 "isa_tms320.tcc"
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75409 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75413 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75416 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75420 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75423 "isa_tms320.tcc"
)
{
#line 1201 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 75438 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75446 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75453 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75457 "isa_tms320.tcc"
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75465 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75469 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75472 "isa_tms320.tcc"
)
{
#line 1305 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 75523 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75539 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75548 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75554 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75558 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75572 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75575 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75579 "isa_tms320.tcc"
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75587 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75591 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75594 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75598 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75601 "isa_tms320.tcc"
)
{
#line 1213 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 75616 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75631 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75635 "isa_tms320.tcc"
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75643 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75647 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75650 "isa_tms320.tcc"
)
{
#line 1353 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 75723 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75739 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75748 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75754 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75758 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN3 (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH3 (arithmetic shift)
* op ASH3(0b001[3]:0b000101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 75771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75781 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75785 "isa_tms320.tcc"
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75793 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75797 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75800 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75804 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75807 "isa_tms320.tcc"
)
{
#line 1436 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 75822 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75837 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75841 "isa_tms320.tcc"
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75849 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75853 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75856 "isa_tms320.tcc"
)
{
#line 1484 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 75926 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75942 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75951 "isa_tms320.tcc"
> *DecodeOpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75957 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75961 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75978 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75982 "isa_tms320.tcc"
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75990 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75994 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75997 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76001 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76004 "isa_tms320.tcc"
)
{
#line 1448 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 76019 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76034 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76038 "isa_tms320.tcc"
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76046 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76050 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76053 "isa_tms320.tcc"
)
{
#line 1551 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76140 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76156 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76165 "isa_tms320.tcc"
> *DecodeOpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76171 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76175 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76192 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76196 "isa_tms320.tcc"
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76204 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76208 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76211 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76215 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76218 "isa_tms320.tcc"
)
{
#line 1460 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 76233 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76248 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76252 "isa_tms320.tcc"
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76260 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76264 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76267 "isa_tms320.tcc"
)
{
#line 1635 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76354 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76370 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76379 "isa_tms320.tcc"
> *DecodeOpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76385 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76389 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76406 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76410 "isa_tms320.tcc"
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76418 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76425 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76429 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76432 "isa_tms320.tcc"
)
{
#line 1472 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 76447 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76462 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76466 "isa_tms320.tcc"
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76474 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76478 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76481 "isa_tms320.tcc"
)
{
#line 1719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76590 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76606 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76615 "isa_tms320.tcc"
> *DecodeOpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76621 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76625 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH3 (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF3 (compare floating-point values)
* op CMPF3(0b001[3]:0b000110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 76638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76648 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76652 "isa_tms320.tcc"
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76660 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76664 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76667 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76671 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76674 "isa_tms320.tcc"
)
{
#line 1838 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 76688 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76703 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76707 "isa_tms320.tcc"
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76715 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76719 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76722 "isa_tms320.tcc"
)
{
#line 1882 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Create a fake register to store temporary result
		Register res_reg;

		// Get the 1st source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		res_reg.Sub(src1_reg, src2_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		res_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 76753 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76769 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76778 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76784 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76788 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76805 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76809 "isa_tms320.tcc"
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76817 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76821 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76824 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76828 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76831 "isa_tms320.tcc"
)
{
#line 1849 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 76845 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76860 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76864 "isa_tms320.tcc"
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76872 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76876 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76879 "isa_tms320.tcc"
)
{
#line 1910 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Create a fake register to store temporary result
		Register res_reg;

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		res_reg.Sub(src1_value, src2_reg, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		res_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 76927 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76943 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76952 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76958 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76962 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76979 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76983 "isa_tms320.tcc"
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76991 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76998 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77002 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77005 "isa_tms320.tcc"
)
{
#line 1860 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 77019 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77034 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77038 "isa_tms320.tcc"
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77046 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77050 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77053 "isa_tms320.tcc"
)
{
#line 1955 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Create a fake register to store temporary result
		Register res_reg;

		// Get the 2nd source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		res_reg.Sub(src1_reg, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		res_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 77101 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77117 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77126 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77132 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77136 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77153 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77157 "isa_tms320.tcc"
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77165 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77169 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77172 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77176 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77179 "isa_tms320.tcc"
)
{
#line 1871 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 77193 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77208 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77212 "isa_tms320.tcc"
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77220 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77224 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77227 "isa_tms320.tcc"
)
{
#line 2000 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Create a fake register to store temporary result
		Register res_reg;

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		res_reg.Sub(src1_value, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		res_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 77297 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77313 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77322 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77328 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77332 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF3 (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI3 (compare integers)
* op CMPI3(0b001[3]:0b000111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 77345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77355 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77359 "isa_tms320.tcc"
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77367 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77371 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77374 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77378 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77381 "isa_tms320.tcc"
)
{
#line 2080 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 77395 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77410 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77414 "isa_tms320.tcc"
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77422 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77426 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77429 "isa_tms320.tcc"
)
{
#line 2124 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 77462 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77478 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77487 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77493 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77497 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77514 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77518 "isa_tms320.tcc"
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77526 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77530 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77533 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77537 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77540 "isa_tms320.tcc"
)
{
#line 2091 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 77554 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77569 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77573 "isa_tms320.tcc"
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77581 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77585 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77588 "isa_tms320.tcc"
)
{
#line 2154 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 77638 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77654 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77663 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77669 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77673 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77690 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77694 "isa_tms320.tcc"
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77702 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77706 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77709 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77713 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77716 "isa_tms320.tcc"
)
{
#line 2102 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 77730 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77735 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77742 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77745 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77749 "isa_tms320.tcc"
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77757 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77761 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77764 "isa_tms320.tcc"
)
{
#line 2201 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 77814 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77830 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77839 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77845 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77849 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77866 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77870 "isa_tms320.tcc"
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77878 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77882 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77885 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77889 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77892 "isa_tms320.tcc"
)
{
#line 2113 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 77906 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77921 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77925 "isa_tms320.tcc"
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77933 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77937 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77940 "isa_tms320.tcc"
)
{
#line 2248 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 78006 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78022 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78031 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78037 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78041 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI3 (compare integers)
**********************************************************/
/**********************************************************
* LSH3 (logical shift)
* op LSH3(0b001[3]:0b001000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 78054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78064 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78068 "isa_tms320.tcc"
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78076 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78080 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78083 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78087 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78090 "isa_tms320.tcc"
)
{
#line 2324 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78105 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78113 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78120 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78124 "isa_tms320.tcc"
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78132 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78136 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78139 "isa_tms320.tcc"
)
{
#line 2372 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 78209 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78225 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78234 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78240 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78244 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78261 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78265 "isa_tms320.tcc"
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78273 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78277 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78280 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78284 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78287 "isa_tms320.tcc"
)
{
#line 2336 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78302 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78317 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78321 "isa_tms320.tcc"
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78329 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78333 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78336 "isa_tms320.tcc"
)
{
#line 2439 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 78423 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78439 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78448 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78454 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78458 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78468 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78475 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78479 "isa_tms320.tcc"
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78487 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78491 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78494 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78498 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78501 "isa_tms320.tcc"
)
{
#line 2348 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78516 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78531 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78535 "isa_tms320.tcc"
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78543 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78547 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78550 "isa_tms320.tcc"
)
{
#line 2523 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 78637 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78653 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78662 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78668 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78672 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78689 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78693 "isa_tms320.tcc"
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78701 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78705 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78708 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78712 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78715 "isa_tms320.tcc"
)
{
#line 2360 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78730 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78735 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78742 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78745 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78749 "isa_tms320.tcc"
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78757 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78761 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78764 "isa_tms320.tcc"
)
{
#line 2607 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 78873 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78889 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78898 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78904 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78908 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 (logical shift)
**********************************************************/
/**********************************************************
* MPYF3 (multiply floating-point values)
* op MPYF3(0b001[3]:0b001001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 78921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78931 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78935 "isa_tms320.tcc"
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78943 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78947 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78950 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78954 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78957 "isa_tms320.tcc"
)
{
#line 2726 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78972 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78987 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78991 "isa_tms320.tcc"
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78999 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79003 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79006 "isa_tms320.tcc"
)
{
#line 2774 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 1st source register
		Register src1_reg = cpu.GetExtReg(src1);

		// Get the 2nd source register
		Register src2_reg = cpu.GetExtReg(src2);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Mpy(src1_reg, src2_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);

		// NOTE: the ST_N flag may need to be fixed if the result is equal to 0.0,
		//   then the ST_N flag is set to 1 if one of two inputs is negative (but
		//   not both) and none of them had 0x80 as exponent
		if (dst_reg.GetHi() == 0x80)
		{
			if (((src1_reg.GetHi() != (uint8_t)0x80)
			&& (src2_reg.GetHi() != (uint8_t)0x80))
			&& (((src1_reg.GetLo() & (uint32_t)0x80000000)
			^ (src2_reg.GetLo() & (uint32_t)0x80000000)) != 0))
			{
				uint32_t st = cpu.GetST();
				st |= ((uint32_t)1 << ST_N);
				cpu.SetST(st);
			}
		}
	}
#line 79053 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79069 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79078 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79084 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79088 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79105 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79109 "isa_tms320.tcc"
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79113 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79117 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79121 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79124 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79128 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79131 "isa_tms320.tcc"
)
{
#line 2738 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79146 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79154 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79161 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79165 "isa_tms320.tcc"
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79173 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79177 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79180 "isa_tms320.tcc"
)
{
#line 2818 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register src2_reg = cpu.GetExtReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Mpy(src1_value, src2_reg, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);

		// NOTE: the ST_N flag may need to be fixed if the result is equal to 0.0,
		//   then the ST_N flag is set to 1 if one of two inputs is negative (but
		//   not both) and none of them had 0x80 as exponent
		if (dst_reg.GetHi() == 0x80)
		{
			Register src1_reg;
			src1_reg.SetFromSinglePrecisionFPFormat(src1_value);
			if (((src1_reg.GetHi() != (uint32_t)0x80)
			&& (src2_reg.GetHi() != (uint8_t)0x80))
			&& (((src1_reg.GetLo() & (uint32_t)0x80000000)
			^ (src2_reg.GetLo() & (uint32_t)0x80000000)) != 0))
			{
				uint32_t st = cpu.GetST();
				st |= ((uint32_t)1 << ST_N);
				cpu.SetST(st);
			}
		}
	}
#line 79246 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79262 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79271 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79277 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79281 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79298 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79302 "isa_tms320.tcc"
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79310 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79314 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79317 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79321 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79324 "isa_tms320.tcc"
)
{
#line 2750 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79339 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79354 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79358 "isa_tms320.tcc"
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79366 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79370 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79373 "isa_tms320.tcc"
)
{
#line 2881 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register src1_reg = cpu.GetExtReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Mpy(src1_reg, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);

		// NOTE: the ST_N flag may need to be fixed if the result is equal to 0.0,
		//   then the ST_N flag is set to 1 if one of two inputs is negative (but
		//   not both) and none of them had 0x80 as exponent
		if (dst_reg.GetHi() == 0x80)
		{
			Register src2_reg;
			src2_reg.SetFromSinglePrecisionFPFormat(src2_value);
			if (((src2_reg.GetHi() != (uint32_t)0x80)
			&& (src1_reg.GetHi() != (uint8_t)0x80))
			&& (((src2_reg.GetLo() & (uint32_t)0x80000000)
			^ (src1_reg.GetLo() & (uint32_t)0x80000000)) != 0))
			{
				uint32_t st = cpu.GetST();
				st |= ((uint32_t)1 << ST_N);
				cpu.SetST(st);
			}
		}
	}
#line 79439 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79455 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79464 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79470 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79474 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79491 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79495 "isa_tms320.tcc"
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79503 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79507 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79510 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79514 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79517 "isa_tms320.tcc"
)
{
#line 2762 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79532 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79547 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79551 "isa_tms320.tcc"
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79559 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79563 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79566 "isa_tms320.tcc"
)
{
#line 2944 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Mpy(src1_value, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);

		// NOTE: the ST_N flag may need to be fixed if the result is equal to 0.0,
		//   then the ST_N flag is set to 1 if one of two inputs is negative (but
		//   not both) and none of them had 0x80 as exponent
		if (dst_reg.GetHi() == 0x80)
		{
			Register src1_reg;
			Register src2_reg;
			src1_reg.SetFromSinglePrecisionFPFormat(src1_value);
			src2_reg.SetFromSinglePrecisionFPFormat(src2_value);
			if (((src1_reg.GetHi() != (uint32_t)0x80)
			&& (src2_reg.GetHi() != (uint8_t)0x80))
			&& (((src1_reg.GetLo() & (uint32_t)0x80000000)
			^ (src2_reg.GetLo() & (uint32_t)0x80000000)) != 0))
			{
				uint32_t st = cpu.GetST();
				st |= ((uint32_t)1 << ST_N);
				cpu.SetST(st);
			}
		}
	}
#line 79656 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79672 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79681 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79687 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79691 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI3 (multiply integers)
* op MPYI3(0b001[3]:0b001010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 79704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79714 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79718 "isa_tms320.tcc"
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79726 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79730 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79733 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79737 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79740 "isa_tms320.tcc"
)
{
#line 3044 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79755 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79770 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79774 "isa_tms320.tcc"
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79782 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79786 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79789 "isa_tms320.tcc"
)
{
#line 3092 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Read 2nd source operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 79836 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79852 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79861 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79867 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79871 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79878 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79881 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79888 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79892 "isa_tms320.tcc"
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79896 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79900 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79904 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79907 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79911 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79914 "isa_tms320.tcc"
)
{
#line 3056 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79929 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79944 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79948 "isa_tms320.tcc"
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79956 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79960 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79963 "isa_tms320.tcc"
)
{
#line 3136 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Read 2nd source operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 80027 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80043 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80052 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80058 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80062 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80079 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80083 "isa_tms320.tcc"
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80091 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80095 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80098 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80102 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80105 "isa_tms320.tcc"
)
{
#line 3068 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80120 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80135 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80139 "isa_tms320.tcc"
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80147 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80151 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80154 "isa_tms320.tcc"
)
{
#line 3197 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 80218 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80234 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80243 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80249 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80253 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80270 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80274 "isa_tms320.tcc"
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80282 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80286 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80289 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80293 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80296 "isa_tms320.tcc"
)
{
#line 3080 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80311 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80326 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80330 "isa_tms320.tcc"
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80338 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80342 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80345 "isa_tms320.tcc"
)
{
#line 3258 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.IntLoad(ea1) & 0xffffff), 24);

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(ea2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 80431 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80447 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80456 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80462 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80466 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 (multiply integers)
**********************************************************/
/**********************************************************
* OR3 (bitwise-logical OR)
* op OR3(0b001[3]:0b001011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 80479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80489 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80493 "isa_tms320.tcc"
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80501 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80505 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80508 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80512 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80515 "isa_tms320.tcc"
)
{
#line 3354 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80530 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80545 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80549 "isa_tms320.tcc"
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80557 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80561 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80564 "isa_tms320.tcc"
)
{
#line 3402 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 80598 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80614 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80623 "isa_tms320.tcc"
> *DecodeOpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80629 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80633 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80650 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80654 "isa_tms320.tcc"
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80662 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80666 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80669 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80673 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80676 "isa_tms320.tcc"
)
{
#line 3366 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80691 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80706 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80710 "isa_tms320.tcc"
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80718 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80722 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80725 "isa_tms320.tcc"
)
{
#line 3434 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 80776 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80792 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80801 "isa_tms320.tcc"
> *DecodeOpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80807 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80811 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80828 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80832 "isa_tms320.tcc"
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80840 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80844 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80847 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80851 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80854 "isa_tms320.tcc"
)
{
#line 3378 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80869 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80884 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80888 "isa_tms320.tcc"
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80896 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80900 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80903 "isa_tms320.tcc"
)
{
#line 3482 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 80954 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80970 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80979 "isa_tms320.tcc"
> *DecodeOpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80985 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80989 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80996 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81003 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81006 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81010 "isa_tms320.tcc"
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81018 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81022 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81025 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81029 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81032 "isa_tms320.tcc"
)
{
#line 3390 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 81047 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81062 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81066 "isa_tms320.tcc"
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81074 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81078 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81081 "isa_tms320.tcc"
)
{
#line 3530 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 81154 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81170 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81179 "isa_tms320.tcc"
> *DecodeOpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81185 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81189 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 (bitwise-logical OR)
**********************************************************/
/**********************************************************
* SUBB3 (subtract integers with borrow)
* op SUBB3(0b001[3]:0b001100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 81202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81212 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81216 "isa_tms320.tcc"
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81224 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81228 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81231 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81235 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81238 "isa_tms320.tcc"
)
{
#line 3613 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 81253 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81268 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81272 "isa_tms320.tcc"
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81280 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81284 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81287 "isa_tms320.tcc"
)
{
#line 3661 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81334 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81350 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81359 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81365 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81369 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81386 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81390 "isa_tms320.tcc"
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81398 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81402 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81405 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81409 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81412 "isa_tms320.tcc"
)
{
#line 3625 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 81427 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81442 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81446 "isa_tms320.tcc"
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81454 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81458 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81461 "isa_tms320.tcc"
)
{
#line 3705 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81525 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81541 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81550 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81556 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81560 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81577 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81581 "isa_tms320.tcc"
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81589 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81593 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81596 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81600 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81603 "isa_tms320.tcc"
)
{
#line 3637 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 81618 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81633 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81637 "isa_tms320.tcc"
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81645 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81649 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81652 "isa_tms320.tcc"
)
{
#line 3766 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81716 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81732 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81741 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81747 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81751 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81758 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81765 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81768 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81772 "isa_tms320.tcc"
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81780 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81784 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81787 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81791 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81794 "isa_tms320.tcc"
)
{
#line 3649 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 81809 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81824 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81828 "isa_tms320.tcc"
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81836 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81840 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81843 "isa_tms320.tcc"
)
{
#line 3827 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81929 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81945 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81954 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81960 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81964 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB3 (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBF3 (subtract floating-point values)
* op SUBF3(0b001[3]:0b001101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 81977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81987 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81991 "isa_tms320.tcc"
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81999 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82003 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82006 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82010 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82013 "isa_tms320.tcc"
)
{
#line 3923 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 82028 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82043 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82047 "isa_tms320.tcc"
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82055 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82059 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82062 "isa_tms320.tcc"
)
{
#line 3971 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 1st source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Sub(src1_reg, src2_reg, overflow, underflow);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 82093 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82109 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82118 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82124 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82128 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82145 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82149 "isa_tms320.tcc"
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82157 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82161 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82164 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82168 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82171 "isa_tms320.tcc"
)
{
#line 3935 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 82186 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82201 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82205 "isa_tms320.tcc"
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82213 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82217 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82220 "isa_tms320.tcc"
)
{
#line 3999 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register& src2_reg = cpu.GetExtReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Sub(src1_value, src2_reg, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 82268 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82284 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82293 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82299 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82303 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82320 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82324 "isa_tms320.tcc"
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82332 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82336 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82339 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82343 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82346 "isa_tms320.tcc"
)
{
#line 3947 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 82361 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82366 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82376 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82380 "isa_tms320.tcc"
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82388 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82392 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82395 "isa_tms320.tcc"
)
{
#line 4044 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Get the 2nd source register
		Register& src1_reg = cpu.GetExtReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Sub(src1_reg, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 82443 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82459 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82468 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82478 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82495 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82499 "isa_tms320.tcc"
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82507 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82514 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82521 "isa_tms320.tcc"
)
{
#line 3959 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 82536 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82551 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82555 "isa_tms320.tcc"
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82563 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82567 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82570 "isa_tms320.tcc"
)
{
#line 4089 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// No need to check for the operands

		// Get the destination register
		Register& dst_reg = cpu.GetExtReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute
		uint32_t overflow;
		uint32_t underflow;
		dst_reg.Sub(src1_value, src2_value, overflow, underflow);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow,
		underflow
		);
	}
#line 82640 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82653 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82656 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82665 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82671 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82675 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI3 (subtract integers)
* op SUBI3(0b001[3]:0b001110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 82688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82698 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82702 "isa_tms320.tcc"
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82710 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82714 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82717 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82721 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82724 "isa_tms320.tcc"
)
{
#line 4169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 82739 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82754 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82758 "isa_tms320.tcc"
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82766 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82770 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82773 "isa_tms320.tcc"
)
{
#line 4217 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 82817 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82833 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82842 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82848 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82852 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82859 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82866 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82869 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82873 "isa_tms320.tcc"
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82881 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82885 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82888 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82892 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82895 "isa_tms320.tcc"
)
{
#line 4181 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 82910 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82925 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82929 "isa_tms320.tcc"
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82937 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82941 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82944 "isa_tms320.tcc"
)
{
#line 4258 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 83005 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83021 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83030 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83036 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83040 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83057 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83061 "isa_tms320.tcc"
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83069 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83073 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83076 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83080 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83083 "isa_tms320.tcc"
)
{
#line 4193 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 83098 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83113 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83117 "isa_tms320.tcc"
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83125 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83129 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83132 "isa_tms320.tcc"
)
{
#line 4316 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 83193 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83209 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83218 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83224 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83228 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83245 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83249 "isa_tms320.tcc"
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83257 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83261 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83264 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83268 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83271 "isa_tms320.tcc"
)
{
#line 4205 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 83286 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83301 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83305 "isa_tms320.tcc"
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83313 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83317 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83320 "isa_tms320.tcc"
)
{
#line 4374 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 83403 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83409 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83416 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83419 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83428 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83434 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83438 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 (subtract integers)
**********************************************************/
/**********************************************************
* TSTB3 (test bit fields)
* op TSTB3(0b001[3]:0b001111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83461 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83465 "isa_tms320.tcc"
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83473 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83477 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83480 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83487 "isa_tms320.tcc"
)
{
#line 4467 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 83501 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83516 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83520 "isa_tms320.tcc"
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83528 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83532 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83535 "isa_tms320.tcc"
)
{
#line 4511 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 83562 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83578 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83587 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83593 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83597 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83614 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83618 "isa_tms320.tcc"
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83626 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83630 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83633 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83637 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83640 "isa_tms320.tcc"
)
{
#line 4478 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 83654 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83659 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83669 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83673 "isa_tms320.tcc"
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83681 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83685 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83688 "isa_tms320.tcc"
)
{
#line 4536 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether 2nd source operand is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 83732 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83748 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83757 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83763 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83767 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83781 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83784 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83788 "isa_tms320.tcc"
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83796 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83800 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83803 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83807 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83810 "isa_tms320.tcc"
)
{
#line 4489 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 83824 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83839 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83843 "isa_tms320.tcc"
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83851 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83855 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83858 "isa_tms320.tcc"
)
{
#line 4577 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether 1st source operand is valid
		if(unlikely(!cpu.HasReg(src1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 83902 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83918 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83927 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83933 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83937 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83954 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83958 "isa_tms320.tcc"
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 83962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83966 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83973 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83977 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83980 "isa_tms320.tcc"
)
{
#line 4500 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 83994 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84009 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84013 "isa_tms320.tcc"
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84021 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84025 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84028 "isa_tms320.tcc"
)
{
#line 4618 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 84088 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84104 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84113 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84119 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84123 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB3 (test bit fields)
**********************************************************/
/**********************************************************
* XOR3 (bitwise-exclusive OR)
* op XOR3(0b001[3]:0b010000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84146 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84150 "isa_tms320.tcc"
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84154 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84158 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84162 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84165 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84169 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84172 "isa_tms320.tcc"
)
{
#line 4688 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 84187 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84202 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84206 "isa_tms320.tcc"
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84214 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84218 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84221 "isa_tms320.tcc"
)
{
#line 4736 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 84255 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84261 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84264 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84268 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84271 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84280 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84286 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84290 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84307 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84311 "isa_tms320.tcc"
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84319 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84323 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84326 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84330 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84333 "isa_tms320.tcc"
)
{
#line 4700 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 84348 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84363 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84367 "isa_tms320.tcc"
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84375 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84379 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84382 "isa_tms320.tcc"
)
{
#line 4768 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 84433 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84449 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84458 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84464 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84468 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84485 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84489 "isa_tms320.tcc"
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84497 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84501 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84504 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84508 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84511 "isa_tms320.tcc"
)
{
#line 4712 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 84526 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84541 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84545 "isa_tms320.tcc"
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84553 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84557 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84560 "isa_tms320.tcc"
)
{
#line 4816 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 84611 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84627 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84636 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84642 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84646 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84653 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84663 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84667 "isa_tms320.tcc"
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84675 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84679 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84682 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84686 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84689 "isa_tms320.tcc"
)
{
#line 4724 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 84704 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84716 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84719 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84723 "isa_tms320.tcc"
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84731 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84735 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84738 "isa_tms320.tcc"
)
{
#line 4864 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 84811 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84827 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84836 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84842 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84846 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of program-control operations:
* - Bcond        branch conditionally (standard)
* - BcondD       branch conditionally (delayed)
* - BR           branch unconditionally (standard)
* - BRD          branch unconditionally (delayed)
* - CALL         call subroutine
* - CALLcond     call subroutine conditionally
* - DBcond       decrement and branch conditionally (standard)
* - DBcondD      decrement and branch conditionally (delayed)
* - IACK         interrupt acknowledge
* - IDLE         idle until interrupt
* - NOP          no operation
* - RETIcond     return from interrupt conditionally
* - RETScond     return form subroutine conditionally
* - RPTB         repeat block of instructions
* - RPTS         repeat single instruction
* - SWI          software interrupt
* - TRAPcond     trap conditionally
*/
/**********************************************************
* Bcond (branch conditionally (standard))
* op Bcond(0b011010[6]:b[1]:0b000[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84922 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84926 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84934 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84938 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84941 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84945 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84948 "isa_tms320.tcc"
)
{
#line 63 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << " " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 84961 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84973 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84976 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84980 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84988 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84992 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84995 "isa_tms320.tcc"
)
{
#line 73 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 85023 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85039 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85048 "isa_tms320.tcc"
> *DecodeOpBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85054 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85058 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 85065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85075 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85079 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 85083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85087 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85091 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85094 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85098 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85101 "isa_tms320.tcc"
)
{
#line 100 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 85113 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85128 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85132 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 85136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85140 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85144 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85147 "isa_tms320.tcc"
)
{
#line 109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 85178 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85194 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85203 "isa_tms320.tcc"
> *DecodeOpBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85209 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85213 "isa_tms320.tcc"
	>(code, addr);
}

/* end of Bcond (branch conditionally (standard))
**********************************************************/
/**********************************************************
* BcondD (branch conditionally (delayed))
* op BcondD(0b011010[6]:b[1]:0b000[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85236 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85240 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85248 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85252 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85255 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85259 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85262 "isa_tms320.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << "D " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 85275 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85290 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85294 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85302 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85306 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85309 "isa_tms320.tcc"
)
{
#line 157 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 85338 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85354 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85363 "isa_tms320.tcc"
> *DecodeOpBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85369 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85373 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 85380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85390 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85394 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 85398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85402 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85406 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85409 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85413 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85416 "isa_tms320.tcc"
)
{
#line 185 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << "D 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << ">";
		return true;
	}
#line 85428 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85443 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85447 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 85451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85455 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85459 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85462 "isa_tms320.tcc"
)
{
#line 194 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = next_pc + imm + 2;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 85494 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85510 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85519 "isa_tms320.tcc"
> *DecodeOpBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85525 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85529 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BcondD (branch conditionally (delayed))
**********************************************************/
/**********************************************************
* BR (branch unconditionally (standard))
* op BR(0b0110000[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85552 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85556 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 85560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85564 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85568 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85571 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85575 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85578 "isa_tms320.tcc"
)
{
#line 233 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BR 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 85587 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85595 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85602 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85606 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 85610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85614 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85618 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85621 "isa_tms320.tcc"
)
{
#line 239 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 85640 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85653 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85656 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85665 "isa_tms320.tcc"
> *DecodeOpBR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85671 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85675 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BR (branch unconditionally (standard))
**********************************************************/
/**********************************************************
* BRD (branch unconditionally (delayed))
* op BRD(0b0110000[7]:0b1[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85698 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85702 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 85706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85710 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85714 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85717 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85721 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85724 "isa_tms320.tcc"
)
{
#line 265 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BRD 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 85733 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85748 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85752 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 85756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85760 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85764 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85767 "isa_tms320.tcc"
)
{
#line 271 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 85787 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85803 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85812 "isa_tms320.tcc"
> *DecodeOpBRD(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85818 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85822 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BRD (branch unconditionally (delayed))
**********************************************************/
/**********************************************************
* CALL (call subroutine)
* op CALL(0b0110001[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85845 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85849 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 85853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85857 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85861 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85864 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85868 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85871 "isa_tms320.tcc"
)
{
#line 298 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "CALL 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 85880 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85895 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85899 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 85903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85907 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85911 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85914 "isa_tms320.tcc"
)
{
#line 304 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target call address
		typename CONFIG::address_t target_addr = src;

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 85945 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85961 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85970 "isa_tms320.tcc"
> *DecodeOpCALL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85976 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85980 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALL (call subroutine)
**********************************************************/
/**********************************************************
* CALLcond (call subroutine conditionally)
* op CALLcond(0b011100[6]:b[1]:0b0000[4]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86003 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86007 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86011 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86015 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86019 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86022 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86026 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86029 "isa_tms320.tcc"
)
{
#line 342 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "CALL" << cond_name << " " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 86042 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86057 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86061 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86069 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86073 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86076 "isa_tms320.tcc"
)
{
#line 352 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 86116 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86132 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86141 "isa_tms320.tcc"
> *DecodeOpCALLcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86147 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86151 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86168 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86172 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 86176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86180 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86184 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86187 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86191 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86194 "isa_tms320.tcc"
)
{
#line 391 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "CALL" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 86206 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86221 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86225 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 86229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86233 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86237 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86240 "isa_tms320.tcc"
)
{
#line 400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 86280 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86296 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86305 "isa_tms320.tcc"
> *DecodeOpCALLcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86315 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALLcond (call subroutine conditionally)
**********************************************************/
/**********************************************************
* DBcond (decrement and branch conditionally (standard))
* op DBcond(0b011011[6]:b[1]:ar[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86338 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86342 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86350 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86354 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86357 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86361 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86364 "isa_tms320.tcc"
)
{
#line 447 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 86377 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86392 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86396 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86404 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86408 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86411 "isa_tms320.tcc"
)
{
#line 457 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 86451 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86467 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86476 "isa_tms320.tcc"
> *DecodeOpDBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86482 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86486 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86503 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86507 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 86511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86515 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86519 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86522 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86526 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86529 "isa_tms320.tcc"
)
{
#line 496 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 86541 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86556 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86560 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 86564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86568 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86572 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86575 "isa_tms320.tcc"
)
{
#line 505 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 86618 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86634 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86643 "isa_tms320.tcc"
> *DecodeOpDBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86649 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86653 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcond (decrement and branch conditionally (standard))
**********************************************************/
/**********************************************************
* DBcondD (decrement and branch conditionally (delayed))
* op DBcondD(0b011011[6]:b[1]:ar[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86676 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86680 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86688 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86692 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86695 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86699 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86702 "isa_tms320.tcc"
)
{
#line 555 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 86715 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86730 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86734 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86742 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86746 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86749 "isa_tms320.tcc"
)
{
#line 565 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 86790 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86806 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86815 "isa_tms320.tcc"
> *DecodeOpDBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86821 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86825 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86842 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86846 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 86850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86854 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86858 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86861 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86865 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86868 "isa_tms320.tcc"
)
{
#line 605 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << ">";
		return true;
	}
#line 86880 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86895 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86899 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 86903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86907 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86911 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86914 "isa_tms320.tcc"
)
{
#line 614 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm + 2;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 86958 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86974 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86983 "isa_tms320.tcc"
> *DecodeOpDBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86989 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86993 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcondD (decrement and branch conditionally (delayed))
**********************************************************/
/**********************************************************
* IACK (interrupt acknowledge)
* op IACK(0b000[3]:0b110110[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87016 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87020 "isa_tms320.tcc"
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87028 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87032 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87035 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87039 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87042 "isa_tms320.tcc"
)
{
#line 665 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IACK @0x" << direct;
		return true;
	}
#line 87050 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87065 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87069 "isa_tms320.tcc"
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87077 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87081 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87084 "isa_tms320.tcc"
)
{
#line 670 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87091 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87107 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87116 "isa_tms320.tcc"
> *DecodeOpIACK_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87122 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87126 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 87133 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87143 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87147 "isa_tms320.tcc"
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87155 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87159 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87162 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87166 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87169 "isa_tms320.tcc"
)
{
#line 676 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "IACK " << disasm_indir;
		return true;
	}
#line 87179 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87194 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87198 "isa_tms320.tcc"
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87206 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87210 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87213 "isa_tms320.tcc"
)
{
#line 683 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87220 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87236 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87245 "isa_tms320.tcc"
> *DecodeOpIACK_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87251 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87255 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IACK (interrupt acknowledge)
**********************************************************/
/**********************************************************
* IDLE (idle until interrupt)
* op IDLE(0b000[3]:0b001100[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87268 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87278 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87282 "isa_tms320.tcc"
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 87286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87290 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87294 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87297 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87301 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87304 "isa_tms320.tcc"
)
{
#line 697 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IDLE";
		return true;
	}
#line 87312 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87327 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87331 "isa_tms320.tcc"
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 87335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87339 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87343 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87346 "isa_tms320.tcc"
)
{
#line 702 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Enter idle mode 1
		cpu.Idle(1);
	}
#line 87365 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87381 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87390 "isa_tms320.tcc"
> *DecodeOpIDLE(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87396 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87400 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE (idle until interrupt)
**********************************************************/
/**********************************************************
* NOP (no operation)
* op NOP(0b000[3]:0b011001[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87423 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87427 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 87431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87435 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87439 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87442 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87446 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87449 "isa_tms320.tcc"
)
{
#line 728 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{

		os << "NOP";
		return true;
	}
#line 87458 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87473 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87477 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 87481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87485 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87489 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87492 "isa_tms320.tcc"
)
{
#line 734 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// No operation
	}
#line 87499 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87515 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87524 "isa_tms320.tcc"
> *DecodeOpNOP_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87530 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87534 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 87541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87551 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87555 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87563 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87567 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87570 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87574 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87577 "isa_tms320.tcc"
)
{
#line 740 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "NOP " << disasm_indir;
		return true;
	}
#line 87587 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87595 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87602 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87606 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87614 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87618 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87621 "isa_tms320.tcc"
)
{
#line 747 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Do a dummy load from memory
		cpu.IntLoad(ea);
	}
#line 87639 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87652 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87655 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87664 "isa_tms320.tcc"
> *DecodeOpNOP_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87670 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87674 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOP (no operation)
**********************************************************/
/**********************************************************
* RETIcond (return from interrupt conditionally)
* op RETIcond(0b01111[5]:0b0000[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87697 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87701 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 87705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87709 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87713 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87716 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87720 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87723 "isa_tms320.tcc"
)
{
#line 772 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETI" << cond_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.IntLoad(cpu.GetSP() & ADDRESS_MASK)) << ">";
		return true;
	}
#line 87735 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87750 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87754 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 87758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87762 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87766 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87769 "isa_tms320.tcc"
)
{
#line 781 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 87809 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87825 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87834 "isa_tms320.tcc"
> *DecodeOpRETIcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87840 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87844 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETIcond (return from interrupt conditionally)
**********************************************************/
/**********************************************************
* RETScond (return form subroutine conditionally)
* op RETScond(0b01111[5]:0b0001[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87867 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87871 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 87875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87879 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87883 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87886 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87890 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87893 "isa_tms320.tcc"
)
{
#line 828 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETS" << cond_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.IntLoad(cpu.GetSP() & ADDRESS_MASK)) << ">";
		return true;
	}
#line 87905 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87920 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87924 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 87928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87932 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87936 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87939 "isa_tms320.tcc"
)
{
#line 837 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 87976 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87989 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87992 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88001 "isa_tms320.tcc"
> *DecodeOpRETScond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88007 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88011 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETScond (return form subroutine conditionally)
**********************************************************/
/**********************************************************
* RPTB (repeat block of instructions)
* op RPTB(0b01100100[8]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88034 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88038 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 88042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88046 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88050 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88053 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88057 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88060 "isa_tms320.tcc"
)
{
#line 881 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTB 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 88069 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88084 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88088 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 88092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88096 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88100 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88103 "isa_tms320.tcc"
)
{
#line 887 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.ResetS();

		// Load RE with source operand value
		cpu.SetRE(src);
	}
#line 88131 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88147 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88156 "isa_tms320.tcc"
> *DecodeOpRPTB(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88162 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88166 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTB (repeat block of instructions)
**********************************************************/
/**********************************************************
* RPTS (repeat single instruction)
* op RPTS(0b000[3]:0b100111[6]:g[2]:0b11011[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88189 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88193 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 88197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88201 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88208 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88212 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88215 "isa_tms320.tcc"
)
{
#line 922 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;
		os << "RPTS " << src_reg_name;
		return true;
	}
#line 88226 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88241 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88245 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 88249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88253 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88257 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88260 "isa_tms320.tcc"
)
{
#line 930 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that source register is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		typename CONFIG::address_t src_value = cpu.GetReg(src);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 88298 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88314 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88323 "isa_tms320.tcc"
> *DecodeOpRPTS_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88329 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88333 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88350 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88354 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88362 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88366 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88369 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88373 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88376 "isa_tms320.tcc"
)
{
#line 967 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << direct << dec;
		return true;
	}
#line 88384 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88399 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88403 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88411 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88415 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88418 "isa_tms320.tcc"
)
{
#line 972 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address of the source operand
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 88453 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88469 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88478 "isa_tms320.tcc"
> *DecodeOpRPTS_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88484 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88488 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88505 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88509 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88517 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88521 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88524 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88528 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88531 "isa_tms320.tcc"
)
{
#line 1006 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "RPTS " << disasm_indir;
		return true;
	}
#line 88541 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88556 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88560 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88568 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88572 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88575 "isa_tms320.tcc"
)
{
#line 1013 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 88617 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88633 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88642 "isa_tms320.tcc"
> *DecodeOpRPTS_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88648 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88652 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88659 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88669 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88673 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 88677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88681 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88685 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88688 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88692 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88695 "isa_tms320.tcc"
)
{
#line 1054 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << imm << dec;
		return true;
	}
#line 88703 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88718 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88722 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 88726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88730 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88734 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88737 "isa_tms320.tcc"
)
{
#line 1059 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result
		uint32_t src_value = imm; // imm has already been sign extended by the decoder

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 88769 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88785 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88794 "isa_tms320.tcc"
> *DecodeOpRPTS_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88800 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88804 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTS (repeat single instruction)
**********************************************************/
/**********************************************************
* SWI (software interrupt)
* op SWI(0b0110011[7]:0b0000[4]:0[21])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88827 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88831 "isa_tms320.tcc"
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 88835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88839 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88843 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88846 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88850 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88853 "isa_tms320.tcc"
)
{
#line 1098 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "SWI";
		return true;
	}
#line 88861 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88866 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88876 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88880 "isa_tms320.tcc"
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 88884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88888 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88892 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88895 "isa_tms320.tcc"
)
{
#line 1103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		if(unlikely(!cpu.SWI()))
		{
			throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
		}
	}
#line 88905 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88921 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88930 "isa_tms320.tcc"
> *DecodeOpSWI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88936 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88940 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SWI (software interrupt)
**********************************************************/
/**********************************************************
* TRAPcond (trap conditionally)
* op TRAPcond(0b0111010[7]:0b0000[4]:cond[5]:0b01[11]:n[5])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88963 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88967 "isa_tms320.tcc"
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 88971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88975 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88979 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88982 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88986 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88989 "isa_tms320.tcc"
)
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		if(!cond_name) return false;
		os << "TRAP" << cond_name << " " << n;
		return true;
	}
#line 88999 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89014 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89018 "isa_tms320.tcc"
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 89022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89026 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89030 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89033 "isa_tms320.tcc"
)
{
#line 1128 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Load trap handler address
		typename CONFIG::address_t trap_handler_addr = cpu.IntLoad(0x20 + n);

		// Reset ST[GIE] to disable further interrupts until reactivated by the software
		cpu.ResetST_GIE();

		// Branch to trap handler
		cpu.Branch(trap_handler_addr);
	}
#line 89076 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89092 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89101 "isa_tms320.tcc"
> *DecodeOpTRAPcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89107 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89111 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TRAPcond (trap conditionally)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of low-power control operations:
* - IDLE2        low-power idle
* - LOPOWER      divide clock by 16
* - MAXSPEED     restore clock to regular speed
*/
/**********************************************************
* IDLE2 (low-power idle)
* op IDLE2(0b000[3]:0b001100[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89173 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89177 "isa_tms320.tcc"
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 89181 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89185 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89189 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89192 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89196 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89199 "isa_tms320.tcc"
)
{
#line 49 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "IDLE2";
		return true;
	}
#line 89207 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89222 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89226 "isa_tms320.tcc"
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 89230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89234 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89238 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89241 "isa_tms320.tcc"
)
{
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch()))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Enter idle mode 2
		cpu.Idle(2);
	}
#line 89259 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89275 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89284 "isa_tms320.tcc"
> *DecodeOpIDLE2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89290 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89294 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE2 (low-power idle)
**********************************************************/
/**********************************************************
* LOPOWER (divide clock by 16)
* op LOPOWER(0b000[3]:0b100001[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89317 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89321 "isa_tms320.tcc"
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 89325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89329 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89333 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89336 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89340 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89343 "isa_tms320.tcc"
)
{
#line 79 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "LOPOWER";
		return true;
	}
#line 89351 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89356 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89366 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89370 "isa_tms320.tcc"
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 89374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89378 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89382 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89385 "isa_tms320.tcc"
)
{
#line 84 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89392 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89408 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89417 "isa_tms320.tcc"
> *DecodeOpLOPOWER(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89423 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89427 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LOPOWER (divide clock by 16)
**********************************************************/
/**********************************************************
* MAXSPEED (restore clock to regular speed)
* op MAXSPEED(0b000[3]:0b100001[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89450 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89454 "isa_tms320.tcc"
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 89458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89462 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89466 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89469 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89473 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89476 "isa_tms320.tcc"
)
{
#line 98 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "MAXSPEED";
		return true;
	}
#line 89484 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89499 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89503 "isa_tms320.tcc"
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 89507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89511 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89515 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89518 "isa_tms320.tcc"
)
{
#line 103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89525 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89541 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89550 "isa_tms320.tcc"
> *DecodeOpMAXSPEED(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89556 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89560 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MAXSPEED (restore clock to regular speed)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of interlocked-operations:
* - LDFI         load floating-point value, interlocked
* - LDII         load integer, interlocked
* - SIGI         signal, interlocked
* - STFI         store floating-point value, interlocked
* - STII         store integer, interflocked
*/
/**********************************************************
* LDFI (load floating-point value, interlocked)
* op LDFI(0b000[3]:0b001111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89624 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89628 "isa_tms320.tcc"
OpLDFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 89632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89636 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89640 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89643 "isa_tms320.tcc"
)
{
#line 52 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89650 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89663 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89666 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89675 "isa_tms320.tcc"
> *DecodeOpLDFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89681 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89685 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 89692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89702 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89706 "isa_tms320.tcc"
OpLDFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 89710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89714 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89718 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89721 "isa_tms320.tcc"
)
{
#line 56 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89728 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89744 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89753 "isa_tms320.tcc"
> *DecodeOpLDFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89759 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89763 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFI (load floating-point value, interlocked)
**********************************************************/
/**********************************************************
* LDII (load integer, interlocked)
* op LDII(0b000[3]:0b010001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89786 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89790 "isa_tms320.tcc"
OpLDII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 89794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89798 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89802 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89805 "isa_tms320.tcc"
)
{
#line 71 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea, true /* interlocked */);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z  // or mask
			);
		}
	}
#line 89836 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89852 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89861 "isa_tms320.tcc"
> *DecodeOpLDII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89867 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89871 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 89878 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89881 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89888 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89892 "isa_tms320.tcc"
OpLDII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 89896 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89900 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89904 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89907 "isa_tms320.tcc"
)
{
#line 99 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea, true /* interlocked */);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z  // or mask
			);
		}
	}
#line 89951 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89957 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89967 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89976 "isa_tms320.tcc"
> *DecodeOpLDII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89982 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89986 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDII (load integer, interlocked)
**********************************************************/
/**********************************************************
* SIGI (signal, interlocked)
* op SIGI(0b000[3]:0b101100[6]:0b00[2]:0[21])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90009 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90013 "isa_tms320.tcc"
OpSIGI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90021 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90025 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90028 "isa_tms320.tcc"
)
{
#line 150 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90035 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90051 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90060 "isa_tms320.tcc"
> *DecodeOpSIGI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90066 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90070 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SIGI (signal, interlocked)
**********************************************************/
/**********************************************************
* STFI (store floating-point value, interlocked)
* op STFI(0b000[3]:0b101001[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90093 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90097 "isa_tms320.tcc"
OpSTFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 90101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90105 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90109 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90112 "isa_tms320.tcc"
)
{
#line 165 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90119 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90135 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90144 "isa_tms320.tcc"
> *DecodeOpSTFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90150 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90154 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90171 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90175 "isa_tms320.tcc"
OpSTFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 90179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90183 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90187 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90190 "isa_tms320.tcc"
)
{
#line 169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90197 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90213 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90222 "isa_tms320.tcc"
> *DecodeOpSTFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90228 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90232 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STFI (store floating-point value, interlocked)
**********************************************************/
/**********************************************************
* STII (store integer, interflocked)
* op STII(0b000[3]:0b101011[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90255 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90259 "isa_tms320.tcc"
OpSTII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 90263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90267 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90271 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90274 "isa_tms320.tcc"
)
{
#line 184 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Store the word into memory
		cpu.IntStore(ea, result, true /* interlocked */);
	}
#line 90294 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90310 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90319 "isa_tms320.tcc"
> *DecodeOpSTII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90325 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90329 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90346 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90350 "isa_tms320.tcc"
OpSTII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 90354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90358 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90362 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90365 "isa_tms320.tcc"
)
{
#line 201 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(ea, result, true /* interlocked */);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 90398 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90414 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90423 "isa_tms320.tcc"
> *DecodeOpSTII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90429 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90433 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STII (store integer, interflocked)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of parallel operations:
* - ABSF || STF		absolute value of a floating-point number and store floating-point value
* - ABSI || STI		absolute value of an integer and store integer
* - ADDF3 || STF		add floating-point values and store floating-point value
* - ADDI3 || STI		add integers and store integer
* - AND3 || STI		bitwise-logical AND and store integer
* - ASH3 || STI		arithmetic shift and store integer
* - FIX || STI			convert floating-point value to integer and store integer
* - FLOAT || STF		convert integer to floating-point value and store floating-point value
* - LDF || STF			load floating-point value and store floating-point value
* - LDI || STI			load integer and store integer
* - LSH3 || STI		logical shift and store integer
* - MPYF3 || STF       multiply floating-point values and store floating-point value
* - MPYI3 || STI		multiply integer and store integer
* - NEGF || STF		negate floating-point value and store floating-point value
* - NEGI || STI		negate integer and store integer
* - NOT || STI			complement value and store integer
* - OR3 || STI			bitwise-logical OR value and store integer
* - STF || STF			store floating-point values
* - STI || STI			sotre integers
* - SUBF3 || STF		subtract floating-point value and store floating-point value
* - SUBI3 || STI		subtract integer and store integer
* - XOR3 || STI		bitwise-exclusive OR values and store integer
* - LDF || LDF			load floating-point value
* - LDI || LDI			load integer
* - MPYF3 || ADDF3		multiply and add floating-point value
* - MPYF3 || SUBF3		multiply and subtract floating-point value
* - MPYI3 || ADDI3		multiply and add integer
* - MPYI3 || SUBI3		multiply and subtract integer
*/
/**********************************************************
* ABSF || STF (absolute value of a floating-point number and store floating-point value)
* op ABSF_STF(0b11[2]:0b00100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90520 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90524 "isa_tms320.tcc"
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 90528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90532 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90536 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90539 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90546 "isa_tms320.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ABSF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90564 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 90569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90579 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90583 "isa_tms320.tcc"
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 90587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90591 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90595 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90598 "isa_tms320.tcc"
)
{
#line 104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register
		Register &src3_reg = cpu.GetExtReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Get the 'dst1' register (no need to initialize, as will be rewritten by the abs method)
		Register dst1_reg;

		// Compute the result of ABSF
		uint32_t overflow;      // the overflow (0 or 1)
		dst1_reg.Abs(src2_value, overflow);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_reg.GetSinglePrecisionFPFormat());

		// Write back result of ABSF in register 'dst1'
		cpu.GetExtReg(dst1) = dst1_reg;

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(dst1_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 90666 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90682 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90691 "isa_tms320.tcc"
> *DecodeOpABSF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90697 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90701 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90718 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90722 "isa_tms320.tcc"
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90730 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90734 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90737 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90741 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90744 "isa_tms320.tcc"
)
{
#line 90 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ABSF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90761 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 90766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90776 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90780 "isa_tms320.tcc"
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90788 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90792 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90795 "isa_tms320.tcc"
)
{
#line 169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// NOTE: the documentation says that the src2 register can be any cpu
		// register, but tests with the assemble have shown that only extended
		// registers can be used

		// Read the 'src2' register operand
		Register &src2_reg = cpu.GetExtReg(src2);

		// Read the 'src3' register operand
		Register &src3_reg = cpu.GetExtReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Get the 'dst1' register (no need to initialize, as will be rewritten by the abs method)
		Register dst1_reg;

		// Compute the result of ABSF
		uint32_t overflow;      // the overflow (0 or 1)
		dst1_reg.Abs(src2_reg, overflow);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_reg.GetSinglePrecisionFPFormat());

		// Write back result of ABSF in register 'dst1'
		cpu.GetExtReg(dst1) = dst1_reg;

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(dst1_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 90847 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90863 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90872 "isa_tms320.tcc"
> *DecodeOpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90878 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90882 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSF || STF (absolute value of a floating-point number and store floating-point value)
**********************************************************/
/**********************************************************
* ABSI || STI (absolute value of an integer and store integer)
* op ABSI_STI(0b11[2]:0b00101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90906 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90910 "isa_tms320.tcc"
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90918 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90925 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90929 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90932 "isa_tms320.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ABSI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90950 "isa_tms320.tcc"
}
//    abs(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90968 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90972 "isa_tms320.tcc"
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90980 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90984 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90987 "isa_tms320.tcc"
)
{
#line 262 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of ABSI
		uint32_t result;  // the 32-bit result
		uint8_t overflow;      // the overflow (0 or 1)

		if(src2_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src2_value >= 0) ? src2_value : -src2_value;
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of ABSI in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 91065 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91081 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91090 "isa_tms320.tcc"
> *DecodeOpABSI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91096 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91100 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91117 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91121 "isa_tms320.tcc"
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91129 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91133 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91136 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91140 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91143 "isa_tms320.tcc"
)
{
#line 245 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ABSI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91160 "isa_tms320.tcc"
}
//    abs(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91178 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91182 "isa_tms320.tcc"
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91190 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91197 "isa_tms320.tcc"
)
{
#line 340 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ABSI
		uint32_t result;  // the 32-bit result
		uint8_t overflow;      // the overflow (0 or 1)

		if(src2_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src2_value >= 0) ? src2_value : -src2_value;
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of ABSI in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 91261 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91277 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91286 "isa_tms320.tcc"
> *DecodeOpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91292 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91296 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSI || STI (absolute value of an integer and store integer)
**********************************************************/
/**********************************************************
* ADDF3 || STF (add floating-point values and store floating-point value)
* op ADDF3_STF(0b11[2]:0b00110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91320 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91324 "isa_tms320.tcc"
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91332 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91336 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91339 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91343 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91346 "isa_tms320.tcc"
)
{
#line 413 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91365 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91380 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91384 "isa_tms320.tcc"
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91392 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91396 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91399 "isa_tms320.tcc"
)
{
#line 444 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register
		Register &src3_reg = cpu.GetExtReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register
		Register &src1_reg = cpu.GetExtReg(src1);

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Get the 'dst1' register (no need to initialize, as will be rewritten by the abs method)
		Register dst1_reg;

		// Compute the result of ABSF
		uint32_t overflow;      // the overflow (0 or 1)
		uint32_t underflow;     // the underflow (0 or 1)
		dst1_reg.Add(src1_reg, src2_value, overflow, underflow);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_reg.GetSinglePrecisionFPFormat());

		// Write back result of ADDF3 in register 'dst1'
		cpu.GetExtReg(dst1) = dst1_reg;

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(dst1_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF| M_ST_N | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow,
		underflow
		);
	}
#line 91472 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91488 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91497 "isa_tms320.tcc"
> *DecodeOpADDF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91503 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91507 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91524 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91528 "isa_tms320.tcc"
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91536 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91540 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91543 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91547 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91550 "isa_tms320.tcc"
)
{
#line 429 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91568 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91583 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91587 "isa_tms320.tcc"
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91595 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91599 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91602 "isa_tms320.tcc"
)
{
#line 514 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// TODO: check if the src2 register must be an extended register or can
		//   really be any register of the cpu

		// Check that 'src2' register is valid
		//	if(unlikely(!cpu.HasReg(src2)))
		//	{
			//		throw BogusOpcodeException<CONFIG, DEBUG>(this);
			//	}

		// Read the 'src1' register operand
		Register &src1_reg = cpu.GetExtReg(src1);

		// Read the 'src2' register operand
		Register &src2_reg = cpu.GetExtReg(src2);

		// Read the 'src3' register operand
		Register &src3_reg = cpu.GetExtReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Get the 'dst1' register (no need to initialize, as will be rewritten by the abs method)
		Register dst1_reg;

		// Compute the result of ABSF
		uint32_t overflow;      // the overflow (0 or 1)
		uint32_t underflow;     // the underflow (0 or 1)
		dst1_reg.Add(src1_reg, src2_reg, overflow, underflow);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_reg.GetSinglePrecisionFPFormat());

		// Write back result of ABSF in register 'dst1'
		cpu.GetExtReg(dst1) = dst1_reg;

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(dst1_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LUF | M_ST_LV | M_ST_UF| M_ST_N | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow,
		underflow
		);
	}
#line 91664 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91670 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91677 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91680 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91689 "isa_tms320.tcc"
> *DecodeOpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91695 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91699 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDF3 || STF (add floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* ADDI3 || STI (add integers and store integer)
* op ADDI3_STI(0b11[2]:0b00111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91723 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91727 "isa_tms320.tcc"
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91731 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91735 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91739 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91742 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91746 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91749 "isa_tms320.tcc"
)
{
#line 585 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91768 "isa_tms320.tcc"
}
//    reg(src1) + indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91786 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91790 "isa_tms320.tcc"
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91798 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91802 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91805 "isa_tms320.tcc"
)
{
#line 619 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ADDI3
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Check whether 'dst1' operand is an extended precision register
		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		carry_out,
		overflow
		);
	}
#line 91882 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91888 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91891 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91895 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91898 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91907 "isa_tms320.tcc"
> *DecodeOpADDI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91913 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91917 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91934 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91938 "isa_tms320.tcc"
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91946 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91950 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91953 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91957 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91960 "isa_tms320.tcc"
)
{
#line 601 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91978 "isa_tms320.tcc"
}
//    reg(src1) + reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91996 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92000 "isa_tms320.tcc"
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92008 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92012 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92015 "isa_tms320.tcc"
)
{
#line 696 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' registers is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ADDI3
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		carry_out,
		overflow
		);
	}
#line 92081 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92097 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92106 "isa_tms320.tcc"
> *DecodeOpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92112 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92116 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDI3 || STI (add integers and store integer)
**********************************************************/
/**********************************************************
* AND3 || STI (bitwise-logical AND and store integer)
* op AND3_STI(0b11[2]:0b01000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92140 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92144 "isa_tms320.tcc"
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92152 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92156 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92159 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92163 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92166 "isa_tms320.tcc"
)
{
#line 771 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92185 "isa_tms320.tcc"
}
//    reg(src1) AND indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92203 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92207 "isa_tms320.tcc"
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92215 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92219 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92222 "isa_tms320.tcc"
)
{
#line 805 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ANDI3
		uint32_t result = src1_value & src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 92288 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92304 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92313 "isa_tms320.tcc"
> *DecodeOpAND3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92319 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92323 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92340 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92344 "isa_tms320.tcc"
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92352 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92356 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92359 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92363 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92366 "isa_tms320.tcc"
)
{
#line 787 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92384 "isa_tms320.tcc"
}
//    reg(src1) AND reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92402 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92406 "isa_tms320.tcc"
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92414 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92418 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92421 "isa_tms320.tcc"
)
{
#line 871 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ANDI3
		uint32_t result = src1_value & src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 92473 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92489 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92494 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92498 "isa_tms320.tcc"
> *DecodeOpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92504 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92508 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of AND3 || STI (bitwise-logical AND and store integer)
**********************************************************/
/**********************************************************
* ASH3 || STI (arithmetic shift and store integer)
* op ASH3_STI(0b11[2]:0b01001[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92532 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92536 "isa_tms320.tcc"
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92544 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92548 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92551 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92555 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92558 "isa_tms320.tcc"
)
{
#line 932 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92577 "isa_tms320.tcc"
}
//    ash(indir(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92595 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92599 "isa_tms320.tcc"
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92607 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92611 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92614 "isa_tms320.tcc"
)
{
#line 966 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ASH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 92713 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92729 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92738 "isa_tms320.tcc"
> *DecodeOpASH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92744 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92748 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92765 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92769 "isa_tms320.tcc"
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92777 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92781 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92784 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92788 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92791 "isa_tms320.tcc"
)
{
#line 948 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92809 "isa_tms320.tcc"
}
//    ash(reg(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92827 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92831 "isa_tms320.tcc"
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92839 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92843 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92846 "isa_tms320.tcc"
)
{
#line 1065 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ASH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 92931 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92947 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92956 "isa_tms320.tcc"
> *DecodeOpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92962 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92966 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ASH3 || STI (arithmetic shift and store integer)
**********************************************************/
/**********************************************************
* FIX || STI (convert floating-point value to integer and store integer)
* op FIX_STI(0b11[2]:0b01010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92990 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92994 "isa_tms320.tcc"
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93002 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93006 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93009 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93013 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93016 "isa_tms320.tcc"
)
{
#line 1159 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "FIX " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93034 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93049 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93053 "isa_tms320.tcc"
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93061 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93065 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93068 "isa_tms320.tcc"
)
{
#line 1188 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		Register src2_reg;
		src2_reg.SetFromSinglePrecisionFPFormat(cpu.IntLoad(s2_ea));

		// Compute the result of ABSI
		uint32_t result;  // the 32-bit result
		uint32_t overflow;      // the overflow (0 or 1)

		result = src2_reg.Fix(overflow);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of FIX in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 93137 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93153 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93162 "isa_tms320.tcc"
> *DecodeOpFIX_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93168 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93172 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93189 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93193 "isa_tms320.tcc"
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93201 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93208 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93212 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93215 "isa_tms320.tcc"
)
{
#line 1174 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "FIX " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93232 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93247 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93251 "isa_tms320.tcc"
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93259 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93263 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93266 "isa_tms320.tcc"
)
{
#line 1254 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// TODO: check that the src2 register can only be an extended register

		// Read the 'src2' register operand
		Register src2_reg = cpu.GetExtReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of FIX
		uint32_t result;  // the 32-bit result
		uint32_t overflow;      // the overflow (0 or 1)

		result = src2_reg.Fix(overflow);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of ABSI in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 93316 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93332 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93341 "isa_tms320.tcc"
> *DecodeOpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93347 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93351 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of FIX || STI (convert floating-point value to integer and store integer)
**********************************************************/
/**********************************************************
* FLOAT || STF (convert integer to floating-point value and store floating-point value)
* op FLOAT_STF(0b11[2]:0b01011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93375 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93379 "isa_tms320.tcc"
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 93383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93387 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93391 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93394 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93398 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93401 "isa_tms320.tcc"
)
{
#line 1313 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "FLOAT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93419 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93434 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93438 "isa_tms320.tcc"
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 93442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93446 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93450 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93453 "isa_tms320.tcc"
)
{
#line 1342 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register
		Register &src3_reg = cpu.GetExtReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Get the 'dst1' register (no need to initialize, as will be rewritten by the abs method)
		Register dst1_reg;

		// Compute the result of FLOAT
		dst1_reg.Float(src2_value);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_reg.GetSinglePrecisionFPFormat());

		// Write back result of ABSF in register 'dst1'
		cpu.GetExtReg(dst1) = dst1_reg;

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(dst1_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 93518 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93534 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93543 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93549 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93553 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93570 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93574 "isa_tms320.tcc"
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93582 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93586 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93589 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93593 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93596 "isa_tms320.tcc"
)
{
#line 1328 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "FLOAT " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93613 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93628 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93632 "isa_tms320.tcc"
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93640 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93644 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93647 "isa_tms320.tcc"
)
{
#line 1404 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether the 'src2' register operand is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		Register &src3_reg = cpu.GetExtReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Get the 'dst1' register (no need to initialize, as will be rewritten by the abs method)
		Register dst1_reg;

		// Compute the result of FLOAT
		dst1_reg.Float(src2_value);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_reg.GetSinglePrecisionFPFormat());

		// Write back result of ABSF in register 'dst1'
		cpu.GetExtReg(dst1) = dst1_reg;

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(dst1_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 93698 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93714 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93723 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93729 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93733 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT || STF (convert integer to floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDF || STF (load floating-point value and store floating-point value)
* op LDF_STF(0b11[2]:0b01100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93756 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93760 "isa_tms320.tcc"
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 93764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93768 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93772 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93775 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93779 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93782 "isa_tms320.tcc"
)
{
#line 1463 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93800 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93815 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93819 "isa_tms320.tcc"
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 93823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93827 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93831 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93834 "isa_tms320.tcc"
)
{
#line 1492 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 93841 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93857 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93866 "isa_tms320.tcc"
> *DecodeOpLDF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93872 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93876 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93893 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93897 "isa_tms320.tcc"
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93905 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93909 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93912 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93916 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93919 "isa_tms320.tcc"
)
{
#line 1478 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LDF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93936 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93951 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93955 "isa_tms320.tcc"
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93963 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93967 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93970 "isa_tms320.tcc"
)
{
#line 1496 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 93977 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93993 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94002 "isa_tms320.tcc"
> *DecodeOpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94008 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94012 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || STF (load floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDI || STI (load integer and store integer)
* op LDI_STI(0b11[2]:0b01101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94035 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94039 "isa_tms320.tcc"
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94047 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94051 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94054 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94058 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94061 "isa_tms320.tcc"
)
{
#line 1511 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94079 "isa_tms320.tcc"
}
//    indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94097 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94101 "isa_tms320.tcc"
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94109 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94113 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94116 "isa_tms320.tcc"
)
{
#line 1543 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address for the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address for the 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Load 'src2' value from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Store 'src3' value into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, src2_value);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

	}
#line 94166 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94182 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94191 "isa_tms320.tcc"
> *DecodeOpLDI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94197 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94201 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94218 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94222 "isa_tms320.tcc"
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94230 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94234 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94237 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94241 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94244 "isa_tms320.tcc"
)
{
#line 1526 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LDI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94261 "isa_tms320.tcc"
}
//    reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94279 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94283 "isa_tms320.tcc"
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94291 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94295 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94298 "isa_tms320.tcc"
)
{
#line 1593 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether the 'src2' register operand is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address for the 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Store 'src3' value into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, src2_value);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}
	}
#line 94337 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94353 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94362 "isa_tms320.tcc"
> *DecodeOpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94368 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94372 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || STI (load integer and store integer)
**********************************************************/
/**********************************************************
* LSH3 || STI (logical shift and store integer)
* op LSH3_STI(0b11[2]:0b01110[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94395 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94399 "isa_tms320.tcc"
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94407 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94411 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94414 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94418 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94421 "isa_tms320.tcc"
)
{
#line 1640 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LSH3 " << count << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94440 "isa_tms320.tcc"
}
//    lsh(indir(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94458 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94462 "isa_tms320.tcc"
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94470 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94474 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94477 "isa_tms320.tcc"
)
{
#line 1674 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of LSH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 94576 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94592 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94601 "isa_tms320.tcc"
> *DecodeOpLSH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94607 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94611 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94628 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94632 "isa_tms320.tcc"
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94640 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94644 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94647 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94654 "isa_tms320.tcc"
)
{
#line 1656 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LSH3 " << count << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94672 "isa_tms320.tcc"
}
//    lsh(reg(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94690 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94694 "isa_tms320.tcc"
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94702 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94706 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94709 "isa_tms320.tcc"
)
{
#line 1773 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of LSH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 94794 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94810 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94819 "isa_tms320.tcc"
> *DecodeOpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94825 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94829 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 || STI (logical shift and store integer)
**********************************************************/
/**********************************************************
* MPYF3 || STF (multiply floating-point values and store floating-point value)
* op MPYF3_STF(0b11[2]:0b01111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94852 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94856 "isa_tms320.tcc"
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 94860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94864 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94868 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94871 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94875 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94878 "isa_tms320.tcc"
)
{
#line 1866 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94897 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 94902 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94912 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94916 "isa_tms320.tcc"
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 94920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94924 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94928 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94931 "isa_tms320.tcc"
)
{
#line 1897 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 94938 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94954 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94963 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94969 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94973 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94990 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94994 "isa_tms320.tcc"
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95002 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95006 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95009 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95013 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95016 "isa_tms320.tcc"
)
{
#line 1882 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95034 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95049 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95053 "isa_tms320.tcc"
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95061 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95065 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95068 "isa_tms320.tcc"
)
{
#line 1901 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95075 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95091 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95096 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95100 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95106 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95110 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || STF (multiply floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || STI (multiply integer and store integer)
* op MPYI3_STI(0b11[2]:0b10000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95133 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95137 "isa_tms320.tcc"
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95145 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95149 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95152 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95156 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95159 "isa_tms320.tcc"
)
{
#line 1916 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95178 "isa_tms320.tcc"
}
//    reg(src1) * indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95196 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95200 "isa_tms320.tcc"
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95208 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95212 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95215 "isa_tms320.tcc"
)
{
#line 1950 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(s2_ea) & 0xffffff), 24);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the 32-bit result and overflow of MPYI3
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 95294 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95310 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95319 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95325 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95329 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95346 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95350 "isa_tms320.tcc"
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95358 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95362 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95365 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95369 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95372 "isa_tms320.tcc"
)
{
#line 1932 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95390 "isa_tms320.tcc"
}
//    reg(src1) + reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95408 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95412 "isa_tms320.tcc"
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95420 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95424 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95427 "isa_tms320.tcc"
)
{
#line 2029 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Read 'src2' operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the 32-bit result and overflow of MPYI3
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 95496 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95512 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95521 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95527 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95531 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || STI (multiply integer and store integer)
**********************************************************/
/**********************************************************
* NEGF || STF (negate floating-point value and store floating-point value)
* op NEGF_STF(0b11[2]:0b10001[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95554 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95558 "isa_tms320.tcc"
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95566 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95570 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95573 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95577 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95580 "isa_tms320.tcc"
)
{
#line 2106 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NEGF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95598 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95613 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95617 "isa_tms320.tcc"
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95625 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95629 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95632 "isa_tms320.tcc"
)
{
#line 2135 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95639 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95652 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95655 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95664 "isa_tms320.tcc"
> *DecodeOpNEGF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95670 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95674 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95691 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95695 "isa_tms320.tcc"
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95703 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95707 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95710 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95714 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95717 "isa_tms320.tcc"
)
{
#line 2121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95734 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95749 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95753 "isa_tms320.tcc"
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95761 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95765 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95768 "isa_tms320.tcc"
)
{
#line 2139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95775 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95781 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95791 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95800 "isa_tms320.tcc"
> *DecodeOpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95806 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95810 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF || STF (negate floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* NEGI || STI (negate integer and store integer)
* op NEGI_STI(0b11[2]:0b10010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95833 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95837 "isa_tms320.tcc"
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95845 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95849 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95852 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95856 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95859 "isa_tms320.tcc"
)
{
#line 2154 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NEGI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95877 "isa_tms320.tcc"
}
//    neg(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95895 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95899 "isa_tms320.tcc"
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95907 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95911 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95914 "isa_tms320.tcc"
)
{
#line 2186 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of NEGI
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NEGI in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 95987 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96003 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96012 "isa_tms320.tcc"
> *DecodeOpNEGI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96018 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96022 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96039 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96043 "isa_tms320.tcc"
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96051 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96055 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96058 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96062 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96065 "isa_tms320.tcc"
)
{
#line 2169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96082 "isa_tms320.tcc"
}
//    neg(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96100 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96104 "isa_tms320.tcc"
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96112 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96116 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96119 "isa_tms320.tcc"
)
{
#line 2259 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of NEGI
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NEGI in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 96178 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96194 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96203 "isa_tms320.tcc"
> *DecodeOpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96209 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96213 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI || STI (negate integer and store integer)
**********************************************************/
/**********************************************************
* NOT || STI (complement value and store integer)
* op NOT_STI(0b11[2]:0b10011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96236 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96240 "isa_tms320.tcc"
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96248 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96252 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96255 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96259 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96262 "isa_tms320.tcc"
)
{
#line 2326 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NOT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96280 "isa_tms320.tcc"
}
//    not(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96298 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96302 "isa_tms320.tcc"
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96310 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96314 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96317 "isa_tms320.tcc"
)
{
#line 2358 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of NOT
		uint32_t result = ~src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NOT in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 96380 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96396 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96405 "isa_tms320.tcc"
> *DecodeOpNOT_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96411 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96415 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96425 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96432 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96436 "isa_tms320.tcc"
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96444 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96448 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96451 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96455 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96458 "isa_tms320.tcc"
)
{
#line 2341 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NOT " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96475 "isa_tms320.tcc"
}
//    not(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96493 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96497 "isa_tms320.tcc"
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96505 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96509 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96512 "isa_tms320.tcc"
)
{
#line 2421 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of NOT
		uint32_t result = ~src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NOT in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 96561 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96577 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96586 "isa_tms320.tcc"
> *DecodeOpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96592 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96596 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT || STI (complement value and store integer)
**********************************************************/
/**********************************************************
* OR3 || STI (bitwise-logical OR value and store integer)
* op OR3_STI(0b11[2]:0b10100[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96619 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96623 "isa_tms320.tcc"
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96631 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96635 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96638 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96642 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96645 "isa_tms320.tcc"
)
{
#line 2478 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96664 "isa_tms320.tcc"
}
//    reg(src1) OR indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96682 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96686 "isa_tms320.tcc"
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96694 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96698 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96701 "isa_tms320.tcc"
)
{
#line 2512 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of OR3
		uint32_t result = src1_value | src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 96767 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96783 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96792 "isa_tms320.tcc"
> *DecodeOpOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96798 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96802 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96819 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96823 "isa_tms320.tcc"
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96831 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96835 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96838 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96842 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96845 "isa_tms320.tcc"
)
{
#line 2494 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96863 "isa_tms320.tcc"
}
//    reg(src1) OR reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96878 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96881 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96885 "isa_tms320.tcc"
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96893 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96897 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96900 "isa_tms320.tcc"
)
{
#line 2578 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of OR3
		uint32_t result = src1_value | src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 96952 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96968 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96977 "isa_tms320.tcc"
> *DecodeOpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96983 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96987 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 || STI (bitwise-logical OR value and store integer)
**********************************************************/
/**********************************************************
* STF || STF (store floating-point values)
* op STF_STF(0b11[2]:0b00000[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97010 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97014 "isa_tms320.tcc"
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 97018 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97022 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97026 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97029 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97033 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97036 "isa_tms320.tcc"
)
{
#line 2638 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "STF " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 97054 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97069 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97073 "isa_tms320.tcc"
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 97077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97081 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97085 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97088 "isa_tms320.tcc"
)
{
#line 2667 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97095 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97111 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97120 "isa_tms320.tcc"
> *DecodeOpSTF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97126 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97130 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97147 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97151 "isa_tms320.tcc"
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97159 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97163 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97166 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97170 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97173 "isa_tms320.tcc"
)
{
#line 2653 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STF " << src2_name << ", " << dst2_name
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 97190 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97205 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97209 "isa_tms320.tcc"
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97217 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97221 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97224 "isa_tms320.tcc"
)
{
#line 2671 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97231 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97247 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97256 "isa_tms320.tcc"
> *DecodeOpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97262 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97266 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF || STF (store floating-point values)
**********************************************************/
/**********************************************************
* STI || STI (store integers)
* op STI_STI(0b11[2]:0b00001[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97289 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97293 "isa_tms320.tcc"
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 97297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97301 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97305 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97308 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97312 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97315 "isa_tms320.tcc"
)
{
#line 2686 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "STI " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 97333 "isa_tms320.tcc"
}
//    reg(src2) -> indir(dst2)
// ||
//    reg(src1) -> indir(dst1)
template <
#line 45 "isa/tms320.isa"
class
#line 97341 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97351 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97355 "isa_tms320.tcc"
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 97359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97363 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97367 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97370 "isa_tms320.tcc"
)
{
#line 2718 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read the 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst1'
		typename CONFIG::address_t d1_ea;        // The effective address
		bool d1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d1_ea, d1_update_ar, d1_output_ar, d1_mod, d1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst2'
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src2_value);

		// Note: If both stores are executed to the
		// same address, the value written is that of STI src2, dst2.

		// Store the word into memory
		if(d1_ea != d2_ea)
		{
			cpu.IntStore(d1_ea, src1_value);
		}

		if(d1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d1_ar, d1_output_ar);
		}

		if(d2_update_ar && d1_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}
	}
#line 97425 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97441 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97446 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97450 "isa_tms320.tcc"
> *DecodeOpSTI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97456 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97460 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97467 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97474 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97477 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97481 "isa_tms320.tcc"
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97489 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97493 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97496 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97500 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97503 "isa_tms320.tcc"
)
{
#line 2701 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STI " << src2_name << ", " << dst2_name
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 97520 "isa_tms320.tcc"
}
//    reg(src2) -> reg(dst2)
// ||
//    reg(src1) -> indir(dst1)
template <
#line 45 "isa/tms320.isa"
class
#line 97528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97538 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97542 "isa_tms320.tcc"
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97550 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97554 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97557 "isa_tms320.tcc"
)
{
#line 2773 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'dst2' register is valid
		if(unlikely(!cpu.HasReg(dst2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst1'
		typename CONFIG::address_t d1_ea;        // The effective address
		bool d1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d1_ea, d1_update_ar, d1_output_ar, d1_mod, d1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(d1_ea, src1_value);

		// Write back 'src2' into 'dst2' register
		cpu.SetReg(dst2, src2_value);

		if(d1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d1_ar, d1_output_ar);
		}
	}
#line 97596 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97602 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97612 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97621 "isa_tms320.tcc"
> *DecodeOpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97627 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97631 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI || STI (sotre integers)
**********************************************************/
/**********************************************************
* SUBF3 || STF (subtract floating-point value and store floating-point value)
* op SUBF3_STF(0b11[2]:0b10101[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97654 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97658 "isa_tms320.tcc"
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 97662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97666 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97670 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97673 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97680 "isa_tms320.tcc"
)
{
#line 2820 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "SUBF3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 97699 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97714 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97718 "isa_tms320.tcc"
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 97722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97726 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97730 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97733 "isa_tms320.tcc"
)
{
#line 2851 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97740 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97756 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97765 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97771 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97775 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97792 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97796 "isa_tms320.tcc"
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97804 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97808 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97811 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97815 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97818 "isa_tms320.tcc"
)
{
#line 2836 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBF3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 97836 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97851 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97855 "isa_tms320.tcc"
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97863 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97867 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97870 "isa_tms320.tcc"
)
{
#line 2855 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97877 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97893 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97902 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97908 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97912 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 || STF (subtract floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* SUBI3 || STI (subtract integer and store integer)
* op SUBI3_STI(0b11[2]:0b10110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97935 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97939 "isa_tms320.tcc"
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 97943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97947 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97951 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97954 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97958 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97961 "isa_tms320.tcc"
)
{
#line 2870 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "SUBI3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 97980 "isa_tms320.tcc"
}
//    indir(src2) - reg(src1)  -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 97988 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97998 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98002 "isa_tms320.tcc"
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 98006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98010 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98014 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98017 "isa_tms320.tcc"
)
{
#line 2904 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of SUBI3
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src2_value, src1_value, 0);
		else
		Sub32(result, borrow_out, overflow, src2_value, src1_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 98093 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98109 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98118 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98124 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98128 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98145 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98149 "isa_tms320.tcc"
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98157 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98161 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98164 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98168 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98171 "isa_tms320.tcc"
)
{
#line 2886 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBI3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 98189 "isa_tms320.tcc"
}
//    reg(src2) - reg(src1) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 98197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98207 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98211 "isa_tms320.tcc"
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98219 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98223 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98226 "isa_tms320.tcc"
)
{
#line 2980 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of SUBI3
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src2_value, src1_value, 0);
		else
		Sub32(result, borrow_out, overflow, src2_value, src1_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 98292 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98308 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98317 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98323 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98327 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 || STI (subtract integer and store integer)
**********************************************************/
/**********************************************************
* XOR3 || STI (bitwise-exclusive OR values and store integer)
* op XOR3_STI(0b11[2]:0b10111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 98340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98350 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98354 "isa_tms320.tcc"
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 98358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98362 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98366 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98369 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98373 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98376 "isa_tms320.tcc"
)
{
#line 3054 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 98395 "isa_tms320.tcc"
}
//    reg(src1) XOR indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 98403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98413 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98417 "isa_tms320.tcc"
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 98421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98425 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98429 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98432 "isa_tms320.tcc"
)
{
#line 3088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of XORI3
		uint32_t result = src1_value ^ src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 98498 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98514 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98523 "isa_tms320.tcc"
> *DecodeOpXOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98529 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98533 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98550 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98554 "isa_tms320.tcc"
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98562 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98566 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98569 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98573 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98576 "isa_tms320.tcc"
)
{
#line 3070 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 98594 "isa_tms320.tcc"
}
//    reg(src1) XOR reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 98602 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98612 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98616 "isa_tms320.tcc"
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98624 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98628 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98631 "isa_tms320.tcc"
)
{
#line 3154 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of XORI3
		uint32_t result = src1_value ^ src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 98683 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98699 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98708 "isa_tms320.tcc"
> *DecodeOpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98714 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98718 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 || STI (bitwise-exclusive OR values and store integer)
**********************************************************/
/**********************************************************
* LDF || LDF (load floating-point value)
* op LDF_LDF(0b11[2]:0b00010[5]:dst2[3]:dst1[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 98731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98741 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98745 "isa_tms320.tcc"
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 98749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98753 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98757 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98760 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98764 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98767 "isa_tms320.tcc"
)
{
#line 3214 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 98785 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 98790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98800 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98804 "isa_tms320.tcc"
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 98808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98812 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98816 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98819 "isa_tms320.tcc"
)
{
#line 3243 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Load the 'src2' operand value from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Write back register operand 'dst2'
		Register &dst2_reg = cpu.GetExtReg(dst2);
		dst2_reg.SetFromSinglePrecisionFPFormat(src2_value);

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			Register &dst1_reg = cpu.GetExtReg(dst1);
			// from experiments on the development board, uncomprehensibly src1 is not correctly
			//   transformed to a valid 0.0 when the src1 exponent is 0x80
			// this behavior can be fixed in the simulator disabling the enable-parallel-load-bug
			if (cpu.EnableParallelLoadBug())
			{
				if ((src1_value & (uint32_t)0xff000000) == (uint32_t)0x80000000)
				{
					dst1_reg.SetHi((uint8_t)0x80);
					dst1_reg.SetLo((src1_value & (uint32_t)0x00ffffff) << 8);
				}
				else
				{
					dst1_reg.SetFromSinglePrecisionFPFormat(src1_value);
				}
			}
			else
			{
				dst1_reg.SetFromSinglePrecisionFPFormat(src1_value);
			}
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}

		if(s2_update_ar && s1_ar != s2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}
	}
#line 98891 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98907 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98916 "isa_tms320.tcc"
> *DecodeOpLDF_LDF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98922 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98926 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98943 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98947 "isa_tms320.tcc"
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98955 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98959 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98962 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98966 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98969 "isa_tms320.tcc"
)
{
#line 3229 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar))
		return false;

		os << "LDF " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 98986 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 98991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99001 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 99005 "isa_tms320.tcc"
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 99009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99013 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99017 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99020 "isa_tms320.tcc"
)
{
#line 3312 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// NOTE: no need to check for valid src2, the opcode already checks it

		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Read the 'src2' register operand value
		Register &src2_reg = cpu.GetExtReg(src2);

		// Note: The assembler issues a warning
		// if the LDIs load the same register.
		// The result is that of LDI src2, dst2 (pp 13-129).

		// Write back register operand 'dst2'
		Register &dst2_reg = cpu.GetExtReg(dst2);
		dst2_reg = src2_reg;

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			Register &dst1_reg = cpu.GetExtReg(dst1);
			// from experiments on the development board, uncomprehensibly src1 is not correctly
			//   transformed to a valid 0.0 when the src1 exponent is 0x80
			// this behavior can be fixed in the simulator disabling the enable-parallel-load-bug
			if (cpu.EnableParallelLoadBug())
			{
				if ((src1_value & (uint32_t)0xff000000) == (uint32_t)0x80000000)
				{
					dst1_reg.SetHi((uint8_t)0x80);
					dst1_reg.SetLo((src1_value & (uint32_t)0x00ffffff) << 8);
				}
				else
				{
					dst1_reg.SetFromSinglePrecisionFPFormat(src1_value);
				}
			}
			else
			{
				dst1_reg.SetFromSinglePrecisionFPFormat(src1_value);
			}
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}
	}
#line 99082 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 99088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99098 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99107 "isa_tms320.tcc"
> *DecodeOpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 99113 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 99117 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || LDF (load floating-point value)
**********************************************************/
/**********************************************************
* LDI || LDI (load integer)
* op LDI_LDI(0b11[2]:0b00011[5]:dst2[3]:dst1[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 99130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99140 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 99144 "isa_tms320.tcc"
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 99148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99152 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99156 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99159 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 99163 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 99166 "isa_tms320.tcc"
)
{
#line 3382 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 99184 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 99189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99199 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 99203 "isa_tms320.tcc"
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 99207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99211 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99215 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99218 "isa_tms320.tcc"
)
{
#line 3411 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Load the 'src2' operand value from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Write back register operand 'dst2'
		cpu.SetReg(dst2, src2_value);

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			cpu.SetReg(dst1, src1_value);
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}

		if(s2_update_ar && s1_ar != s2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}
	}
#line 99270 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 99276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99286 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99295 "isa_tms320.tcc"
> *DecodeOpLDI_LDI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 99301 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 99305 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99322 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 99326 "isa_tms320.tcc"
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 99330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99334 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99338 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99341 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 99345 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 99348 "isa_tms320.tcc"
)
{
#line 3397 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar))
		return false;

		os << "LDI " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 99365 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 99370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99380 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 99384 "isa_tms320.tcc"
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 99388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99392 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99396 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99399 "isa_tms320.tcc"
)
{
#line 3460 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Read the 'src2' register operand value
		uint32_t src2_value = cpu.GetReg(src2);

		// Note: The assembler issues a warning
		// if the LDIs load the same register.
		// The result is that of LDI src2, dst2 (pp 13-129).

		// Write back register operand 'dst2'
		cpu.SetReg(dst2, src2_value);

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			cpu.SetReg(dst1, src1_value);
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}
	}
#line 99445 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 99451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99461 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99470 "isa_tms320.tcc"
> *DecodeOpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 99476 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 99480 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || LDI (load integer)
**********************************************************/
/**********************************************************
* MPYF3 || ADDF3 (multiply and add floating-point value)
* op MPYF3_ADDF3(0b10[2]:0b0000[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 99493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99503 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 99507 "isa_tms320.tcc"
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 99511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99515 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99519 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99522 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 99526 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 99529 "isa_tms320.tcc"
)
{
#line 3514 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 99581 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 99586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99596 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 99600 "isa_tms320.tcc"
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 99604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99608 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99612 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99615 "isa_tms320.tcc"
)
{
#line 3612 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 99622 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 99628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99638 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99647 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 99653 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 99657 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99674 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 99678 "isa_tms320.tcc"
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 99682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99686 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99693 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 99697 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 99700 "isa_tms320.tcc"
)
{
#line 3563 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 99752 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 99757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99767 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 99771 "isa_tms320.tcc"
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 99775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99779 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99783 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99786 "isa_tms320.tcc"
)
{
#line 3616 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 99793 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 99799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99809 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99818 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 99824 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 99828 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || ADDF3 (multiply and add floating-point value)
**********************************************************/
/**********************************************************
* MPYF3 || SUBF3 (multiply and subtract floating-point value)
* op MPYF3_SUBF3(0b10[2]:0b0001[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 99841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99851 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 99855 "isa_tms320.tcc"
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 99859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99863 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99867 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99870 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 99874 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 99877 "isa_tms320.tcc"
)
{
#line 3631 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 99929 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 99934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99944 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 99948 "isa_tms320.tcc"
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 99952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99956 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 99960 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 99963 "isa_tms320.tcc"
)
{
#line 3729 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 99970 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 99976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99986 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99995 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 100001 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 100005 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100022 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 100026 "isa_tms320.tcc"
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 100030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100034 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 100038 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 100041 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 100045 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 100048 "isa_tms320.tcc"
)
{
#line 3680 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 100100 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 100105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100112 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100115 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 100119 "isa_tms320.tcc"
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 100123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100127 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 100131 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 100134 "isa_tms320.tcc"
)
{
#line 3733 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 100141 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 100147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100157 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100166 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 100172 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 100176 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || SUBF3 (multiply and subtract floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || ADDI3 (multiply and add integer)
* op MPYI3_ADDI3(0b10[2]:0b0010[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 100189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100199 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 100203 "isa_tms320.tcc"
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 100207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100211 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 100215 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 100218 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 100222 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 100225 "isa_tms320.tcc"
)
{
#line 3748 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 100277 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 100285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100295 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 100299 "isa_tms320.tcc"
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 100303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100307 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 100311 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 100314 "isa_tms320.tcc"
)
{
#line 3849 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of 'src3' operand
		typename CONFIG::address_t s3_ea;        // The effective address
		bool s3_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s3_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s3_ea, s3_update_ar, s3_output_ar, s3_mod, s3_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src4' operand
		typename CONFIG::address_t s4_ea;        // The effective address
		bool s4_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s4_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s4_ea, s4_update_ar, s4_output_ar, s4_mod, s4_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load 'src3' operand from memory
		uint32_t src3_value = cpu.IntLoad(s3_ea);

		// Load 'src4' operand from memory
		uint32_t src4_value = cpu.IntLoad(s4_ea);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of ADDI3
		uint32_t addi3_result;      // the 32-bit result
		uint8_t addi3_carry_out;    // the carry out (0 or 1)
		uint8_t addi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);
		else
		Add32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and ADDI3
		uint8_t overflow = mpyi3_overflow | addi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, addi3_result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(s3_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s3_ar, s3_output_ar);
		}

		if(s4_update_ar && s4_ar != s4_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s4_ar, s4_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 100448 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 100454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100464 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100473 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 100479 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 100483 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100500 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 100504 "isa_tms320.tcc"
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 100508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100512 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 100516 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 100519 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 100523 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 100526 "isa_tms320.tcc"
)
{
#line 3797 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 100578 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 100586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100596 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 100600 "isa_tms320.tcc"
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 100604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100608 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 100612 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 100615 "isa_tms320.tcc"
)
{
#line 3983 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src3' and 'src4' are valid registers
		if(unlikely(!cpu.HasReg(src3) || !cpu.HasReg(src4)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read 'src4' register operand
		uint32_t src4_value = cpu.GetReg(src4);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of ADDI3
		uint32_t addi3_result;      // the 32-bit result
		uint8_t addi3_carry_out;    // the carry out (0 or 1)
		uint8_t addi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);
		else
		Add32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and ADDI3
		uint8_t overflow = mpyi3_overflow | addi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, addi3_result);

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 100719 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 100725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100735 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100744 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 100750 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 100754 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || ADDI3 (multiply and add integer)
**********************************************************/
/**********************************************************
* MPYI3 || SUBI3 (multiply and subtract integer)
* op MPYI3_SUBI3(0b10[2]:0b0011[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 100767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100777 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 100781 "isa_tms320.tcc"
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 100785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100789 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 100793 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 100796 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 100800 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 100803 "isa_tms320.tcc"
)
{
#line 4095 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 100855 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 100863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100873 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 100877 "isa_tms320.tcc"
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 100881 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100885 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 100889 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 100892 "isa_tms320.tcc"
)
{
#line 4196 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of 'src3' operand
		typename CONFIG::address_t s3_ea;        // The effective address
		bool s3_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s3_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s3_ea, s3_update_ar, s3_output_ar, s3_mod, s3_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src4' operand
		typename CONFIG::address_t s4_ea;        // The effective address
		bool s4_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s4_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s4_ea, s4_update_ar, s4_output_ar, s4_mod, s4_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load 'src3' operand from memory
		uint32_t src3_value = cpu.IntLoad(s3_ea);

		// Load 'src4' operand from memory
		uint32_t src4_value = cpu.IntLoad(s4_ea);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of SUBI3
		uint32_t subi3_result;      // the 32-bit result
		uint8_t subi3_borrow_out;   // the borrow out (0 or 1)
		uint8_t subi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);
		else
		Sub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and SUBI3
		uint8_t overflow = mpyi3_overflow | subi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, subi3_result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(s3_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s3_ar, s3_output_ar);
		}

		if(s4_update_ar && s4_ar != s4_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s4_ar, s4_output_ar);
		}

		// FIXME: Don't known how to generate the underflow flag

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_UF | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 101028 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 101034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101044 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101053 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 101059 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 101063 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101080 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 101084 "isa_tms320.tcc"
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 101088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101092 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 101096 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 101099 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 101103 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 101106 "isa_tms320.tcc"
)
{
#line 4144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 101158 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 101166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101176 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 101180 "isa_tms320.tcc"
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 101184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101188 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 101192 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 101195 "isa_tms320.tcc"
)
{
#line 4332 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src3' and 'src4' are valid registers
		if(unlikely(!cpu.HasReg(src3) || !cpu.HasReg(src4)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read 'src4' register operand
		uint32_t src4_value = cpu.GetReg(src4);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of SUBI3
		uint32_t subi3_result;      // the 32-bit result
		uint8_t subi3_borrow_out;   // the borrow out (0 or 1)
		uint8_t subi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);
		else
		Sub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and SUBI3
		uint8_t overflow = mpyi3_overflow | subi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, subi3_result);

		// FIXME: Don't known how to generate the underflow flag

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_UF | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 101301 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 101307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101317 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101326 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 101332 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 101336 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101353 "isa_tms320.tcc"
>
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101362 "isa_tms320.tcc"
>::OpLDE_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101370 "isa_tms320.tcc"
>(code, addr, "LDE_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101390 "isa_tms320.tcc"
>
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101399 "isa_tms320.tcc"
>::OpLDE_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101407 "isa_tms320.tcc"
>(code, addr, "LDE_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101427 "isa_tms320.tcc"
>
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101436 "isa_tms320.tcc"
>::OpLDE_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101444 "isa_tms320.tcc"
>(code, addr, "LDE_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101466 "isa_tms320.tcc"
>
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101475 "isa_tms320.tcc"
>::OpLDE_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101479 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101483 "isa_tms320.tcc"
>(code, addr, "LDE_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101503 "isa_tms320.tcc"
>
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101512 "isa_tms320.tcc"
>::OpLDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101520 "isa_tms320.tcc"
>(code, addr, "LDF_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101540 "isa_tms320.tcc"
>
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101549 "isa_tms320.tcc"
>::OpLDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101557 "isa_tms320.tcc"
>(code, addr, "LDF_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101577 "isa_tms320.tcc"
>
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101586 "isa_tms320.tcc"
>::OpLDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101594 "isa_tms320.tcc"
>(code, addr, "LDF_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101616 "isa_tms320.tcc"
>
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101625 "isa_tms320.tcc"
>::OpLDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101633 "isa_tms320.tcc"
>(code, addr, "LDF_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101653 "isa_tms320.tcc"
>
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101662 "isa_tms320.tcc"
>::OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101670 "isa_tms320.tcc"
>(code, addr, "LDFcond_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x7);
	cond = ((code >> 23) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101691 "isa_tms320.tcc"
>
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101700 "isa_tms320.tcc"
>::OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101708 "isa_tms320.tcc"
>(code, addr, "LDFcond_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
	cond = ((code >> 23) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101729 "isa_tms320.tcc"
>
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101738 "isa_tms320.tcc"
>::OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101746 "isa_tms320.tcc"
>(code, addr, "LDFcond_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
	cond = ((code >> 23) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101769 "isa_tms320.tcc"
>
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101778 "isa_tms320.tcc"
>::OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101786 "isa_tms320.tcc"
>(code, addr, "LDFcond_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
	cond = ((code >> 23) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101807 "isa_tms320.tcc"
>
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101816 "isa_tms320.tcc"
>::OpLDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101824 "isa_tms320.tcc"
>(code, addr, "LDI_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101844 "isa_tms320.tcc"
>
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101853 "isa_tms320.tcc"
>::OpLDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101861 "isa_tms320.tcc"
>(code, addr, "LDI_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101878 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101881 "isa_tms320.tcc"
>
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101890 "isa_tms320.tcc"
>::OpLDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101898 "isa_tms320.tcc"
>(code, addr, "LDI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101920 "isa_tms320.tcc"
>
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101929 "isa_tms320.tcc"
>::OpLDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101937 "isa_tms320.tcc"
>(code, addr, "LDI_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101957 "isa_tms320.tcc"
>
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101966 "isa_tms320.tcc"
>::OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101974 "isa_tms320.tcc"
>(code, addr, "LDIcond_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	cond = ((code >> 23) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101985 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101995 "isa_tms320.tcc"
>
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102004 "isa_tms320.tcc"
>::OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102012 "isa_tms320.tcc"
>(code, addr, "LDIcond_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
	cond = ((code >> 23) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102033 "isa_tms320.tcc"
>
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102042 "isa_tms320.tcc"
>::OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102050 "isa_tms320.tcc"
>(code, addr, "LDIcond_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	cond = ((code >> 23) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102073 "isa_tms320.tcc"
>
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102082 "isa_tms320.tcc"
>::OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102090 "isa_tms320.tcc"
>(code, addr, "LDIcond_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
	cond = ((code >> 23) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102111 "isa_tms320.tcc"
>
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102120 "isa_tms320.tcc"
>::OpLDM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102128 "isa_tms320.tcc"
>(code, addr, "LDM_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102148 "isa_tms320.tcc"
>
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102157 "isa_tms320.tcc"
>::OpLDM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102165 "isa_tms320.tcc"
>(code, addr, "LDM_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102185 "isa_tms320.tcc"
>
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102194 "isa_tms320.tcc"
>::OpLDM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102202 "isa_tms320.tcc"
>(code, addr, "LDM_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102224 "isa_tms320.tcc"
>
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102233 "isa_tms320.tcc"
>::OpLDM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102241 "isa_tms320.tcc"
>(code, addr, "LDM_imm")
{
	imm = ((code >> 0) & 0xfff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102261 "isa_tms320.tcc"
>
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 102266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102270 "isa_tms320.tcc"
>::OpLDP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102278 "isa_tms320.tcc"
>(code, addr, "LDP")
{
	src = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102297 "isa_tms320.tcc"
>
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 102302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102306 "isa_tms320.tcc"
>::OpPOP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102314 "isa_tms320.tcc"
>(code, addr, "POP")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102333 "isa_tms320.tcc"
>
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 102338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102342 "isa_tms320.tcc"
>::OpPOPF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102350 "isa_tms320.tcc"
>(code, addr, "POPF")
{
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102359 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102366 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102369 "isa_tms320.tcc"
>
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 102374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102378 "isa_tms320.tcc"
>::OpPUSH(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102386 "isa_tms320.tcc"
>(code, addr, "PUSH")
{
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102405 "isa_tms320.tcc"
>
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 102410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102414 "isa_tms320.tcc"
>::OpPUSHF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102422 "isa_tms320.tcc"
>(code, addr, "PUSHF")
{
	src = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102441 "isa_tms320.tcc"
>
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102446 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102450 "isa_tms320.tcc"
>::OpSTF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102458 "isa_tms320.tcc"
>(code, addr, "STF_dir")
{
	direct = ((code >> 0) & 0xffff);
	src = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102478 "isa_tms320.tcc"
>
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102487 "isa_tms320.tcc"
>::OpSTF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102495 "isa_tms320.tcc"
>(code, addr, "STF_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	src = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102517 "isa_tms320.tcc"
>
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102526 "isa_tms320.tcc"
>::OpSTI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102534 "isa_tms320.tcc"
>(code, addr, "STI_dir")
{
	direct = ((code >> 0) & 0xffff);
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102554 "isa_tms320.tcc"
>
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102563 "isa_tms320.tcc"
>::OpSTI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102571 "isa_tms320.tcc"
>(code, addr, "STI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102593 "isa_tms320.tcc"
>
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102602 "isa_tms320.tcc"
>::OpABSF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102610 "isa_tms320.tcc"
>(code, addr, "ABSF_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102630 "isa_tms320.tcc"
>
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102639 "isa_tms320.tcc"
>::OpABSF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102647 "isa_tms320.tcc"
>(code, addr, "ABSF_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102667 "isa_tms320.tcc"
>
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102676 "isa_tms320.tcc"
>::OpABSF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102684 "isa_tms320.tcc"
>(code, addr, "ABSF_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102706 "isa_tms320.tcc"
>
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102715 "isa_tms320.tcc"
>::OpABSF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102723 "isa_tms320.tcc"
>(code, addr, "ABSF_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102743 "isa_tms320.tcc"
>
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102752 "isa_tms320.tcc"
>::OpABSI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102760 "isa_tms320.tcc"
>(code, addr, "ABSI_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102780 "isa_tms320.tcc"
>
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102789 "isa_tms320.tcc"
>::OpABSI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102797 "isa_tms320.tcc"
>(code, addr, "ABSI_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102817 "isa_tms320.tcc"
>
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102826 "isa_tms320.tcc"
>::OpABSI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102834 "isa_tms320.tcc"
>(code, addr, "ABSI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102856 "isa_tms320.tcc"
>
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102865 "isa_tms320.tcc"
>::OpABSI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102873 "isa_tms320.tcc"
>(code, addr, "ABSI_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102893 "isa_tms320.tcc"
>
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102902 "isa_tms320.tcc"
>::OpADDC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102910 "isa_tms320.tcc"
>(code, addr, "ADDC_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102930 "isa_tms320.tcc"
>
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102939 "isa_tms320.tcc"
>::OpADDC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102947 "isa_tms320.tcc"
>(code, addr, "ADDC_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102957 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102967 "isa_tms320.tcc"
>
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102976 "isa_tms320.tcc"
>::OpADDC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102984 "isa_tms320.tcc"
>(code, addr, "ADDC_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102996 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103003 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103006 "isa_tms320.tcc"
>
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103011 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103015 "isa_tms320.tcc"
>::OpADDC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103023 "isa_tms320.tcc"
>(code, addr, "ADDC_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103043 "isa_tms320.tcc"
>
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103052 "isa_tms320.tcc"
>::OpADDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103060 "isa_tms320.tcc"
>(code, addr, "ADDF_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103080 "isa_tms320.tcc"
>
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103089 "isa_tms320.tcc"
>::OpADDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103097 "isa_tms320.tcc"
>(code, addr, "ADDF_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103117 "isa_tms320.tcc"
>
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103126 "isa_tms320.tcc"
>::OpADDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103130 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103134 "isa_tms320.tcc"
>(code, addr, "ADDF_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103156 "isa_tms320.tcc"
>
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103165 "isa_tms320.tcc"
>::OpADDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103173 "isa_tms320.tcc"
>(code, addr, "ADDF_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103193 "isa_tms320.tcc"
>
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103202 "isa_tms320.tcc"
>::OpADDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103210 "isa_tms320.tcc"
>(code, addr, "ADDI_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103230 "isa_tms320.tcc"
>
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103239 "isa_tms320.tcc"
>::OpADDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103247 "isa_tms320.tcc"
>(code, addr, "ADDI_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103257 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103267 "isa_tms320.tcc"
>
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103276 "isa_tms320.tcc"
>::OpADDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103284 "isa_tms320.tcc"
>(code, addr, "ADDI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103306 "isa_tms320.tcc"
>
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103315 "isa_tms320.tcc"
>::OpADDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103323 "isa_tms320.tcc"
>(code, addr, "ADDI_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103343 "isa_tms320.tcc"
>
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103352 "isa_tms320.tcc"
>::OpAND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103360 "isa_tms320.tcc"
>(code, addr, "AND_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103380 "isa_tms320.tcc"
>
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103389 "isa_tms320.tcc"
>::OpAND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103397 "isa_tms320.tcc"
>(code, addr, "AND_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103417 "isa_tms320.tcc"
>
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103426 "isa_tms320.tcc"
>::OpAND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103434 "isa_tms320.tcc"
>(code, addr, "AND_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103456 "isa_tms320.tcc"
>
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103465 "isa_tms320.tcc"
>::OpAND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103473 "isa_tms320.tcc"
>(code, addr, "AND_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103493 "isa_tms320.tcc"
>
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103502 "isa_tms320.tcc"
>::OpANDN_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103506 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103510 "isa_tms320.tcc"
>(code, addr, "ANDN_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103530 "isa_tms320.tcc"
>
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103539 "isa_tms320.tcc"
>::OpANDN_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103547 "isa_tms320.tcc"
>(code, addr, "ANDN_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103564 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103567 "isa_tms320.tcc"
>
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103576 "isa_tms320.tcc"
>::OpANDN_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103584 "isa_tms320.tcc"
>(code, addr, "ANDN_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103606 "isa_tms320.tcc"
>
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103615 "isa_tms320.tcc"
>::OpANDN_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103623 "isa_tms320.tcc"
>(code, addr, "ANDN_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103643 "isa_tms320.tcc"
>
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103652 "isa_tms320.tcc"
>::OpASH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103660 "isa_tms320.tcc"
>(code, addr, "ASH_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103670 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103677 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103680 "isa_tms320.tcc"
>
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103689 "isa_tms320.tcc"
>::OpASH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103693 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103697 "isa_tms320.tcc"
>(code, addr, "ASH_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103717 "isa_tms320.tcc"
>
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103726 "isa_tms320.tcc"
>::OpASH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103734 "isa_tms320.tcc"
>(code, addr, "ASH_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103756 "isa_tms320.tcc"
>
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103765 "isa_tms320.tcc"
>::OpASH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103773 "isa_tms320.tcc"
>(code, addr, "ASH_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103793 "isa_tms320.tcc"
>
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103802 "isa_tms320.tcc"
>::OpCMPF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103810 "isa_tms320.tcc"
>(code, addr, "CMPF_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103830 "isa_tms320.tcc"
>
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103839 "isa_tms320.tcc"
>::OpCMPF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103847 "isa_tms320.tcc"
>(code, addr, "CMPF_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103867 "isa_tms320.tcc"
>
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103876 "isa_tms320.tcc"
>::OpCMPF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103884 "isa_tms320.tcc"
>(code, addr, "CMPF_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103906 "isa_tms320.tcc"
>
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103915 "isa_tms320.tcc"
>::OpCMPF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103923 "isa_tms320.tcc"
>(code, addr, "CMPF_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103943 "isa_tms320.tcc"
>
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103952 "isa_tms320.tcc"
>::OpCMPI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103960 "isa_tms320.tcc"
>(code, addr, "CMPI_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103980 "isa_tms320.tcc"
>
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103989 "isa_tms320.tcc"
>::OpCMPI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103997 "isa_tms320.tcc"
>(code, addr, "CMPI_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104017 "isa_tms320.tcc"
>
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104026 "isa_tms320.tcc"
>::OpCMPI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104034 "isa_tms320.tcc"
>(code, addr, "CMPI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104056 "isa_tms320.tcc"
>
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104061 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104065 "isa_tms320.tcc"
>::OpCMPI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104073 "isa_tms320.tcc"
>(code, addr, "CMPI_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104093 "isa_tms320.tcc"
>
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104102 "isa_tms320.tcc"
>::OpFIX_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104110 "isa_tms320.tcc"
>(code, addr, "FIX_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104127 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104130 "isa_tms320.tcc"
>
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104139 "isa_tms320.tcc"
>::OpFIX_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104147 "isa_tms320.tcc"
>(code, addr, "FIX_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104167 "isa_tms320.tcc"
>
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104176 "isa_tms320.tcc"
>::OpFIX_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104184 "isa_tms320.tcc"
>(code, addr, "FIX_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104206 "isa_tms320.tcc"
>
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104215 "isa_tms320.tcc"
>::OpFIX_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104223 "isa_tms320.tcc"
>(code, addr, "FIX_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104243 "isa_tms320.tcc"
>
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104252 "isa_tms320.tcc"
>::OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104260 "isa_tms320.tcc"
>(code, addr, "FLOAT_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104280 "isa_tms320.tcc"
>
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104289 "isa_tms320.tcc"
>::OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104297 "isa_tms320.tcc"
>(code, addr, "FLOAT_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104317 "isa_tms320.tcc"
>
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104326 "isa_tms320.tcc"
>::OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104334 "isa_tms320.tcc"
>(code, addr, "FLOAT_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104356 "isa_tms320.tcc"
>
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104365 "isa_tms320.tcc"
>::OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104373 "isa_tms320.tcc"
>(code, addr, "FLOAT_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104393 "isa_tms320.tcc"
>
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104402 "isa_tms320.tcc"
>::OpLSH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104410 "isa_tms320.tcc"
>(code, addr, "LSH_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104430 "isa_tms320.tcc"
>
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104439 "isa_tms320.tcc"
>::OpLSH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104447 "isa_tms320.tcc"
>(code, addr, "LSH_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104467 "isa_tms320.tcc"
>
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104476 "isa_tms320.tcc"
>::OpLSH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104484 "isa_tms320.tcc"
>(code, addr, "LSH_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104506 "isa_tms320.tcc"
>
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104515 "isa_tms320.tcc"
>::OpLSH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104523 "isa_tms320.tcc"
>(code, addr, "LSH_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0x7f) << 25) >> 25);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104543 "isa_tms320.tcc"
>
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104552 "isa_tms320.tcc"
>::OpMPYF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104560 "isa_tms320.tcc"
>(code, addr, "MPYF_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104580 "isa_tms320.tcc"
>
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104589 "isa_tms320.tcc"
>::OpMPYF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104597 "isa_tms320.tcc"
>(code, addr, "MPYF_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104617 "isa_tms320.tcc"
>
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104626 "isa_tms320.tcc"
>::OpMPYF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104634 "isa_tms320.tcc"
>(code, addr, "MPYF_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104653 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104656 "isa_tms320.tcc"
>
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104665 "isa_tms320.tcc"
>::OpMPYF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104673 "isa_tms320.tcc"
>(code, addr, "MPYF_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104693 "isa_tms320.tcc"
>
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104702 "isa_tms320.tcc"
>::OpMPYI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104710 "isa_tms320.tcc"
>(code, addr, "MPYI_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104730 "isa_tms320.tcc"
>
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104739 "isa_tms320.tcc"
>::OpMPYI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104747 "isa_tms320.tcc"
>(code, addr, "MPYI_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104767 "isa_tms320.tcc"
>
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104776 "isa_tms320.tcc"
>::OpMPYI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104784 "isa_tms320.tcc"
>(code, addr, "MPYI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104806 "isa_tms320.tcc"
>
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104815 "isa_tms320.tcc"
>::OpMPYI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104823 "isa_tms320.tcc"
>(code, addr, "MPYI_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104833 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104843 "isa_tms320.tcc"
>
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104852 "isa_tms320.tcc"
>::OpNEGB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104860 "isa_tms320.tcc"
>(code, addr, "NEGB_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104880 "isa_tms320.tcc"
>
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104889 "isa_tms320.tcc"
>::OpNEGB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104897 "isa_tms320.tcc"
>(code, addr, "NEGB_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104917 "isa_tms320.tcc"
>
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104926 "isa_tms320.tcc"
>::OpNEGB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104934 "isa_tms320.tcc"
>(code, addr, "NEGB_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104956 "isa_tms320.tcc"
>
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104965 "isa_tms320.tcc"
>::OpNEGB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104973 "isa_tms320.tcc"
>(code, addr, "NEGB_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104993 "isa_tms320.tcc"
>
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105002 "isa_tms320.tcc"
>::OpNEGF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105010 "isa_tms320.tcc"
>(code, addr, "NEGF_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105030 "isa_tms320.tcc"
>
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105039 "isa_tms320.tcc"
>::OpNEGF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105047 "isa_tms320.tcc"
>(code, addr, "NEGF_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105067 "isa_tms320.tcc"
>
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105076 "isa_tms320.tcc"
>::OpNEGF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105084 "isa_tms320.tcc"
>(code, addr, "NEGF_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105106 "isa_tms320.tcc"
>
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 105111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105115 "isa_tms320.tcc"
>::OpNEGF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105123 "isa_tms320.tcc"
>(code, addr, "NEGF_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105133 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105143 "isa_tms320.tcc"
>
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105152 "isa_tms320.tcc"
>::OpNEGI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105160 "isa_tms320.tcc"
>(code, addr, "NEGI_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105173 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105180 "isa_tms320.tcc"
>
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105189 "isa_tms320.tcc"
>::OpNEGI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105197 "isa_tms320.tcc"
>(code, addr, "NEGI_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105217 "isa_tms320.tcc"
>
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105226 "isa_tms320.tcc"
>::OpNEGI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105234 "isa_tms320.tcc"
>(code, addr, "NEGI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105256 "isa_tms320.tcc"
>
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 105261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105265 "isa_tms320.tcc"
>::OpNEGI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105273 "isa_tms320.tcc"
>(code, addr, "NEGI_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105293 "isa_tms320.tcc"
>
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105302 "isa_tms320.tcc"
>::OpNORM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105310 "isa_tms320.tcc"
>(code, addr, "NORM_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105330 "isa_tms320.tcc"
>
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105339 "isa_tms320.tcc"
>::OpNORM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105347 "isa_tms320.tcc"
>(code, addr, "NORM_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105367 "isa_tms320.tcc"
>
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105376 "isa_tms320.tcc"
>::OpNORM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105384 "isa_tms320.tcc"
>(code, addr, "NORM_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105406 "isa_tms320.tcc"
>
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 105411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105415 "isa_tms320.tcc"
>::OpNORM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105423 "isa_tms320.tcc"
>(code, addr, "NORM_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105443 "isa_tms320.tcc"
>
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105452 "isa_tms320.tcc"
>::OpNOT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105460 "isa_tms320.tcc"
>(code, addr, "NOT_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105473 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105480 "isa_tms320.tcc"
>
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105489 "isa_tms320.tcc"
>::OpNOT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105497 "isa_tms320.tcc"
>(code, addr, "NOT_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105517 "isa_tms320.tcc"
>
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105526 "isa_tms320.tcc"
>::OpNOT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105534 "isa_tms320.tcc"
>(code, addr, "NOT_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105556 "isa_tms320.tcc"
>
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 105561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105565 "isa_tms320.tcc"
>::OpNOT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105573 "isa_tms320.tcc"
>(code, addr, "NOT_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105593 "isa_tms320.tcc"
>
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105602 "isa_tms320.tcc"
>::OpOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105610 "isa_tms320.tcc"
>(code, addr, "OR_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105630 "isa_tms320.tcc"
>
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105639 "isa_tms320.tcc"
>::OpOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105647 "isa_tms320.tcc"
>(code, addr, "OR_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105667 "isa_tms320.tcc"
>
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105676 "isa_tms320.tcc"
>::OpOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105684 "isa_tms320.tcc"
>(code, addr, "OR_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105706 "isa_tms320.tcc"
>
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 105711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105715 "isa_tms320.tcc"
>::OpOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105723 "isa_tms320.tcc"
>(code, addr, "OR_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105743 "isa_tms320.tcc"
>
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105752 "isa_tms320.tcc"
>::OpRND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105760 "isa_tms320.tcc"
>(code, addr, "RND_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105780 "isa_tms320.tcc"
>
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105789 "isa_tms320.tcc"
>::OpRND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105797 "isa_tms320.tcc"
>(code, addr, "RND_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105817 "isa_tms320.tcc"
>
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105826 "isa_tms320.tcc"
>::OpRND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105834 "isa_tms320.tcc"
>(code, addr, "RND_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105856 "isa_tms320.tcc"
>
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 105861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105865 "isa_tms320.tcc"
>::OpRND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105873 "isa_tms320.tcc"
>(code, addr, "RND_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105893 "isa_tms320.tcc"
>
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 105898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105902 "isa_tms320.tcc"
>::OpROL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105910 "isa_tms320.tcc"
>(code, addr, "ROL")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105929 "isa_tms320.tcc"
>
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 105934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105938 "isa_tms320.tcc"
>::OpROLC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105946 "isa_tms320.tcc"
>(code, addr, "ROLC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105965 "isa_tms320.tcc"
>
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 105970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105974 "isa_tms320.tcc"
>::OpROR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105982 "isa_tms320.tcc"
>(code, addr, "ROR")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106001 "isa_tms320.tcc"
>
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 106006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106010 "isa_tms320.tcc"
>::OpRORC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106018 "isa_tms320.tcc"
>(code, addr, "RORC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106037 "isa_tms320.tcc"
>
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106046 "isa_tms320.tcc"
>::OpSUBB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106054 "isa_tms320.tcc"
>(code, addr, "SUBB_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106074 "isa_tms320.tcc"
>
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106083 "isa_tms320.tcc"
>::OpSUBB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106091 "isa_tms320.tcc"
>(code, addr, "SUBB_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106111 "isa_tms320.tcc"
>
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106120 "isa_tms320.tcc"
>::OpSUBB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106128 "isa_tms320.tcc"
>(code, addr, "SUBB_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106150 "isa_tms320.tcc"
>
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 106155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106159 "isa_tms320.tcc"
>::OpSUBB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106167 "isa_tms320.tcc"
>(code, addr, "SUBB_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106187 "isa_tms320.tcc"
>
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106196 "isa_tms320.tcc"
>::OpSUBC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106204 "isa_tms320.tcc"
>(code, addr, "SUBC_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106224 "isa_tms320.tcc"
>
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106233 "isa_tms320.tcc"
>::OpSUBC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106241 "isa_tms320.tcc"
>(code, addr, "SUBC_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106261 "isa_tms320.tcc"
>
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106270 "isa_tms320.tcc"
>::OpSUBC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106278 "isa_tms320.tcc"
>(code, addr, "SUBC_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106300 "isa_tms320.tcc"
>
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 106305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106309 "isa_tms320.tcc"
>::OpSUBC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106317 "isa_tms320.tcc"
>(code, addr, "SUBC_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106334 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106337 "isa_tms320.tcc"
>
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106346 "isa_tms320.tcc"
>::OpSUBF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106354 "isa_tms320.tcc"
>(code, addr, "SUBF_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106374 "isa_tms320.tcc"
>
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106383 "isa_tms320.tcc"
>::OpSUBF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106391 "isa_tms320.tcc"
>(code, addr, "SUBF_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106411 "isa_tms320.tcc"
>
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106420 "isa_tms320.tcc"
>::OpSUBF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106428 "isa_tms320.tcc"
>(code, addr, "SUBF_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106450 "isa_tms320.tcc"
>
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 106455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106459 "isa_tms320.tcc"
>::OpSUBF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106467 "isa_tms320.tcc"
>(code, addr, "SUBF_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106487 "isa_tms320.tcc"
>
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106496 "isa_tms320.tcc"
>::OpSUBI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106504 "isa_tms320.tcc"
>(code, addr, "SUBI_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106524 "isa_tms320.tcc"
>
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106533 "isa_tms320.tcc"
>::OpSUBI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106541 "isa_tms320.tcc"
>(code, addr, "SUBI_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106558 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106561 "isa_tms320.tcc"
>
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106570 "isa_tms320.tcc"
>::OpSUBI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106578 "isa_tms320.tcc"
>(code, addr, "SUBI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106600 "isa_tms320.tcc"
>
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 106605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106609 "isa_tms320.tcc"
>::OpSUBI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106617 "isa_tms320.tcc"
>(code, addr, "SUBI_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106637 "isa_tms320.tcc"
>
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106642 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106646 "isa_tms320.tcc"
>::OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106654 "isa_tms320.tcc"
>(code, addr, "SUBRB_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106674 "isa_tms320.tcc"
>
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106683 "isa_tms320.tcc"
>::OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106691 "isa_tms320.tcc"
>(code, addr, "SUBRB_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106711 "isa_tms320.tcc"
>
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106720 "isa_tms320.tcc"
>::OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106728 "isa_tms320.tcc"
>(code, addr, "SUBRB_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106750 "isa_tms320.tcc"
>
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 106755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106759 "isa_tms320.tcc"
>::OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106767 "isa_tms320.tcc"
>(code, addr, "SUBRB_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106787 "isa_tms320.tcc"
>
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106796 "isa_tms320.tcc"
>::OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106804 "isa_tms320.tcc"
>(code, addr, "SUBRF_reg")
{
	src = ((code >> 0) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106824 "isa_tms320.tcc"
>
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106833 "isa_tms320.tcc"
>::OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106841 "isa_tms320.tcc"
>(code, addr, "SUBRF_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106861 "isa_tms320.tcc"
>
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106870 "isa_tms320.tcc"
>::OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106878 "isa_tms320.tcc"
>(code, addr, "SUBRF_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106900 "isa_tms320.tcc"
>
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 106905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106909 "isa_tms320.tcc"
>::OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106917 "isa_tms320.tcc"
>(code, addr, "SUBRF_imm")
{
	imm = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106937 "isa_tms320.tcc"
>
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106946 "isa_tms320.tcc"
>::OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106954 "isa_tms320.tcc"
>(code, addr, "SUBRI_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106974 "isa_tms320.tcc"
>
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106983 "isa_tms320.tcc"
>::OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106991 "isa_tms320.tcc"
>(code, addr, "SUBRI_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107011 "isa_tms320.tcc"
>
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107020 "isa_tms320.tcc"
>::OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107028 "isa_tms320.tcc"
>(code, addr, "SUBRI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107050 "isa_tms320.tcc"
>
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 107055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107059 "isa_tms320.tcc"
>::OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107067 "isa_tms320.tcc"
>(code, addr, "SUBRI_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107087 "isa_tms320.tcc"
>
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107096 "isa_tms320.tcc"
>::OpTSTB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107104 "isa_tms320.tcc"
>(code, addr, "TSTB_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107124 "isa_tms320.tcc"
>
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107133 "isa_tms320.tcc"
>::OpTSTB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107141 "isa_tms320.tcc"
>(code, addr, "TSTB_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107154 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107161 "isa_tms320.tcc"
>
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107170 "isa_tms320.tcc"
>::OpTSTB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107178 "isa_tms320.tcc"
>(code, addr, "TSTB_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107200 "isa_tms320.tcc"
>
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 107205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107209 "isa_tms320.tcc"
>::OpTSTB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107217 "isa_tms320.tcc"
>(code, addr, "TSTB_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107237 "isa_tms320.tcc"
>
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107246 "isa_tms320.tcc"
>::OpXOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107254 "isa_tms320.tcc"
>(code, addr, "XOR_reg")
{
	src = ((code >> 0) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107274 "isa_tms320.tcc"
>
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107283 "isa_tms320.tcc"
>::OpXOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107291 "isa_tms320.tcc"
>(code, addr, "XOR_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107311 "isa_tms320.tcc"
>
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107320 "isa_tms320.tcc"
>::OpXOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107328 "isa_tms320.tcc"
>(code, addr, "XOR_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107350 "isa_tms320.tcc"
>
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 107355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107359 "isa_tms320.tcc"
>::OpXOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107367 "isa_tms320.tcc"
>(code, addr, "XOR_imm")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107387 "isa_tms320.tcc"
>
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107396 "isa_tms320.tcc"
>::OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107404 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107425 "isa_tms320.tcc"
>
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107434 "isa_tms320.tcc"
>::OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107442 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107464 "isa_tms320.tcc"
>
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107473 "isa_tms320.tcc"
>::OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107481 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107503 "isa_tms320.tcc"
>
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107512 "isa_tms320.tcc"
>::OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107520 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107543 "isa_tms320.tcc"
>
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107552 "isa_tms320.tcc"
>::OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107560 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_reg")
{
	src2 = ((code >> 0) & 0x7);
	src1 = ((code >> 8) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107571 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107581 "isa_tms320.tcc"
>
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107590 "isa_tms320.tcc"
>::OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107598 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_reg")
{
	src2 = ((code >> 0) & 0x7);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107620 "isa_tms320.tcc"
>
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107629 "isa_tms320.tcc"
>::OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107637 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107659 "isa_tms320.tcc"
>
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107668 "isa_tms320.tcc"
>::OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107676 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107699 "isa_tms320.tcc"
>
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107708 "isa_tms320.tcc"
>::OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107716 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107737 "isa_tms320.tcc"
>
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107746 "isa_tms320.tcc"
>::OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107754 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107776 "isa_tms320.tcc"
>
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107785 "isa_tms320.tcc"
>::OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107793 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107815 "isa_tms320.tcc"
>
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107824 "isa_tms320.tcc"
>::OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107832 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107855 "isa_tms320.tcc"
>
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107864 "isa_tms320.tcc"
>::OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107872 "isa_tms320.tcc"
>(code, addr, "AND3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107893 "isa_tms320.tcc"
>
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107902 "isa_tms320.tcc"
>::OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107910 "isa_tms320.tcc"
>(code, addr, "AND3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107932 "isa_tms320.tcc"
>
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107941 "isa_tms320.tcc"
>::OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107949 "isa_tms320.tcc"
>(code, addr, "AND3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107971 "isa_tms320.tcc"
>
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107980 "isa_tms320.tcc"
>::OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107988 "isa_tms320.tcc"
>(code, addr, "AND3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108011 "isa_tms320.tcc"
>
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108020 "isa_tms320.tcc"
>::OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108028 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108049 "isa_tms320.tcc"
>
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108058 "isa_tms320.tcc"
>::OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108066 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108088 "isa_tms320.tcc"
>
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108097 "isa_tms320.tcc"
>::OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108105 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108127 "isa_tms320.tcc"
>
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108136 "isa_tms320.tcc"
>::OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108144 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108167 "isa_tms320.tcc"
>
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108176 "isa_tms320.tcc"
>::OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108184 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108205 "isa_tms320.tcc"
>
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108214 "isa_tms320.tcc"
>::OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108222 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108244 "isa_tms320.tcc"
>
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108253 "isa_tms320.tcc"
>::OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108261 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108283 "isa_tms320.tcc"
>
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108292 "isa_tms320.tcc"
>::OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108300 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108323 "isa_tms320.tcc"
>
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108332 "isa_tms320.tcc"
>::OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108340 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_reg")
{
	src2 = ((code >> 0) & 0x7);
	src1 = ((code >> 8) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108360 "isa_tms320.tcc"
>
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108369 "isa_tms320.tcc"
>::OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108377 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_reg")
{
	src2 = ((code >> 0) & 0x7);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108398 "isa_tms320.tcc"
>
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108407 "isa_tms320.tcc"
>::OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108415 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108426 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108429 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108436 "isa_tms320.tcc"
>
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108445 "isa_tms320.tcc"
>::OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108453 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108468 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108475 "isa_tms320.tcc"
>
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108484 "isa_tms320.tcc"
>::OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108492 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108512 "isa_tms320.tcc"
>
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108521 "isa_tms320.tcc"
>::OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108529 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108550 "isa_tms320.tcc"
>
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108559 "isa_tms320.tcc"
>::OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108567 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108588 "isa_tms320.tcc"
>
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108597 "isa_tms320.tcc"
>::OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108605 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108627 "isa_tms320.tcc"
>
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108636 "isa_tms320.tcc"
>::OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108644 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108665 "isa_tms320.tcc"
>
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108674 "isa_tms320.tcc"
>::OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108682 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108704 "isa_tms320.tcc"
>
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108713 "isa_tms320.tcc"
>::OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108721 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108743 "isa_tms320.tcc"
>
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108752 "isa_tms320.tcc"
>::OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108760 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108783 "isa_tms320.tcc"
>
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108792 "isa_tms320.tcc"
>::OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108800 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_reg")
{
	src2 = ((code >> 0) & 0x7);
	src1 = ((code >> 8) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108821 "isa_tms320.tcc"
>
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108830 "isa_tms320.tcc"
>::OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108838 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_reg")
{
	src2 = ((code >> 0) & 0x7);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108860 "isa_tms320.tcc"
>
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108869 "isa_tms320.tcc"
>::OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108877 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108899 "isa_tms320.tcc"
>
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108908 "isa_tms320.tcc"
>::OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108916 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108939 "isa_tms320.tcc"
>
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108948 "isa_tms320.tcc"
>::OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108956 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108977 "isa_tms320.tcc"
>
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108986 "isa_tms320.tcc"
>::OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108994 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109016 "isa_tms320.tcc"
>
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109025 "isa_tms320.tcc"
>::OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109033 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109055 "isa_tms320.tcc"
>
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109064 "isa_tms320.tcc"
>::OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109072 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109095 "isa_tms320.tcc"
>
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109104 "isa_tms320.tcc"
>::OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109112 "isa_tms320.tcc"
>(code, addr, "OR3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109133 "isa_tms320.tcc"
>
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109142 "isa_tms320.tcc"
>::OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109150 "isa_tms320.tcc"
>(code, addr, "OR3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109169 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109172 "isa_tms320.tcc"
>
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109181 "isa_tms320.tcc"
>::OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109189 "isa_tms320.tcc"
>(code, addr, "OR3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109211 "isa_tms320.tcc"
>
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109220 "isa_tms320.tcc"
>::OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109228 "isa_tms320.tcc"
>(code, addr, "OR3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109251 "isa_tms320.tcc"
>
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109260 "isa_tms320.tcc"
>::OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109264 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109268 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109289 "isa_tms320.tcc"
>
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109298 "isa_tms320.tcc"
>::OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109306 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109328 "isa_tms320.tcc"
>
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109337 "isa_tms320.tcc"
>::OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109345 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109367 "isa_tms320.tcc"
>
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109376 "isa_tms320.tcc"
>::OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109384 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109407 "isa_tms320.tcc"
>
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109416 "isa_tms320.tcc"
>::OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109424 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_reg")
{
	src2 = ((code >> 0) & 0x7);
	src1 = ((code >> 8) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109445 "isa_tms320.tcc"
>
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109454 "isa_tms320.tcc"
>::OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109462 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_reg")
{
	src2 = ((code >> 0) & 0x7);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109474 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109484 "isa_tms320.tcc"
>
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109493 "isa_tms320.tcc"
>::OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109501 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x7);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109523 "isa_tms320.tcc"
>
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109532 "isa_tms320.tcc"
>::OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109540 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109563 "isa_tms320.tcc"
>
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109572 "isa_tms320.tcc"
>::OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109580 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109601 "isa_tms320.tcc"
>
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109610 "isa_tms320.tcc"
>::OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109618 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109640 "isa_tms320.tcc"
>
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109649 "isa_tms320.tcc"
>::OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109657 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109679 "isa_tms320.tcc"
>
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109688 "isa_tms320.tcc"
>::OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109696 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109716 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109719 "isa_tms320.tcc"
>
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109728 "isa_tms320.tcc"
>::OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109736 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109756 "isa_tms320.tcc"
>
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109765 "isa_tms320.tcc"
>::OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109773 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109794 "isa_tms320.tcc"
>
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109803 "isa_tms320.tcc"
>::OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109811 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109832 "isa_tms320.tcc"
>
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109841 "isa_tms320.tcc"
>::OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109849 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109871 "isa_tms320.tcc"
>
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109880 "isa_tms320.tcc"
>::OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109888 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_reg")
{
	src2 = ((code >> 0) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109909 "isa_tms320.tcc"
>
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 109914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109918 "isa_tms320.tcc"
>::OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109926 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_reg")
{
	src2 = ((code >> 0) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109948 "isa_tms320.tcc"
>
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109953 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109957 "isa_tms320.tcc"
>::OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109965 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109987 "isa_tms320.tcc"
>
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 109992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109996 "isa_tms320.tcc"
>::OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110004 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_indir")
{
	ar2 = ((code >> 0) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110027 "isa_tms320.tcc"
>
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 110032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110036 "isa_tms320.tcc"
>::OpBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110044 "isa_tms320.tcc"
>(code, addr, "Bcond_reg")
{
	reg = ((code >> 0) & 0x1f);
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110064 "isa_tms320.tcc"
>
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 110069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110073 "isa_tms320.tcc"
>::OpBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110081 "isa_tms320.tcc"
>(code, addr, "Bcond_disp")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110101 "isa_tms320.tcc"
>
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 110106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110110 "isa_tms320.tcc"
>::OpBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110118 "isa_tms320.tcc"
>(code, addr, "BcondD_reg")
{
	reg = ((code >> 0) & 0x1f);
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110138 "isa_tms320.tcc"
>
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 110143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110147 "isa_tms320.tcc"
>::OpBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110155 "isa_tms320.tcc"
>(code, addr, "BcondD_disp")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110175 "isa_tms320.tcc"
>
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 110180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110184 "isa_tms320.tcc"
>::OpBR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110192 "isa_tms320.tcc"
>(code, addr, "BR")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110211 "isa_tms320.tcc"
>
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 110216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110220 "isa_tms320.tcc"
>::OpBRD(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110228 "isa_tms320.tcc"
>(code, addr, "BRD")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110247 "isa_tms320.tcc"
>
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 110252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110256 "isa_tms320.tcc"
>::OpCALL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110264 "isa_tms320.tcc"
>(code, addr, "CALL")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110283 "isa_tms320.tcc"
>
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 110288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110292 "isa_tms320.tcc"
>::OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110300 "isa_tms320.tcc"
>(code, addr, "CALLcond_reg")
{
	reg = ((code >> 0) & 0x1f);
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110320 "isa_tms320.tcc"
>
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 110325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110329 "isa_tms320.tcc"
>::OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110337 "isa_tms320.tcc"
>(code, addr, "CALLcond_disp")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110357 "isa_tms320.tcc"
>
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 110362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110366 "isa_tms320.tcc"
>::OpDBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110374 "isa_tms320.tcc"
>(code, addr, "DBcond_reg")
{
	reg = ((code >> 0) & 0x1f);
	cond = ((code >> 16) & 0x1f);
	ar = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110395 "isa_tms320.tcc"
>
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 110400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110404 "isa_tms320.tcc"
>::OpDBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110412 "isa_tms320.tcc"
>(code, addr, "DBcond_disp")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	cond = ((code >> 16) & 0x1f);
	ar = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110433 "isa_tms320.tcc"
>
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 110438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110442 "isa_tms320.tcc"
>::OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110446 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110450 "isa_tms320.tcc"
>(code, addr, "DBcondD_reg")
{
	reg = ((code >> 0) & 0x1f);
	cond = ((code >> 16) & 0x1f);
	ar = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110471 "isa_tms320.tcc"
>
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 110476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110480 "isa_tms320.tcc"
>::OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110488 "isa_tms320.tcc"
>(code, addr, "DBcondD_disp")
{
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
	cond = ((code >> 16) & 0x1f);
	ar = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110509 "isa_tms320.tcc"
>
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 110514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110518 "isa_tms320.tcc"
>::OpIACK_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110526 "isa_tms320.tcc"
>(code, addr, "IACK_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110545 "isa_tms320.tcc"
>
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 110550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110554 "isa_tms320.tcc"
>::OpIACK_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110562 "isa_tms320.tcc"
>(code, addr, "IACK_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110583 "isa_tms320.tcc"
>
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 110588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110592 "isa_tms320.tcc"
>::OpIDLE(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110600 "isa_tms320.tcc"
>(code, addr, "IDLE")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 110608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110618 "isa_tms320.tcc"
>
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 110623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110627 "isa_tms320.tcc"
>::OpNOP_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110635 "isa_tms320.tcc"
>(code, addr, "NOP_reg")
{
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110654 "isa_tms320.tcc"
>
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 110659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110663 "isa_tms320.tcc"
>::OpNOP_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110671 "isa_tms320.tcc"
>(code, addr, "NOP_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110692 "isa_tms320.tcc"
>
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 110697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110701 "isa_tms320.tcc"
>::OpRETIcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110709 "isa_tms320.tcc"
>(code, addr, "RETIcond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110728 "isa_tms320.tcc"
>
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 110733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110737 "isa_tms320.tcc"
>::OpRETScond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110745 "isa_tms320.tcc"
>(code, addr, "RETScond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110764 "isa_tms320.tcc"
>
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 110769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110773 "isa_tms320.tcc"
>::OpRPTB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110781 "isa_tms320.tcc"
>(code, addr, "RPTB")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110800 "isa_tms320.tcc"
>
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 110805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110809 "isa_tms320.tcc"
>::OpRPTS_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110817 "isa_tms320.tcc"
>(code, addr, "RPTS_reg")
{
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110833 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110836 "isa_tms320.tcc"
>
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 110841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110845 "isa_tms320.tcc"
>::OpRPTS_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110853 "isa_tms320.tcc"
>(code, addr, "RPTS_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110872 "isa_tms320.tcc"
>
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 110877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110881 "isa_tms320.tcc"
>::OpRPTS_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110889 "isa_tms320.tcc"
>(code, addr, "RPTS_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110910 "isa_tms320.tcc"
>
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 110915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110919 "isa_tms320.tcc"
>::OpRPTS_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110927 "isa_tms320.tcc"
>(code, addr, "RPTS_imm")
{
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110946 "isa_tms320.tcc"
>
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110955 "isa_tms320.tcc"
>::OpSWI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110963 "isa_tms320.tcc"
>(code, addr, "SWI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 110971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110978 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110981 "isa_tms320.tcc"
>
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 110986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110990 "isa_tms320.tcc"
>::OpTRAPcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110998 "isa_tms320.tcc"
>(code, addr, "TRAPcond")
{
	n = ((code >> 0) & 0x1f);
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111011 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111015 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111018 "isa_tms320.tcc"
>
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 111023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111027 "isa_tms320.tcc"
>::OpIDLE2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111031 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111035 "isa_tms320.tcc"
>(code, addr, "IDLE2")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 111043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111053 "isa_tms320.tcc"
>
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 111058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111062 "isa_tms320.tcc"
>::OpLOPOWER(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111070 "isa_tms320.tcc"
>(code, addr, "LOPOWER")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 111078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111088 "isa_tms320.tcc"
>
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 111093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111097 "isa_tms320.tcc"
>::OpMAXSPEED(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111105 "isa_tms320.tcc"
>(code, addr, "MAXSPEED")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 111113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111123 "isa_tms320.tcc"
>
OpLDFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 111128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111132 "isa_tms320.tcc"
>::OpLDFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111140 "isa_tms320.tcc"
>(code, addr, "LDFI_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111160 "isa_tms320.tcc"
>
OpLDFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 111165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111169 "isa_tms320.tcc"
>::OpLDFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111173 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111177 "isa_tms320.tcc"
>(code, addr, "LDFI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111199 "isa_tms320.tcc"
>
OpLDII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 111204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111208 "isa_tms320.tcc"
>::OpLDII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111216 "isa_tms320.tcc"
>(code, addr, "LDII_dir")
{
	direct = ((code >> 0) & 0xffff);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111236 "isa_tms320.tcc"
>
OpLDII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 111241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111245 "isa_tms320.tcc"
>::OpLDII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111253 "isa_tms320.tcc"
>(code, addr, "LDII_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111275 "isa_tms320.tcc"
>
OpSIGI<
#line 45 "isa/tms320.isa"
CONFIG
#line 111280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111284 "isa_tms320.tcc"
>::OpSIGI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111292 "isa_tms320.tcc"
>(code, addr, "SIGI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 111300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111310 "isa_tms320.tcc"
>
OpSTFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 111315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111319 "isa_tms320.tcc"
>::OpSTFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111327 "isa_tms320.tcc"
>(code, addr, "STFI_dir")
{
	direct = ((code >> 0) & 0xffff);
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111347 "isa_tms320.tcc"
>
OpSTFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 111352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111356 "isa_tms320.tcc"
>::OpSTFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111364 "isa_tms320.tcc"
>(code, addr, "STFI_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111386 "isa_tms320.tcc"
>
OpSTII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 111391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111395 "isa_tms320.tcc"
>::OpSTII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111403 "isa_tms320.tcc"
>(code, addr, "STII_dir")
{
	direct = ((code >> 0) & 0xffff);
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111423 "isa_tms320.tcc"
>
OpSTII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 111428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111432 "isa_tms320.tcc"
>::OpSTII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111440 "isa_tms320.tcc"
>(code, addr, "STII_indir")
{
	disp = ((code >> 0) & 0xff);
	ar = ((code >> 8) & 0x7);
	mod = ((code >> 11) & 0x1f);
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111462 "isa_tms320.tcc"
>
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 111467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111471 "isa_tms320.tcc"
>::OpABSF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111479 "isa_tms320.tcc"
>(code, addr, "ABSF_STF")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111503 "isa_tms320.tcc"
>
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111512 "isa_tms320.tcc"
>::OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111520 "isa_tms320.tcc"
>(code, addr, "ABSF_STF_ext")
{
	src2 = ((code >> 0) & 0x7);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111543 "isa_tms320.tcc"
>
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 111548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111552 "isa_tms320.tcc"
>::OpABSI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111560 "isa_tms320.tcc"
>(code, addr, "ABSI_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111584 "isa_tms320.tcc"
>
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111593 "isa_tms320.tcc"
>::OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111601 "isa_tms320.tcc"
>(code, addr, "ABSI_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111624 "isa_tms320.tcc"
>
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 111629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111633 "isa_tms320.tcc"
>::OpADDF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111641 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111663 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111666 "isa_tms320.tcc"
>
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111675 "isa_tms320.tcc"
>::OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111683 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111707 "isa_tms320.tcc"
>
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 111712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111716 "isa_tms320.tcc"
>::OpADDI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111724 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111749 "isa_tms320.tcc"
>
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111758 "isa_tms320.tcc"
>::OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111766 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111790 "isa_tms320.tcc"
>
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 111795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111799 "isa_tms320.tcc"
>::OpAND3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111807 "isa_tms320.tcc"
>(code, addr, "AND3_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111832 "isa_tms320.tcc"
>
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111841 "isa_tms320.tcc"
>::OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111849 "isa_tms320.tcc"
>(code, addr, "AND3_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111873 "isa_tms320.tcc"
>
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 111878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111882 "isa_tms320.tcc"
>::OpASH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111890 "isa_tms320.tcc"
>(code, addr, "ASH3_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	count = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111915 "isa_tms320.tcc"
>
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111924 "isa_tms320.tcc"
>::OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111932 "isa_tms320.tcc"
>(code, addr, "ASH3_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	count = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111956 "isa_tms320.tcc"
>
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 111961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111965 "isa_tms320.tcc"
>::OpFIX_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111973 "isa_tms320.tcc"
>(code, addr, "FIX_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111997 "isa_tms320.tcc"
>
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112006 "isa_tms320.tcc"
>::OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112014 "isa_tms320.tcc"
>(code, addr, "FIX_STI_ext")
{
	src2 = ((code >> 0) & 0x7);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112037 "isa_tms320.tcc"
>
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 112042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112046 "isa_tms320.tcc"
>::OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112054 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112078 "isa_tms320.tcc"
>
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112087 "isa_tms320.tcc"
>::OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112095 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112118 "isa_tms320.tcc"
>
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 112123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112127 "isa_tms320.tcc"
>::OpLDF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112135 "isa_tms320.tcc"
>(code, addr, "LDF_STF")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112159 "isa_tms320.tcc"
>
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112168 "isa_tms320.tcc"
>::OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112176 "isa_tms320.tcc"
>(code, addr, "LDF_STF_ext")
{
	src2 = ((code >> 0) & 0x7);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112199 "isa_tms320.tcc"
>
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 112204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112208 "isa_tms320.tcc"
>::OpLDI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112216 "isa_tms320.tcc"
>(code, addr, "LDI_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112240 "isa_tms320.tcc"
>
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112249 "isa_tms320.tcc"
>::OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112257 "isa_tms320.tcc"
>(code, addr, "LDI_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112280 "isa_tms320.tcc"
>
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 112285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112289 "isa_tms320.tcc"
>::OpLSH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112297 "isa_tms320.tcc"
>(code, addr, "LSH3_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	count = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112322 "isa_tms320.tcc"
>
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112331 "isa_tms320.tcc"
>::OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112339 "isa_tms320.tcc"
>(code, addr, "LSH3_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	count = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112363 "isa_tms320.tcc"
>
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 112368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112372 "isa_tms320.tcc"
>::OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112380 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112405 "isa_tms320.tcc"
>
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112414 "isa_tms320.tcc"
>::OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112422 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112446 "isa_tms320.tcc"
>
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 112451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112455 "isa_tms320.tcc"
>::OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112463 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112488 "isa_tms320.tcc"
>
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112497 "isa_tms320.tcc"
>::OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112505 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112529 "isa_tms320.tcc"
>
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 112534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112538 "isa_tms320.tcc"
>::OpNEGF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112546 "isa_tms320.tcc"
>(code, addr, "NEGF_STF")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112570 "isa_tms320.tcc"
>
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112575 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112579 "isa_tms320.tcc"
>::OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112587 "isa_tms320.tcc"
>(code, addr, "NEGF_STF_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112610 "isa_tms320.tcc"
>
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 112615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112619 "isa_tms320.tcc"
>::OpNEGI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112627 "isa_tms320.tcc"
>(code, addr, "NEGI_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112651 "isa_tms320.tcc"
>
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112660 "isa_tms320.tcc"
>::OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112668 "isa_tms320.tcc"
>(code, addr, "NEGI_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112691 "isa_tms320.tcc"
>
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 112696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112700 "isa_tms320.tcc"
>::OpNOT_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112708 "isa_tms320.tcc"
>(code, addr, "NOT_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112732 "isa_tms320.tcc"
>
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112741 "isa_tms320.tcc"
>::OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112749 "isa_tms320.tcc"
>(code, addr, "NOT_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112772 "isa_tms320.tcc"
>
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 112777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112781 "isa_tms320.tcc"
>::OpOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112789 "isa_tms320.tcc"
>(code, addr, "OR3_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112814 "isa_tms320.tcc"
>
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112823 "isa_tms320.tcc"
>::OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112831 "isa_tms320.tcc"
>(code, addr, "OR3_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112855 "isa_tms320.tcc"
>
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 112860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112864 "isa_tms320.tcc"
>::OpSTF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112872 "isa_tms320.tcc"
>(code, addr, "STF_STF")
{
	d2_ar = ((code >> 0) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	src1 = ((code >> 16) & 0x7);
	src2 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112896 "isa_tms320.tcc"
>
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112905 "isa_tms320.tcc"
>::OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112913 "isa_tms320.tcc"
>(code, addr, "STF_STF_ext")
{
	dst2 = ((code >> 0) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	src1 = ((code >> 16) & 0x7);
	src2 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112936 "isa_tms320.tcc"
>
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 112941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112945 "isa_tms320.tcc"
>::OpSTI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112953 "isa_tms320.tcc"
>(code, addr, "STI_STI")
{
	d2_ar = ((code >> 0) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	src1 = ((code >> 16) & 0x7);
	src2 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 112967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 112970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 112974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 112977 "isa_tms320.tcc"
>
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 112982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112986 "isa_tms320.tcc"
>::OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 112990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 112994 "isa_tms320.tcc"
>(code, addr, "STI_STI_ext")
{
	dst2 = ((code >> 0) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	src1 = ((code >> 16) & 0x7);
	src2 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113017 "isa_tms320.tcc"
>
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 113022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113026 "isa_tms320.tcc"
>::OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113034 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113059 "isa_tms320.tcc"
>
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 113064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113068 "isa_tms320.tcc"
>::OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113076 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113100 "isa_tms320.tcc"
>
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 113105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113109 "isa_tms320.tcc"
>::OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113113 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113117 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113142 "isa_tms320.tcc"
>
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 113147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113151 "isa_tms320.tcc"
>::OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113159 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113183 "isa_tms320.tcc"
>
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 113188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113192 "isa_tms320.tcc"
>::OpXOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113200 "isa_tms320.tcc"
>(code, addr, "XOR3_STI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113225 "isa_tms320.tcc"
>
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 113230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113234 "isa_tms320.tcc"
>::OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113242 "isa_tms320.tcc"
>(code, addr, "XOR3_STI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	src3 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	dst1 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113263 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113266 "isa_tms320.tcc"
>
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 113271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113275 "isa_tms320.tcc"
>::OpLDF_LDF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113283 "isa_tms320.tcc"
>(code, addr, "LDF_LDF")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	dst1 = ((code >> 19) & 0x7);
	dst2 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113307 "isa_tms320.tcc"
>
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 113312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113316 "isa_tms320.tcc"
>::OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113324 "isa_tms320.tcc"
>(code, addr, "LDF_LDF_ext")
{
	src2 = ((code >> 0) & 0x7);
	s1_ar = ((code >> 8) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	dst1 = ((code >> 19) & 0x7);
	dst2 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113347 "isa_tms320.tcc"
>
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 113352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113356 "isa_tms320.tcc"
>::OpLDI_LDI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113364 "isa_tms320.tcc"
>(code, addr, "LDI_LDI")
{
	s2_ar = ((code >> 0) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	dst1 = ((code >> 19) & 0x7);
	dst2 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113388 "isa_tms320.tcc"
>
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 113393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113397 "isa_tms320.tcc"
>::OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113405 "isa_tms320.tcc"
>(code, addr, "LDI_LDI_ext")
{
	src2 = ((code >> 0) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	dst1 = ((code >> 19) & 0x7);
	dst2 = ((code >> 22) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113428 "isa_tms320.tcc"
>
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 113433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113437 "isa_tms320.tcc"
>::OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113445 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3")
{
	s4_ar = ((code >> 0) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	src2 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	d2 = ((code >> 22) & 0x1);
	d1 = ((code >> 23) & 0x1);
	p = ((code >> 24) & 0x3);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113472 "isa_tms320.tcc"
>
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 113477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113481 "isa_tms320.tcc"
>::OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113489 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3_ext")
{
	src4 = ((code >> 0) & 0x1f);
	src3 = ((code >> 8) & 0x1f);
	src2 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	d2 = ((code >> 22) & 0x1);
	d1 = ((code >> 23) & 0x1);
	p = ((code >> 24) & 0x3);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113514 "isa_tms320.tcc"
>
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 113519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113523 "isa_tms320.tcc"
>::OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113531 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3")
{
	s4_ar = ((code >> 0) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	src2 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	d2 = ((code >> 22) & 0x1);
	d1 = ((code >> 23) & 0x1);
	p = ((code >> 24) & 0x3);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113558 "isa_tms320.tcc"
>
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 113563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113567 "isa_tms320.tcc"
>::OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113575 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3_ext")
{
	src4 = ((code >> 0) & 0x1f);
	src3 = ((code >> 8) & 0x1f);
	src2 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	d2 = ((code >> 22) & 0x1);
	d1 = ((code >> 23) & 0x1);
	p = ((code >> 24) & 0x3);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113600 "isa_tms320.tcc"
>
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 113605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113609 "isa_tms320.tcc"
>::OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113617 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3")
{
	s4_ar = ((code >> 0) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	src2 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	d2 = ((code >> 22) & 0x1);
	d1 = ((code >> 23) & 0x1);
	p = ((code >> 24) & 0x3);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113644 "isa_tms320.tcc"
>
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 113649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113653 "isa_tms320.tcc"
>::OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113661 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3_ext")
{
	src4 = ((code >> 0) & 0x1f);
	src3 = ((code >> 8) & 0x1f);
	src2 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	d2 = ((code >> 22) & 0x1);
	d1 = ((code >> 23) & 0x1);
	p = ((code >> 24) & 0x3);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113686 "isa_tms320.tcc"
>
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 113691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113695 "isa_tms320.tcc"
>::OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113703 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3")
{
	s4_ar = ((code >> 0) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	src2 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	d2 = ((code >> 22) & 0x1);
	d1 = ((code >> 23) & 0x1);
	p = ((code >> 24) & 0x3);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113730 "isa_tms320.tcc"
>
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 113735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113739 "isa_tms320.tcc"
>::OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113747 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3_ext")
{
	src4 = ((code >> 0) & 0x1f);
	src3 = ((code >> 8) & 0x1f);
	src2 = ((code >> 16) & 0x7);
	src1 = ((code >> 19) & 0x7);
	d2 = ((code >> 22) & 0x1);
	d1 = ((code >> 23) & 0x1);
	p = ((code >> 24) & 0x3);
}

template <
#line 45 "isa/tms320.isa"
class
#line 113762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113772 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 113777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113781 "isa_tms320.tcc"
>::DecodeMapPage(typename CONFIG::address_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 113792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113802 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 113807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113811 "isa_tms320.tcc"
>::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

template <
#line 45 "isa/tms320.isa"
class
#line 113822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113832 "isa_tms320.tcc"
>
DecodeTableEntry<
#line 45 "isa/tms320.isa"
CONFIG
#line 113837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113841 "isa_tms320.tcc"
>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 113845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113849 "isa_tms320.tcc"
> *(*decode)(CodeType, typename CONFIG::address_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <
#line 45 "isa/tms320.isa"
class
#line 113860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 113863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 113867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 113870 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 113875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 113879 "isa_tms320.tcc"
>::Decoder()
: is_little_endian( true ), mru_page( 0 )
{
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113887 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113891 "isa_tms320.tcc"
	>(0x8c00e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113895 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113899 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113904 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113908 "isa_tms320.tcc"
	>(0x8c000000UL, 0xfc000000UL, DecodeOpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113912 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113916 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113921 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113925 "isa_tms320.tcc"
	>(0x8800e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113929 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113933 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113938 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113942 "isa_tms320.tcc"
	>(0x88000000UL, 0xfc000000UL, DecodeOpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113946 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113950 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113955 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113959 "isa_tms320.tcc"
	>(0x8400e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113963 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113967 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113972 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113976 "isa_tms320.tcc"
	>(0x84000000UL, 0xfc000000UL, DecodeOpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113980 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113984 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113989 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113993 "isa_tms320.tcc"
	>(0x8000e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113997 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114001 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114006 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114010 "isa_tms320.tcc"
	>(0x80000000UL, 0xfc000000UL, DecodeOpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114014 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114018 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114023 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114027 "isa_tms320.tcc"
	>(0xc60000e0UL, 0xfe0700e0UL, DecodeOpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114031 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114035 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114040 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114044 "isa_tms320.tcc"
	>(0xc6000000UL, 0xfe070000UL, DecodeOpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114048 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114052 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114057 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114061 "isa_tms320.tcc"
	>(0xc40000e0UL, 0xfe0700f8UL, DecodeOpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114065 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114069 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114074 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114078 "isa_tms320.tcc"
	>(0xc4000000UL, 0xfe070000UL, DecodeOpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114082 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114086 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114091 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114095 "isa_tms320.tcc"
	>(0xee0000e0UL, 0xfe0000e0UL, DecodeOpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114099 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114103 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114108 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114112 "isa_tms320.tcc"
	>(0xee000000UL, 0xfe000000UL, DecodeOpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114116 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114120 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114125 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114129 "isa_tms320.tcc"
	>(0xec0000e0UL, 0xfe0000e0UL, DecodeOpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114133 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114137 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114142 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114146 "isa_tms320.tcc"
	>(0xec000000UL, 0xfe000000UL, DecodeOpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114150 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114154 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114159 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114163 "isa_tms320.tcc"
	>(0xea0000e0UL, 0xfe0000e0UL, DecodeOpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114167 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114171 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114176 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114180 "isa_tms320.tcc"
	>(0xea000000UL, 0xfe000000UL, DecodeOpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114184 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114188 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114193 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114197 "isa_tms320.tcc"
	>(0xc20000e0UL, 0xfe3800e0UL, DecodeOpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114201 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114205 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114210 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114214 "isa_tms320.tcc"
	>(0xc2000000UL, 0xfe380000UL, DecodeOpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114218 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114222 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114227 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114231 "isa_tms320.tcc"
	>(0xc00000e0UL, 0xfe3800e0UL, DecodeOpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114235 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114239 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114244 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114248 "isa_tms320.tcc"
	>(0xc0000000UL, 0xfe380000UL, DecodeOpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114252 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114256 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114261 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114265 "isa_tms320.tcc"
	>(0xe80000e0UL, 0xfe0000e0UL, DecodeOpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114269 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114273 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114278 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114282 "isa_tms320.tcc"
	>(0xe8000000UL, 0xfe000000UL, DecodeOpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114286 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114290 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114295 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114299 "isa_tms320.tcc"
	>(0xe60000e0UL, 0xfe3800e0UL, DecodeOpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114303 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114307 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114312 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114316 "isa_tms320.tcc"
	>(0xe6000000UL, 0xfe380000UL, DecodeOpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114320 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114324 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114329 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114333 "isa_tms320.tcc"
	>(0xe40000e0UL, 0xfe3800e0UL, DecodeOpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114337 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114341 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114346 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114350 "isa_tms320.tcc"
	>(0xe4000000UL, 0xfe380000UL, DecodeOpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114354 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114358 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114363 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114367 "isa_tms320.tcc"
	>(0xe20000e0UL, 0xfe3800e0UL, DecodeOpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114371 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114375 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114380 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114384 "isa_tms320.tcc"
	>(0xe2000000UL, 0xfe380000UL, DecodeOpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114388 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114392 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114397 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114401 "isa_tms320.tcc"
	>(0xe00000e0UL, 0xfe0000e0UL, DecodeOpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114405 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114409 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114414 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114418 "isa_tms320.tcc"
	>(0xe0000000UL, 0xfe000000UL, DecodeOpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114422 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114426 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114431 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114435 "isa_tms320.tcc"
	>(0xde0000e0UL, 0xfe0000e0UL, DecodeOpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114439 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114443 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114448 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114452 "isa_tms320.tcc"
	>(0xde000000UL, 0xfe000000UL, DecodeOpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114456 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114460 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114465 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114469 "isa_tms320.tcc"
	>(0xdc0000e0UL, 0xfe0000e0UL, DecodeOpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114473 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114477 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114482 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114486 "isa_tms320.tcc"
	>(0xdc000000UL, 0xfe000000UL, DecodeOpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114490 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114494 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114499 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114503 "isa_tms320.tcc"
	>(0xda0000e0UL, 0xfe3800e0UL, DecodeOpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114507 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114511 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114516 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114520 "isa_tms320.tcc"
	>(0xda000000UL, 0xfe380000UL, DecodeOpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114524 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114528 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114533 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114537 "isa_tms320.tcc"
	>(0xd80000e0UL, 0xfe3800f8UL, DecodeOpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114541 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114545 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114550 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114554 "isa_tms320.tcc"
	>(0xd8000000UL, 0xfe380000UL, DecodeOpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114558 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114562 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114567 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114571 "isa_tms320.tcc"
	>(0xd60000e0UL, 0xfe3800e0UL, DecodeOpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114575 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114579 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114584 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114588 "isa_tms320.tcc"
	>(0xd6000000UL, 0xfe380000UL, DecodeOpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114592 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114596 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114601 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114605 "isa_tms320.tcc"
	>(0xd40000e0UL, 0xfe3800f8UL, DecodeOpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114609 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114613 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114618 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114622 "isa_tms320.tcc"
	>(0xd4000000UL, 0xfe380000UL, DecodeOpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114626 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114630 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114635 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114639 "isa_tms320.tcc"
	>(0xd20000e0UL, 0xfe0000e0UL, DecodeOpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114643 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114647 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114652 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114656 "isa_tms320.tcc"
	>(0xd2000000UL, 0xfe000000UL, DecodeOpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114660 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114664 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114669 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114673 "isa_tms320.tcc"
	>(0xd00000e0UL, 0xfe0000e0UL, DecodeOpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114677 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114681 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114686 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114690 "isa_tms320.tcc"
	>(0xd0000000UL, 0xfe000000UL, DecodeOpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114694 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114698 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114703 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114707 "isa_tms320.tcc"
	>(0xce0000e0UL, 0xfe0000e0UL, DecodeOpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114711 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114715 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114720 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114724 "isa_tms320.tcc"
	>(0xce000000UL, 0xfe000000UL, DecodeOpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114728 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114732 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114737 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114741 "isa_tms320.tcc"
	>(0xcc0000e0UL, 0xfe0000e0UL, DecodeOpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114745 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114749 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114754 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114758 "isa_tms320.tcc"
	>(0xcc000000UL, 0xfe000000UL, DecodeOpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114762 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114766 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114771 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114775 "isa_tms320.tcc"
	>(0xca0000e0UL, 0xfe3800e0UL, DecodeOpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114779 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114783 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114788 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114792 "isa_tms320.tcc"
	>(0xca000000UL, 0xfe380000UL, DecodeOpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114796 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114800 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114805 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114809 "isa_tms320.tcc"
	>(0xc80000e0UL, 0xfe3800f8UL, DecodeOpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114813 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114817 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114822 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114826 "isa_tms320.tcc"
	>(0xc8000000UL, 0xfe380000UL, DecodeOpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114830 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114834 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114839 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114843 "isa_tms320.tcc"
	>(0x15c00000UL, 0xffe00000UL, DecodeOpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114847 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114851 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114856 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114860 "isa_tms320.tcc"
	>(0x15a00000UL, 0xffe00000UL, DecodeOpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114864 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114868 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114873 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114877 "isa_tms320.tcc"
	>(0x14c00000UL, 0xffe00000UL, DecodeOpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114881 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114885 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114890 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114894 "isa_tms320.tcc"
	>(0x14a00000UL, 0xffe00000UL, DecodeOpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114898 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114902 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114907 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114911 "isa_tms320.tcc"
	>(0x16000000UL, 0xffffffffUL, DecodeOpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114915 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114919 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114924 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114928 "isa_tms320.tcc"
	>(0x8c00000UL, 0xffe00000UL, DecodeOpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114932 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114936 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114941 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114945 "isa_tms320.tcc"
	>(0x8a00000UL, 0xffe00000UL, DecodeOpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114949 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114953 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114958 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114962 "isa_tms320.tcc"
	>(0x7c00000UL, 0xffe00000UL, DecodeOpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114966 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114970 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114975 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114979 "isa_tms320.tcc"
	>(0x7a00000UL, 0xffe00000UL, DecodeOpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114983 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114987 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114992 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114996 "isa_tms320.tcc"
	>(0x10800000UL, 0xffffffffUL, DecodeOpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115000 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115004 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115009 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115013 "isa_tms320.tcc"
	>(0x10800001UL, 0xffffffffUL, DecodeOpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115017 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115021 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115026 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115030 "isa_tms320.tcc"
	>(0x6000001UL, 0xffffffffUL, DecodeOpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115034 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115038 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115043 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115047 "isa_tms320.tcc"
	>(0x74000020UL, 0xffe0ffe0UL, DecodeOpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115051 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115055 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115060 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115064 "isa_tms320.tcc"
	>(0x66000000UL, 0xffffffffUL, DecodeOpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115068 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115072 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115077 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115081 "isa_tms320.tcc"
	>(0x13fb0000UL, 0xffff0000UL, DecodeOpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115085 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115089 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115094 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115098 "isa_tms320.tcc"
	>(0x13db0000UL, 0xffff0000UL, DecodeOpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115102 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115106 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115111 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115115 "isa_tms320.tcc"
	>(0x13bb0000UL, 0xffff0000UL, DecodeOpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115119 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115123 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115128 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115132 "isa_tms320.tcc"
	>(0x139b0000UL, 0xffffffe0UL, DecodeOpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115136 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115140 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115145 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115149 "isa_tms320.tcc"
	>(0x64000000UL, 0xff000000UL, DecodeOpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115153 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115157 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115162 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115166 "isa_tms320.tcc"
	>(0x78800000UL, 0xffe0ffffUL, DecodeOpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115170 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115174 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115179 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115183 "isa_tms320.tcc"
	>(0x78000000UL, 0xffe0ffffUL, DecodeOpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115187 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115191 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115196 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115200 "isa_tms320.tcc"
	>(0xcc00000UL, 0xffff0000UL, DecodeOpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115204 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115208 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115213 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115217 "isa_tms320.tcc"
	>(0xc800000UL, 0xffffffe0UL, DecodeOpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115221 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115225 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115230 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115234 "isa_tms320.tcc"
	>(0x6000000UL, 0xffffffffUL, DecodeOpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115238 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115242 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115247 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115251 "isa_tms320.tcc"
	>(0x1b400000UL, 0xffff0000UL, DecodeOpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115255 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115259 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115264 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115268 "isa_tms320.tcc"
	>(0x1b200000UL, 0xffff0000UL, DecodeOpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115272 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115276 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115281 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115285 "isa_tms320.tcc"
	>(0x6e200000UL, 0xfe200000UL, DecodeOpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115289 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115293 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115298 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115302 "isa_tms320.tcc"
	>(0x6c200000UL, 0xfe20ffe0UL, DecodeOpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115306 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115310 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115315 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115319 "isa_tms320.tcc"
	>(0x6e000000UL, 0xfe200000UL, DecodeOpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115323 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115327 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115332 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115336 "isa_tms320.tcc"
	>(0x6c000000UL, 0xfe20ffe0UL, DecodeOpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115340 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115344 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115349 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115353 "isa_tms320.tcc"
	>(0x72000000UL, 0xffe00000UL, DecodeOpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115357 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115361 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115366 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115370 "isa_tms320.tcc"
	>(0x70000000UL, 0xffe0ffe0UL, DecodeOpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115374 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115378 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115383 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115387 "isa_tms320.tcc"
	>(0x62000000UL, 0xff000000UL, DecodeOpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115391 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115395 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115400 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115404 "isa_tms320.tcc"
	>(0x61000000UL, 0xff000000UL, DecodeOpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115408 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115412 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115417 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115421 "isa_tms320.tcc"
	>(0x60000000UL, 0xff000000UL, DecodeOpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115425 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115429 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115434 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115438 "isa_tms320.tcc"
	>(0x6a200000UL, 0xffe00000UL, DecodeOpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115442 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115446 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115451 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115455 "isa_tms320.tcc"
	>(0x68200000UL, 0xffe0ffe0UL, DecodeOpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115459 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115463 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115468 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115472 "isa_tms320.tcc"
	>(0x6a000000UL, 0xffe00000UL, DecodeOpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115476 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115480 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115485 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115489 "isa_tms320.tcc"
	>(0x68000000UL, 0xffe0ffe0UL, DecodeOpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115493 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115497 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115502 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115506 "isa_tms320.tcc"
	>(0x28600000UL, 0xffe00000UL, DecodeOpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115510 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115514 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115519 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115523 "isa_tms320.tcc"
	>(0x28400000UL, 0xffe0e000UL, DecodeOpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115527 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115531 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115536 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115540 "isa_tms320.tcc"
	>(0x28200000UL, 0xffe000e0UL, DecodeOpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115544 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115548 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115553 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115557 "isa_tms320.tcc"
	>(0x28000000UL, 0xffe0e0e0UL, DecodeOpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115561 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115565 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115570 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115574 "isa_tms320.tcc"
	>(0x27e00000UL, 0xffff0000UL, DecodeOpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115578 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115582 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115587 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115591 "isa_tms320.tcc"
	>(0x27c00000UL, 0xffffe000UL, DecodeOpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115595 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115599 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115604 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115608 "isa_tms320.tcc"
	>(0x27a00000UL, 0xffff00e0UL, DecodeOpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115612 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115616 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115621 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115625 "isa_tms320.tcc"
	>(0x27800000UL, 0xffffe0e0UL, DecodeOpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115629 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115633 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115638 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115642 "isa_tms320.tcc"
	>(0x27600000UL, 0xffe00000UL, DecodeOpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115646 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115650 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115655 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115659 "isa_tms320.tcc"
	>(0x27400000UL, 0xffe0e000UL, DecodeOpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115663 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115667 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115672 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115676 "isa_tms320.tcc"
	>(0x27200000UL, 0xffe000e0UL, DecodeOpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115680 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115684 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115689 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115693 "isa_tms320.tcc"
	>(0x27000000UL, 0xffe0e0e0UL, DecodeOpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115697 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115701 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115706 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115710 "isa_tms320.tcc"
	>(0x26e00000UL, 0xfff80000UL, DecodeOpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115714 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115718 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115723 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115727 "isa_tms320.tcc"
	>(0x26c00000UL, 0xfff8f800UL, DecodeOpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115731 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115735 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115740 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115744 "isa_tms320.tcc"
	>(0x26a00000UL, 0xfff800f8UL, DecodeOpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115748 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115752 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115757 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115761 "isa_tms320.tcc"
	>(0x26800000UL, 0xfff8f8f8UL, DecodeOpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115765 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115769 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115774 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115778 "isa_tms320.tcc"
	>(0x26600000UL, 0xffe00000UL, DecodeOpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115782 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115786 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115791 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115795 "isa_tms320.tcc"
	>(0x26400000UL, 0xffe0e000UL, DecodeOpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115799 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115803 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115808 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115812 "isa_tms320.tcc"
	>(0x26200000UL, 0xffe000e0UL, DecodeOpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115816 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115820 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115825 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115829 "isa_tms320.tcc"
	>(0x26000000UL, 0xffe0e0e0UL, DecodeOpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115833 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115837 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115842 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115846 "isa_tms320.tcc"
	>(0x25e00000UL, 0xffe00000UL, DecodeOpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115850 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115854 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115859 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115863 "isa_tms320.tcc"
	>(0x25c00000UL, 0xffe0e000UL, DecodeOpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115867 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115871 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115876 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115880 "isa_tms320.tcc"
	>(0x25a00000UL, 0xffe000e0UL, DecodeOpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115884 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115888 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115893 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115897 "isa_tms320.tcc"
	>(0x25800000UL, 0xffe0e0e0UL, DecodeOpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115901 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115905 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115910 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115914 "isa_tms320.tcc"
	>(0x25600000UL, 0xffe00000UL, DecodeOpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115918 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115922 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115927 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115931 "isa_tms320.tcc"
	>(0x25400000UL, 0xffe0e000UL, DecodeOpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115935 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115939 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115944 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115948 "isa_tms320.tcc"
	>(0x25200000UL, 0xffe000e0UL, DecodeOpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115952 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115956 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115961 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115965 "isa_tms320.tcc"
	>(0x25000000UL, 0xffe0e0e0UL, DecodeOpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115969 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115973 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115978 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115982 "isa_tms320.tcc"
	>(0x24e00000UL, 0xfff80000UL, DecodeOpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115986 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115990 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115995 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115999 "isa_tms320.tcc"
	>(0x24c00000UL, 0xfff8f800UL, DecodeOpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116003 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116007 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116012 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116016 "isa_tms320.tcc"
	>(0x24a00000UL, 0xfff800f8UL, DecodeOpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116020 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116024 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116029 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116033 "isa_tms320.tcc"
	>(0x24800000UL, 0xfff8f8f8UL, DecodeOpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116037 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116041 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116046 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116050 "isa_tms320.tcc"
	>(0x24600000UL, 0xffe00000UL, DecodeOpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116054 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116058 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116063 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116067 "isa_tms320.tcc"
	>(0x24400000UL, 0xffe0e000UL, DecodeOpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116071 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116075 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116080 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116084 "isa_tms320.tcc"
	>(0x24200000UL, 0xffe000e0UL, DecodeOpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116088 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116092 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116097 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116101 "isa_tms320.tcc"
	>(0x24000000UL, 0xffe0e0e0UL, DecodeOpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116105 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116109 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116114 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116118 "isa_tms320.tcc"
	>(0x23e00000UL, 0xffff0000UL, DecodeOpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116122 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116126 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116131 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116135 "isa_tms320.tcc"
	>(0x23c00000UL, 0xffffe000UL, DecodeOpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116139 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116143 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116148 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116152 "isa_tms320.tcc"
	>(0x23a00000UL, 0xffff00e0UL, DecodeOpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116156 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116160 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116165 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116169 "isa_tms320.tcc"
	>(0x23800000UL, 0xffffe0e0UL, DecodeOpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116173 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116177 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116182 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116186 "isa_tms320.tcc"
	>(0x23600000UL, 0xffff0000UL, DecodeOpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116190 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116194 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116199 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116203 "isa_tms320.tcc"
	>(0x23400000UL, 0xfffff800UL, DecodeOpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116207 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116211 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116216 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116220 "isa_tms320.tcc"
	>(0x23200000UL, 0xffff00f8UL, DecodeOpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116224 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116228 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116233 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116237 "isa_tms320.tcc"
	>(0x23000000UL, 0xfffff8f8UL, DecodeOpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116241 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116245 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116250 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116254 "isa_tms320.tcc"
	>(0x22e00000UL, 0xffe00000UL, DecodeOpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116258 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116262 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116267 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116271 "isa_tms320.tcc"
	>(0x22c00000UL, 0xffe0e000UL, DecodeOpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116275 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116279 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116284 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116288 "isa_tms320.tcc"
	>(0x22a00000UL, 0xffe000e0UL, DecodeOpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116292 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116296 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116301 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116305 "isa_tms320.tcc"
	>(0x22800000UL, 0xffe0e0e0UL, DecodeOpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116309 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116313 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116318 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116322 "isa_tms320.tcc"
	>(0x22600000UL, 0xffe00000UL, DecodeOpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116326 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116330 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116335 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116339 "isa_tms320.tcc"
	>(0x22400000UL, 0xffe0e000UL, DecodeOpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116343 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116347 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116352 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116356 "isa_tms320.tcc"
	>(0x22200000UL, 0xffe000e0UL, DecodeOpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116360 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116364 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116369 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116373 "isa_tms320.tcc"
	>(0x22000000UL, 0xffe0e0e0UL, DecodeOpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116377 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116381 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116386 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116390 "isa_tms320.tcc"
	>(0x21e00000UL, 0xffe00000UL, DecodeOpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116394 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116398 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116403 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116407 "isa_tms320.tcc"
	>(0x21c00000UL, 0xffe0e000UL, DecodeOpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116411 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116415 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116420 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116424 "isa_tms320.tcc"
	>(0x21a00000UL, 0xffe000e0UL, DecodeOpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116428 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116432 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116437 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116441 "isa_tms320.tcc"
	>(0x21800000UL, 0xffe0e0e0UL, DecodeOpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116445 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116449 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116454 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116458 "isa_tms320.tcc"
	>(0x21600000UL, 0xffe00000UL, DecodeOpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116462 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116466 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116471 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116475 "isa_tms320.tcc"
	>(0x21400000UL, 0xffe0e000UL, DecodeOpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116479 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116483 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116488 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116492 "isa_tms320.tcc"
	>(0x21200000UL, 0xffe000e0UL, DecodeOpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116496 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116500 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116505 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116509 "isa_tms320.tcc"
	>(0x21000000UL, 0xffe0e0e0UL, DecodeOpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116513 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116517 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116522 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116526 "isa_tms320.tcc"
	>(0x20e00000UL, 0xfff80000UL, DecodeOpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116530 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116534 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116539 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116543 "isa_tms320.tcc"
	>(0x20c00000UL, 0xfff8f800UL, DecodeOpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116547 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116551 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116556 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116560 "isa_tms320.tcc"
	>(0x20a00000UL, 0xfff800f8UL, DecodeOpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116564 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116568 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116573 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116577 "isa_tms320.tcc"
	>(0x20800000UL, 0xfff8f8f8UL, DecodeOpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116581 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116585 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116590 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116594 "isa_tms320.tcc"
	>(0x20600000UL, 0xffe00000UL, DecodeOpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116598 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116602 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116607 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116611 "isa_tms320.tcc"
	>(0x20400000UL, 0xffe0e000UL, DecodeOpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116615 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116619 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116624 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116628 "isa_tms320.tcc"
	>(0x20200000UL, 0xffe000e0UL, DecodeOpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116632 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116636 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116641 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116645 "isa_tms320.tcc"
	>(0x20000000UL, 0xffe0e0e0UL, DecodeOpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116649 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116653 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116658 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116662 "isa_tms320.tcc"
	>(0x1ae00000UL, 0xffe00000UL, DecodeOpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116666 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116670 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116675 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116679 "isa_tms320.tcc"
	>(0x1ac00000UL, 0xffe00000UL, DecodeOpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116683 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116687 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116692 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116696 "isa_tms320.tcc"
	>(0x1aa00000UL, 0xffe00000UL, DecodeOpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116700 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116704 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116709 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116713 "isa_tms320.tcc"
	>(0x1a800000UL, 0xffe0ffe0UL, DecodeOpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116717 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116721 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116726 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116730 "isa_tms320.tcc"
	>(0x1a600000UL, 0xffe00000UL, DecodeOpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116734 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116738 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116743 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116747 "isa_tms320.tcc"
	>(0x1a400000UL, 0xffe00000UL, DecodeOpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116751 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116755 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116760 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116764 "isa_tms320.tcc"
	>(0x1a200000UL, 0xffe00000UL, DecodeOpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116768 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116772 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116777 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116781 "isa_tms320.tcc"
	>(0x1a000000UL, 0xffe0ffe0UL, DecodeOpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116785 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116789 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116794 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116798 "isa_tms320.tcc"
	>(0x19e00000UL, 0xffe00000UL, DecodeOpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116802 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116806 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116811 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116815 "isa_tms320.tcc"
	>(0x19c00000UL, 0xffe00000UL, DecodeOpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116819 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116823 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116828 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116832 "isa_tms320.tcc"
	>(0x19a00000UL, 0xffe00000UL, DecodeOpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116836 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116840 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116845 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116849 "isa_tms320.tcc"
	>(0x19800000UL, 0xffe0ffe0UL, DecodeOpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116853 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116857 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116862 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116866 "isa_tms320.tcc"
	>(0x19600000UL, 0xfff80000UL, DecodeOpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116870 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116874 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116879 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116883 "isa_tms320.tcc"
	>(0x19400000UL, 0xfff80000UL, DecodeOpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116887 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116891 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116896 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116900 "isa_tms320.tcc"
	>(0x19200000UL, 0xfff80000UL, DecodeOpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116904 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116908 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116913 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116917 "isa_tms320.tcc"
	>(0x19000000UL, 0xfff8fff8UL, DecodeOpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116921 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116925 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116930 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116934 "isa_tms320.tcc"
	>(0x18e00000UL, 0xffe00000UL, DecodeOpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116938 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116942 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116947 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116951 "isa_tms320.tcc"
	>(0x18c00000UL, 0xffe00000UL, DecodeOpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116955 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116959 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116964 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116968 "isa_tms320.tcc"
	>(0x18a00000UL, 0xffe00000UL, DecodeOpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116972 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116976 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116981 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116985 "isa_tms320.tcc"
	>(0x18800000UL, 0xffe0ffe0UL, DecodeOpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116989 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116993 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116998 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117002 "isa_tms320.tcc"
	>(0x18600000UL, 0xffe00000UL, DecodeOpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117006 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117010 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117015 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117019 "isa_tms320.tcc"
	>(0x18400000UL, 0xffe00000UL, DecodeOpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117023 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117027 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117032 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117036 "isa_tms320.tcc"
	>(0x18200000UL, 0xffe00000UL, DecodeOpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117040 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117044 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117049 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117053 "isa_tms320.tcc"
	>(0x18000000UL, 0xffe0ffe0UL, DecodeOpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117057 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117061 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117066 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117070 "isa_tms320.tcc"
	>(0x17e00000UL, 0xfff80000UL, DecodeOpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117074 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117078 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117083 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117087 "isa_tms320.tcc"
	>(0x17c00000UL, 0xfff80000UL, DecodeOpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117091 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117095 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117100 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117104 "isa_tms320.tcc"
	>(0x17a00000UL, 0xfff80000UL, DecodeOpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117108 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117112 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117117 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117121 "isa_tms320.tcc"
	>(0x17800000UL, 0xfff8fff8UL, DecodeOpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117125 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117129 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117134 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117138 "isa_tms320.tcc"
	>(0x17600000UL, 0xffe00000UL, DecodeOpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117142 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117146 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117151 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117155 "isa_tms320.tcc"
	>(0x17400000UL, 0xffe00000UL, DecodeOpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117159 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117163 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117168 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117172 "isa_tms320.tcc"
	>(0x17200000UL, 0xffe00000UL, DecodeOpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117176 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117180 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117185 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117189 "isa_tms320.tcc"
	>(0x17000000UL, 0xffe0ffe0UL, DecodeOpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117193 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117197 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117202 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117206 "isa_tms320.tcc"
	>(0x16e00000UL, 0xffe00000UL, DecodeOpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117210 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117214 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117219 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117223 "isa_tms320.tcc"
	>(0x16c00000UL, 0xffe00000UL, DecodeOpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117227 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117231 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117236 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117240 "isa_tms320.tcc"
	>(0x16a00000UL, 0xffe00000UL, DecodeOpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117244 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117248 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117253 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117257 "isa_tms320.tcc"
	>(0x16800000UL, 0xffe0ffe0UL, DecodeOpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117261 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117265 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117270 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117274 "isa_tms320.tcc"
	>(0x1360ffffUL, 0xffe0ffffUL, DecodeOpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117278 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117282 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117287 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117291 "isa_tms320.tcc"
	>(0x12e0ffffUL, 0xffe0ffffUL, DecodeOpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117295 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117299 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117304 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117308 "isa_tms320.tcc"
	>(0x12600001UL, 0xffe0ffffUL, DecodeOpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117312 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117316 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117321 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117325 "isa_tms320.tcc"
	>(0x11e00001UL, 0xffe0ffffUL, DecodeOpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117329 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117333 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117338 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117342 "isa_tms320.tcc"
	>(0x11600000UL, 0xfff80000UL, DecodeOpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117346 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117350 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117355 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117359 "isa_tms320.tcc"
	>(0x11400000UL, 0xfff80000UL, DecodeOpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117363 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117367 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117372 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117376 "isa_tms320.tcc"
	>(0x11200000UL, 0xfff80000UL, DecodeOpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117380 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117384 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117389 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117393 "isa_tms320.tcc"
	>(0x11000000UL, 0xfff8fff8UL, DecodeOpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117397 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117401 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117406 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117410 "isa_tms320.tcc"
	>(0x10600000UL, 0xffe00000UL, DecodeOpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117414 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117418 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117423 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117427 "isa_tms320.tcc"
	>(0x10400000UL, 0xffe00000UL, DecodeOpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117431 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117435 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117440 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117444 "isa_tms320.tcc"
	>(0x10200000UL, 0xffe00000UL, DecodeOpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117448 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117452 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117457 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117461 "isa_tms320.tcc"
	>(0x10000000UL, 0xffe0ffe0UL, DecodeOpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117465 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117469 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117478 "isa_tms320.tcc"
	>(0xde00000UL, 0xffe00000UL, DecodeOpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117482 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117486 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117491 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117495 "isa_tms320.tcc"
	>(0xdc00000UL, 0xffe00000UL, DecodeOpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117499 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117503 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117508 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117512 "isa_tms320.tcc"
	>(0xda00000UL, 0xffe00000UL, DecodeOpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117516 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117520 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117525 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117529 "isa_tms320.tcc"
	>(0xd800000UL, 0xffe0ffe0UL, DecodeOpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117533 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117537 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117542 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117546 "isa_tms320.tcc"
	>(0xd600000UL, 0xfff80000UL, DecodeOpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117550 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117554 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117559 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117563 "isa_tms320.tcc"
	>(0xd400000UL, 0xfff80000UL, DecodeOpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117567 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117571 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117576 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117580 "isa_tms320.tcc"
	>(0xd200000UL, 0xfff80000UL, DecodeOpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117584 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117588 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117593 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117597 "isa_tms320.tcc"
	>(0xd000000UL, 0xfff8fff8UL, DecodeOpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117601 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117605 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117610 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117614 "isa_tms320.tcc"
	>(0xc600000UL, 0xffe00000UL, DecodeOpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117618 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117622 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117627 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117631 "isa_tms320.tcc"
	>(0xc400000UL, 0xffe00000UL, DecodeOpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117635 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117639 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117644 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117648 "isa_tms320.tcc"
	>(0xc200000UL, 0xffe00000UL, DecodeOpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117652 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117656 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117661 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117665 "isa_tms320.tcc"
	>(0xc000000UL, 0xffe0ffe0UL, DecodeOpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117669 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117673 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117678 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117682 "isa_tms320.tcc"
	>(0xbe00000UL, 0xfff80000UL, DecodeOpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117686 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117690 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117695 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117699 "isa_tms320.tcc"
	>(0xbc00000UL, 0xfff80000UL, DecodeOpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117703 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117707 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117712 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117716 "isa_tms320.tcc"
	>(0xba00000UL, 0xfff80000UL, DecodeOpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117720 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117724 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117729 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117733 "isa_tms320.tcc"
	>(0xb800000UL, 0xfff8fff8UL, DecodeOpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117737 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117741 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117746 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117750 "isa_tms320.tcc"
	>(0xb600000UL, 0xffe00000UL, DecodeOpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117754 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117758 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117763 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117767 "isa_tms320.tcc"
	>(0xb400000UL, 0xffe00000UL, DecodeOpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117771 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117775 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117780 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117784 "isa_tms320.tcc"
	>(0xb200000UL, 0xffe00000UL, DecodeOpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117788 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117792 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117797 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117801 "isa_tms320.tcc"
	>(0xb000000UL, 0xffe0ffe0UL, DecodeOpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117805 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117809 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117814 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117818 "isa_tms320.tcc"
	>(0xae00000UL, 0xffe00000UL, DecodeOpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117822 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117826 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117831 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117835 "isa_tms320.tcc"
	>(0xac00000UL, 0xffe00000UL, DecodeOpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117839 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117843 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117848 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117852 "isa_tms320.tcc"
	>(0xaa00000UL, 0xffe00000UL, DecodeOpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117856 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117860 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117865 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117869 "isa_tms320.tcc"
	>(0xa800000UL, 0xffe0ffe0UL, DecodeOpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117873 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117877 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117882 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117886 "isa_tms320.tcc"
	>(0xa600000UL, 0xfff80000UL, DecodeOpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117890 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117894 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117899 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117903 "isa_tms320.tcc"
	>(0xa400000UL, 0xfff80000UL, DecodeOpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117907 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117911 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117916 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117920 "isa_tms320.tcc"
	>(0xa200000UL, 0xfff80000UL, DecodeOpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117924 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117928 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117933 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117937 "isa_tms320.tcc"
	>(0xa000000UL, 0xfff8fff8UL, DecodeOpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117941 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117945 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117950 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117954 "isa_tms320.tcc"
	>(0x9e00000UL, 0xffe00000UL, DecodeOpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117958 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117962 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117967 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117971 "isa_tms320.tcc"
	>(0x9c00000UL, 0xffe00000UL, DecodeOpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117975 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117979 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117984 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117988 "isa_tms320.tcc"
	>(0x9a00000UL, 0xffe00000UL, DecodeOpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117992 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117996 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118001 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118005 "isa_tms320.tcc"
	>(0x9800000UL, 0xffe0ffe0UL, DecodeOpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118009 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118013 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118018 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118022 "isa_tms320.tcc"
	>(0x5e00000UL, 0xfff80000UL, DecodeOpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118026 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118030 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118035 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118039 "isa_tms320.tcc"
	>(0x5c00000UL, 0xfff80000UL, DecodeOpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118043 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118047 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118052 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118056 "isa_tms320.tcc"
	>(0x5a00000UL, 0xfff80000UL, DecodeOpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118060 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118064 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118069 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118073 "isa_tms320.tcc"
	>(0x5800000UL, 0xfff8ffe0UL, DecodeOpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118077 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118081 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118086 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118090 "isa_tms320.tcc"
	>(0x5600000UL, 0xffe00000UL, DecodeOpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118094 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118098 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118103 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118107 "isa_tms320.tcc"
	>(0x5400000UL, 0xffe00000UL, DecodeOpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118111 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118115 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118120 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118124 "isa_tms320.tcc"
	>(0x5200000UL, 0xffe00000UL, DecodeOpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118128 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118132 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118137 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118141 "isa_tms320.tcc"
	>(0x5000000UL, 0xffe0fff8UL, DecodeOpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118145 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118149 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118154 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118158 "isa_tms320.tcc"
	>(0x4e00000UL, 0xffe00000UL, DecodeOpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118162 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118166 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118171 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118175 "isa_tms320.tcc"
	>(0x4c00000UL, 0xffe00000UL, DecodeOpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118179 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118183 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118188 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118192 "isa_tms320.tcc"
	>(0x4a00000UL, 0xffe00000UL, DecodeOpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118196 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118200 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118205 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118209 "isa_tms320.tcc"
	>(0x4800000UL, 0xffe0ffe0UL, DecodeOpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118213 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118217 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118222 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118226 "isa_tms320.tcc"
	>(0x4600000UL, 0xfff80000UL, DecodeOpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118230 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118234 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118239 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118243 "isa_tms320.tcc"
	>(0x4400000UL, 0xfff80000UL, DecodeOpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118247 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118251 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118256 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118260 "isa_tms320.tcc"
	>(0x4200000UL, 0xfff80000UL, DecodeOpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118264 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118268 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118273 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118277 "isa_tms320.tcc"
	>(0x4000000UL, 0xfff8fff8UL, DecodeOpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118281 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118285 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118290 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118294 "isa_tms320.tcc"
	>(0x3e00000UL, 0xffe00000UL, DecodeOpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118298 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118302 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118307 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118311 "isa_tms320.tcc"
	>(0x3c00000UL, 0xffe00000UL, DecodeOpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118315 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118319 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118324 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118328 "isa_tms320.tcc"
	>(0x3a00000UL, 0xffe00000UL, DecodeOpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118332 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118336 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118341 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118345 "isa_tms320.tcc"
	>(0x3800000UL, 0xffe0ffe0UL, DecodeOpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118349 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118353 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118358 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118362 "isa_tms320.tcc"
	>(0x3600000UL, 0xffe00000UL, DecodeOpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118366 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118370 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118375 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118379 "isa_tms320.tcc"
	>(0x3400000UL, 0xffe00000UL, DecodeOpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118383 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118387 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118392 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118396 "isa_tms320.tcc"
	>(0x3200000UL, 0xffe00000UL, DecodeOpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118400 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118404 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118409 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118413 "isa_tms320.tcc"
	>(0x3000000UL, 0xffe0ffe0UL, DecodeOpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118417 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118421 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118426 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118430 "isa_tms320.tcc"
	>(0x2e00000UL, 0xffe00000UL, DecodeOpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118434 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118438 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118443 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118447 "isa_tms320.tcc"
	>(0x2c00000UL, 0xffe00000UL, DecodeOpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118451 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118455 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118460 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118464 "isa_tms320.tcc"
	>(0x2a00000UL, 0xffe00000UL, DecodeOpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118468 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118472 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118477 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118481 "isa_tms320.tcc"
	>(0x2800000UL, 0xffe0ffe0UL, DecodeOpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118485 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118489 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118494 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118498 "isa_tms320.tcc"
	>(0x2600000UL, 0xffe00000UL, DecodeOpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118502 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118506 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118511 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118515 "isa_tms320.tcc"
	>(0x2400000UL, 0xffe00000UL, DecodeOpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118519 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118523 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118528 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118532 "isa_tms320.tcc"
	>(0x2200000UL, 0xffe00000UL, DecodeOpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118536 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118540 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118545 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118549 "isa_tms320.tcc"
	>(0x2000000UL, 0xffe0ffe0UL, DecodeOpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118553 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118557 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118562 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118566 "isa_tms320.tcc"
	>(0x1e00000UL, 0xfff80000UL, DecodeOpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118570 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118574 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118579 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118583 "isa_tms320.tcc"
	>(0x1c00000UL, 0xfff80000UL, DecodeOpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118587 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118591 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118596 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118600 "isa_tms320.tcc"
	>(0x1a00000UL, 0xfff80000UL, DecodeOpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118604 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118608 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118613 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118617 "isa_tms320.tcc"
	>(0x1800000UL, 0xfff8fff8UL, DecodeOpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118621 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118625 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118630 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118634 "isa_tms320.tcc"
	>(0x1600000UL, 0xffe00000UL, DecodeOpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118638 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118642 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118647 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118651 "isa_tms320.tcc"
	>(0x1400000UL, 0xffe00000UL, DecodeOpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118655 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118659 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118664 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118668 "isa_tms320.tcc"
	>(0x1200000UL, 0xffe00000UL, DecodeOpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118672 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118676 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118681 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118685 "isa_tms320.tcc"
	>(0x1000000UL, 0xffe0ffe0UL, DecodeOpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118689 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118693 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118698 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118702 "isa_tms320.tcc"
	>(0xe00000UL, 0xffe00000UL, DecodeOpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118706 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118710 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118715 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118719 "isa_tms320.tcc"
	>(0xc00000UL, 0xffe00000UL, DecodeOpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118723 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118727 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118732 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118736 "isa_tms320.tcc"
	>(0xa00000UL, 0xffe00000UL, DecodeOpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118740 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118744 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118749 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118753 "isa_tms320.tcc"
	>(0x800000UL, 0xffe0ffe0UL, DecodeOpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118757 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118761 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118766 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118770 "isa_tms320.tcc"
	>(0x600000UL, 0xfff80000UL, DecodeOpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118774 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118778 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118783 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118787 "isa_tms320.tcc"
	>(0x400000UL, 0xfff80000UL, DecodeOpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118791 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118795 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118800 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118804 "isa_tms320.tcc"
	>(0x200000UL, 0xfff80000UL, DecodeOpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118808 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118812 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118817 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118821 "isa_tms320.tcc"
	>(0x0UL, 0xfff8fff8UL, DecodeOpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118825 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118829 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118834 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118838 "isa_tms320.tcc"
	>(0x15400000UL, 0xffe00000UL, DecodeOpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118842 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118846 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118851 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118855 "isa_tms320.tcc"
	>(0x15200000UL, 0xffe00000UL, DecodeOpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118859 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118863 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118868 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118872 "isa_tms320.tcc"
	>(0x14400000UL, 0xfff80000UL, DecodeOpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118876 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118880 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118885 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118889 "isa_tms320.tcc"
	>(0x14200000UL, 0xfff80000UL, DecodeOpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118893 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118897 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118902 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118906 "isa_tms320.tcc"
	>(0xfa00000UL, 0xfff8ffffUL, DecodeOpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118910 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118914 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118919 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118923 "isa_tms320.tcc"
	>(0xf200000UL, 0xffe0ffffUL, DecodeOpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118927 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118931 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118936 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118940 "isa_tms320.tcc"
	>(0xea00000UL, 0xfff8ffffUL, DecodeOpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118944 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118948 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118953 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118957 "isa_tms320.tcc"
	>(0xe200000UL, 0xffe0ffffUL, DecodeOpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118961 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118965 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118970 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118974 "isa_tms320.tcc"
	>(0x8700000UL, 0xffffff00UL, DecodeOpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118978 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118982 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118987 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118991 "isa_tms320.tcc"
	>(0x9600000UL, 0xfff8f000UL, DecodeOpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 118995 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 118999 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119004 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119008 "isa_tms320.tcc"
	>(0x9400000UL, 0xfff80000UL, DecodeOpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119012 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119016 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119021 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119025 "isa_tms320.tcc"
	>(0x9200000UL, 0xfff80000UL, DecodeOpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119029 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119033 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119038 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119042 "isa_tms320.tcc"
	>(0x9000000UL, 0xfff8fff8UL, DecodeOpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119046 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119050 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119055 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119059 "isa_tms320.tcc"
	>(0x50600000UL, 0xf0600000UL, DecodeOpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119063 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119067 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119072 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119076 "isa_tms320.tcc"
	>(0x50400000UL, 0xf0600000UL, DecodeOpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119080 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119084 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119089 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119093 "isa_tms320.tcc"
	>(0x50200000UL, 0xf0600000UL, DecodeOpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119097 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119101 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119106 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119110 "isa_tms320.tcc"
	>(0x50000000UL, 0xf060ffe0UL, DecodeOpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119114 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119118 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119123 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119127 "isa_tms320.tcc"
	>(0x8600000UL, 0xffe00000UL, DecodeOpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119131 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119135 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119140 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119144 "isa_tms320.tcc"
	>(0x8400000UL, 0xffe00000UL, DecodeOpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119148 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119152 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119157 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119161 "isa_tms320.tcc"
	>(0x8200000UL, 0xffe00000UL, DecodeOpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119165 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119169 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119174 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119178 "isa_tms320.tcc"
	>(0x8000000UL, 0xffe0ffe0UL, DecodeOpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119182 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119186 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119191 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119195 "isa_tms320.tcc"
	>(0x40600000UL, 0xf0780000UL, DecodeOpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119199 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119203 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119208 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119212 "isa_tms320.tcc"
	>(0x40400000UL, 0xf0780000UL, DecodeOpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119216 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119220 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119225 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119229 "isa_tms320.tcc"
	>(0x40200000UL, 0xf0780000UL, DecodeOpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119233 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119237 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119242 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119246 "isa_tms320.tcc"
	>(0x40000000UL, 0xf078ffe0UL, DecodeOpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119250 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119254 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119259 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119263 "isa_tms320.tcc"
	>(0x7600000UL, 0xfff80000UL, DecodeOpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119267 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119271 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119276 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119280 "isa_tms320.tcc"
	>(0x7400000UL, 0xfff80000UL, DecodeOpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119284 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119288 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119293 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119297 "isa_tms320.tcc"
	>(0x7200000UL, 0xfff80000UL, DecodeOpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119301 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119305 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119310 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119314 "isa_tms320.tcc"
	>(0x7000000UL, 0xfff8fff8UL, DecodeOpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119318 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119322 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119327 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119331 "isa_tms320.tcc"
	>(0x6e00000UL, 0xfff80000UL, DecodeOpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119335 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119339 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119344 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119348 "isa_tms320.tcc"
	>(0x6c00000UL, 0xfff80000UL, DecodeOpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119352 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119356 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119361 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119365 "isa_tms320.tcc"
	>(0x6a00000UL, 0xfff80000UL, DecodeOpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119369 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119373 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119378 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119382 "isa_tms320.tcc"
	>(0x6800000UL, 0xfff8fff8UL, DecodeOpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119386 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119390 "isa_tms320.tcc"
	>));
}

template <
#line 45 "isa/tms320.isa"
class
#line 119397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 119400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 119404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 119407 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 119412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119416 "isa_tms320.tcc"
>::~Decoder()
{
	InvalidateDecodingCache();
}

template <
#line 45 "isa/tms320.isa"
class
#line 119425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 119428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 119432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 119435 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 119440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119444 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 119448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119452 "isa_tms320.tcc"
>::NCDecode(typename CONFIG::address_t addr, CodeType code)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119462 "isa_tms320.tcc"
	> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119477 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119481 "isa_tms320.tcc"
	>(code, addr, "???");
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 119489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 119492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 119496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 119499 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 119504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119508 "isa_tms320.tcc"
>::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 119518 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 119522 "isa_tms320.tcc"
		> *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 119541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 119544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 119548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 119551 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 119556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119560 "isa_tms320.tcc"
>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
{
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119569 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119573 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 119606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 119609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 119613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 119616 "isa_tms320.tcc"
>
inline DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 119621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119625 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 119629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119633 "isa_tms320.tcc"
>::FindPage(typename CONFIG::address_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119641 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119645 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 119679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 119682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 119686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 119689 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 119694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119698 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 119702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119706 "isa_tms320.tcc"
>::Decode(typename CONFIG::address_t addr, CodeType insn)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119712 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119716 "isa_tms320.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 119722 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 119726 "isa_tms320.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 119734 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 119738 "isa_tms320.tcc"
		> (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 119760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 119763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 119767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 119770 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 119775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119779 "isa_tms320.tcc"
>::SetLittleEndian()
{
	is_little_endian = true;
}

template <
#line 45 "isa/tms320.isa"
class
#line 119788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 119791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 119795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 119798 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 119803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 119807 "isa_tms320.tcc"
>::SetBigEndian()
{
	is_little_endian = false;
}

} } } } } } }
