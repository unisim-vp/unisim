/* -*- C++ -*- */

/* Read State Register Instructions */

op rdasr( 0b10[2]:rd[5]:0b101000[6]:rs1[5]:?[1]:?[13] )

rdasr.disasm = {
  if( rs1 == 0 )                   os << "rd %y, %r" << rd;
  else if( rs1 == 15 and rd == 0 ) os << "stbar";
  else                             os << "rd %asr" << rs1 << ", %r" << rd;
}

rdasr.execute = {
  if( rs1 == 0 ) { // unpriviledged
    sparcv8.m_gpr[rd] = sparcv8.m_y;
  } else if( rs1 == 15 and rd == 0 ) {
    sparcv8.hwtrap( Trap_t::illegal_instruction ); // XXX: stbar
  } else if( rs1 < 16 ) {
    sparcv8.hwtrap( Trap_t::illegal_instruction );
  } else {
    if( sparcv8.asr_perm( rs1 ) ) sparcv8.m_gpr[rd] = sparcv8.rdasr( rs1 );
    else                          sparcv8.hwtrap( Trap_t::privileged_instruction );
  }
}

op rdpsr( 0b10[2]:rd[5]:0b101001[6]:?[5]:?[1]:?[13] )

rdpsr.disasm = {
  os << "rd %psr, %r" << rd;
}

rdpsr.execute = {
  if( not sparcv8.super() ) { sparcv8.hwtrap( Trap_t::privileged_instruction ); return; }
  sparcv8.m_gpr[rd] = sparcv8.m_psr;
}

op rdwim( 0b10[2]:rd[5]:0b101010[6]:?[5]:?[1]:?[13] )

rdwim.disasm = {
  os << "rd %wim, %r" << rd;
}

rdwim.execute = {
  if( not sparcv8.super() ) { sparcv8.hwtrap( Trap_t::privileged_instruction ); return; }
  sparcv8.m_gpr[rd] = sparcv8.m_wim & uint32_t((uint64_t( 1 ) << sparcv8.nwindows())-1);
}

op rdtbr( 0b10[2]:rd[5]:0b101011[6]:?[5]:?[1]:?[13] )

rdtbr.disasm = {
  os << "rd %tbr, %r" << rd;
}

rdtbr.execute = {
  if( not sparcv8.super() ) { sparcv8.hwtrap( Trap_t::privileged_instruction ); return; }
  sparcv8.m_gpr[rd] = sparcv8.m_tbr;
}

/* Write State Register Instructions */

op wrasr( 0b10[2]:rd[5]:0b110000[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

wrasr.disasm = {
  if( rd == 0 )  os << "wr %r" << rs1 << ", %r" << rs2 << ", %y";
  else           os << "wr %r" << rs1 << ", %r" << rs2 << ", %asr" << rd;
}

wrasr.execute = {
  if( rd == 0 ) { // unpriviledged
    sparcv8.m_y = sparcv8.m_gpr[rs1] ^ sparcv8.m_gpr[rs2];
  } else if( rd < 16 ) {
    sparcv8.hwtrap( Trap_t::illegal_instruction );
  } else {
    if( sparcv8.asr_perm( rd ) ) sparcv8.wrasr( rd, sparcv8.m_gpr[rs1] ^ sparcv8.m_gpr[rs2] );
    else                         sparcv8.hwtrap( Trap_t::privileged_instruction );
  }
}

op wrasri( 0b10[2]:rd[5]:0b110000[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

wrasri.disasm = {
  if( rd == 0 )  os << "wr %r" << rs1 << ", " << simm13 << ", %y";
  else           os << "wr %r" << rs1 << ", " << simm13 << ", %asr" << rd;
}

wrasri.execute = {
  if( rd == 0 ) { // unpriviledged
    sparcv8.m_y = sparcv8.m_gpr[rs1] ^ simm13;
  } else if( rd < 16 ) {
    sparcv8.hwtrap( Trap_t::illegal_instruction );
  } else {
    if( sparcv8.asr_perm( rd ) ) sparcv8.wrasr( rd, sparcv8.m_gpr[rs1] ^ simm13 );
    else                         sparcv8.hwtrap( Trap_t::privileged_instruction );
  }
}

op wrpsr( 0b10[2]:?[5]:0b110001[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

wrpsr.disasm = {
  os << "wr %r" << rs1 << ", %r" << rs2 << ", %psr";
}

wrpsr.execute = {
  if( not sparcv8.super() ) { sparcv8.hwtrap( Trap_t::privileged_instruction ); return; }
  uint32_t res = sparcv8.m_gpr[rs1] ^ sparcv8.m_gpr[rs2];
  if( (res & 0x1f) >= sparcv8.nwindows() ) { sparcv8.hwtrap( Trap_t::illegal_instruction ); return; }
  sparcv8.m_psr = res;
}

op wrpsri( 0b10[2]:?[5]:0b110001[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

wrpsri.disasm = {
  os << "wr %r" << rs1 << ", " << simm13 << ", %psr";
}

wrpsri.execute = {
  if( not sparcv8.super() ) { sparcv8.hwtrap( Trap_t::privileged_instruction ); return; }
  uint32_t res = sparcv8.m_gpr[rs1] ^ simm13;
  if( (res & 0x1f) >= sparcv8.nwindows() ) { sparcv8.hwtrap( Trap_t::illegal_instruction ); return; }
  sparcv8.m_psr = res;
}

op wrwim( 0b10[2]:?[5]:0b110010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

wrwim.disasm = {
  os << "wr %r" << rs1 << ", %r" << rs2 << ", %wim";
}

wrwim.execute = {
  if( not sparcv8.super() ) { sparcv8.hwtrap( Trap_t::privileged_instruction ); return; }
  sparcv8.m_wim = (sparcv8.m_gpr[rs1] ^ sparcv8.m_gpr[rs2]) & uint32_t((uint64_t( 1 ) << sparcv8.nwindows())-1);
}

op wrwimi( 0b10[2]:?[5]:0b110010[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

wrwimi.disasm = {
  os << "wr %r" << rs1 << ", " << simm13 << ", %wim";
}

wrwimi.execute = {
  if( not sparcv8.super() ) { sparcv8.hwtrap( Trap_t::privileged_instruction ); return; }
  sparcv8.m_wim = (sparcv8.m_gpr[rs1] ^ simm13) & uint32_t((uint64_t( 1 ) << sparcv8.nwindows())-1);
}

op wrtbr( 0b10[2]:?[5]:0b110011[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

wrtbr.disasm = {
  os << "wr %r" << rs1 << ", %r" << rs2 << ", %tbr";
}

wrtbr.execute = {
  if( not sparcv8.super() ) { sparcv8.hwtrap( Trap_t::privileged_instruction ); return; }
  sparcv8.m_tbr = (sparcv8.m_gpr[rs1] ^ sparcv8.m_gpr[rs2]);
}

op wrtbri( 0b10[2]:?[5]:0b110011[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

wrtbri.disasm = {
  os << "wr %r" << rs1 << ", " << simm13 << ", %tbr";
}

wrtbri.execute = {
  if( not sparcv8.super() ) { sparcv8.hwtrap( Trap_t::privileged_instruction ); return; }
  sparcv8.m_tbr = (sparcv8.m_gpr[rs1] ^ simm13) & uint32_t((uint64_t( 1 ) << sparcv8.nwindows())-1);
}

/* Unimplemented Instruction */

op unimp( 0b00[2]:?[5]:0b000[3]:const22[22] )

unimp.disasm = {
  os << "unimp " << const22;
}

unimp.execute = {
  sparcv8.hwtrap( Trap_t::illegal_instruction );
}
