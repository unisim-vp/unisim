/*
 *  Copyright (c) 2007-2020,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific 
 *     prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 *  ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr)
 */

/* SAVE and RESTORE Instructions */

op save( 0b10[2]:rd[5]:0b111100[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

save.disasm = {
  sink << "save %r" << rs1 << ", %r" << rs2 << ", %r" << rd;
}

save.execute = {
  if (cpu.invalidwindow( -1 ))
    cpu.abort( Trap_t::window_overflow );
  
  uint32_t result = cpu.m_gpr[rs1] + cpu.m_gpr[rs2];
  cpu.rotate( -1 );
  cpu.m_gpr[rd] = result;
}

op savei( 0b10[2]:rd[5]:0b111100[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

savei.disasm = {
  if( simm13 >= 0 ) sink << "save %r" << rs1 << ", " << "0x" << hex << simm13 << ", %r" << rd;
  else              sink << "save %r" << rs1 << ", -" << "0x" << hex << -simm13 << ", %r" << rd;
}

savei.execute = {
  if (cpu.invalidwindow( -1 ))
    cpu.abort( Trap_t::window_overflow );
  
  uint32_t result = cpu.m_gpr[rs1] + simm13;
  cpu.rotate( -1 );
  cpu.m_gpr[rd] = result;
}

op restore( 0b10[2]:rd[5]:0b111101[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

restore.disasm = {
  sink << "restore %r" << rs1 << ", %r" << rs2 << ", %r" << rd;
}

restore.execute = {
  if (cpu.invalidwindow( +1 ))
    cpu.abort( Trap_t::window_underflow );
  
  uint32_t result = cpu.m_gpr[rs1] + cpu.m_gpr[rs2];
  cpu.rotate( +1 );
  cpu.m_gpr[rd] = result;
}

op restorei( 0b10[2]:rd[5]:0b111101[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

restorei.disasm = {
  if( simm13 >= 0 ) sink << "restore %r" << rs1 << ", " << "0x" << hex << simm13 << ", %r" << rd;
  else              sink << "restore %r" << rs1 << ", -" << "0x" << hex << -simm13 << ", %r" << rd;
}

restorei.execute = {
  if (cpu.invalidwindow( +1 ))
    cpu.abort( Trap_t::window_underflow );
  
  uint32_t result = cpu.m_gpr[rs1] + simm13;
  cpu.rotate( +1 );
  cpu.m_gpr[rd] = result;
}

/* Branch on Integer Condition Codes Instructions */

op ba( 0b00[2]:annul[1]:0b1000[4]:0b010[3]:shl<2> sext<32> disp22[22] )

ba.disasm = {
  sink << "ba" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

ba.execute = {
  cpu.m_nnpc = cpu.m_pc + disp22;
  cpu.m_annul = annul;
}

op bn( 0b00[2]:annul[1]:0b0000[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bn.disasm = {
  sink << "bn" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bn.execute = {
  cpu.m_annul = annul;
}

op bne( 0b00[2]:annul[1]:0b1001[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bne.disasm = {
  sink << "bne" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bne.execute = {
  if( cpu.condne() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op be( 0b00[2]:annul[1]:0b0001[4]:0b010[3]:shl<2> sext<32> disp22[22] )

be.disasm = {
  sink << "be" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

be.execute = {
  if( cpu.conde() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bg( 0b00[2]:annul[1]:0b1010[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bg.disasm = {
  sink << "bg" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bg.execute = {
  if( cpu.condg() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op ble( 0b00[2]:annul[1]:0b0010[4]:0b010[3]:shl<2> sext<32> disp22[22] )

ble.disasm = {
  sink << "ble" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

ble.execute = {
  if( cpu.condle() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bge( 0b00[2]:annul[1]:0b1011[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bge.disasm = {
  sink << "bge" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bge.execute = {
  if( cpu.condge() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bl( 0b00[2]:annul[1]:0b0011[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bl.disasm = {
  sink << "bl" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bl.execute = {
  if( cpu.condl() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bgu( 0b00[2]:annul[1]:0b1100[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bgu.disasm = {
  sink << "bgu" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bgu.execute = {
  if( cpu.condgu() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bleu( 0b00[2]:annul[1]:0b0100[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bleu.disasm = {
  sink << "bleu" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bleu.execute = {
  if( cpu.condleu() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bcc( 0b00[2]:annul[1]:0b1101[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bcc.disasm = {
  sink << "bcc" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bcc.execute = {
  if( cpu.condcc() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bcs( 0b00[2]:annul[1]:0b0101[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bcs.disasm = {
  sink << "bcs" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bcs.execute = {
  if( cpu.condcs() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bpos( 0b00[2]:annul[1]:0b1110[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bpos.disasm = {
  sink << "bpos" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bpos.execute = {
  if( cpu.condpos() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bneg( 0b00[2]:annul[1]:0b0110[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bneg.disasm = {
  sink << "bneg" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bneg.execute = {
  if( cpu.condneg() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bvc( 0b00[2]:annul[1]:0b1111[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bvc.disasm = {
  sink << "bvc" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bvc.execute = {
  if( cpu.condvc() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op bvs( 0b00[2]:annul[1]:0b0111[4]:0b010[3]:shl<2> sext<32> disp22[22] )

bvs.disasm = {
  sink << "bvs" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

bvs.execute = {
  if( cpu.condvs() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

/* Branch on Floating-point Condition Codes Instructions */

op fba( 0b00[2]:annul[1]:0b1000[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fba.disasm = {
  sink << "fba" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fba.execute = {
  cpu.m_nnpc = cpu.m_pc + disp22;
  cpu.m_annul = annul;
}

op fbn( 0b00[2]:annul[1]:0b0000[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbn.disasm = {
  sink << "fbn" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbn.execute = {
  cpu.m_annul = annul;
}

op fbu( 0b00[2]:annul[1]:0b0111[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbu.disasm = {
  sink << "fbu" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbu.execute = {
  if( cpu.fcondu() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbg( 0b00[2]:annul[1]:0b0110[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbg.disasm = {
  sink << "fbg" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbg.execute = {
  if( cpu.fcondg() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbug( 0b00[2]:annul[1]:0b0101[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbug.disasm = {
  sink << "fbug" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbug.execute = {
  if( cpu.fcondug() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbl( 0b00[2]:annul[1]:0b0100[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbl.disasm = {
  sink << "fbl" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbl.execute = {
  if( cpu.fcondl() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbul( 0b00[2]:annul[1]:0b0011[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbul.disasm = {
  sink << "fbul" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbul.execute = {
  if( cpu.fcondul() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fblg( 0b00[2]:annul[1]:0b0010[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fblg.disasm = {
  sink << "fblg" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fblg.execute = {
  if( cpu.fcondlg() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbne( 0b00[2]:annul[1]:0b0001[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbne.disasm = {
  sink << "fbne" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbne.execute = {
  if( cpu.fcondne() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbe( 0b00[2]:annul[1]:0b1001[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbe.disasm = {
  sink << "fbe" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbe.execute = {
  if( cpu.fconde() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbue( 0b00[2]:annul[1]:0b1010[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbue.disasm = {
  sink << "fbue" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbue.execute = {
  if( cpu.fcondue() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbge( 0b00[2]:annul[1]:0b1011[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbge.disasm = {
  sink << "fbge" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbge.execute = {
  if( cpu.fcondge() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbuge( 0b00[2]:annul[1]:0b1100[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbuge.disasm = {
  sink << "fbuge" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbuge.execute = {
  if( cpu.fconduge() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fble( 0b00[2]:annul[1]:0b1101[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fble.disasm = {
  sink << "fble" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fble.execute = {
  if( cpu.fcondle() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbule( 0b00[2]:annul[1]:0b1110[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbule.disasm = {
  sink << "fbule" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbule.execute = {
  if( cpu.fcondule() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

op fbo( 0b00[2]:annul[1]:0b1111[4]:0b110[3]:shl<2> sext<32> disp22[22] )

fbo.disasm = {
  sink << "fbo" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

fbo.execute = {
  if( cpu.fcondo() )
  { cpu.m_nnpc = cpu.m_pc + disp22; }
  else
  { cpu.m_annul = annul; }
}

/* Branch on Coprocessor Condition Codes Instructions */

op cba( 0b00[2]:annul[1]:0b1000[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cba.disasm = {
  sink << "cba" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cbn( 0b00[2]:annul[1]:0b0000[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cbn.disasm = {
  sink << "cbn" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb3( 0b00[2]:annul[1]:0b0111[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb3.disasm = {
  sink << "cb3" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb2( 0b00[2]:annul[1]:0b0110[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb2.disasm = {
  sink << "cb2" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb23( 0b00[2]:annul[1]:0b0101[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb23.disasm = {
  sink << "cb23" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb1( 0b00[2]:annul[1]:0b0100[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb1.disasm = {
  sink << "cb1" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb13( 0b00[2]:annul[1]:0b0011[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb13.disasm = {
  sink << "cb13" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb12( 0b00[2]:annul[1]:0b0010[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb12.disasm = {
  sink << "cb12" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb123( 0b00[2]:annul[1]:0b0001[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb123.disasm = {
  sink << "cb123" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb0( 0b00[2]:annul[1]:0b1001[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb0.disasm = {
  sink << "cb0" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb03( 0b00[2]:annul[1]:0b1010[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb03.disasm = {
  sink << "cb03" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb02( 0b00[2]:annul[1]:0b1011[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb02.disasm = {
  sink << "cb02" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb023( 0b00[2]:annul[1]:0b1100[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb023.disasm = {
  sink << "cb023" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb01( 0b00[2]:annul[1]:0b1101[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb01.disasm = {
  sink << "cb01" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb013( 0b00[2]:annul[1]:0b1110[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb013.disasm = {
  sink << "cb013" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

op cb012( 0b00[2]:annul[1]:0b1111[4]:0b111[3]:shl<2> sext<32> disp22[22] )

cb012.disasm = {
  sink << "cb012" << (annul ? ",a" : "") << " " << "0x" << hex << pc + disp22;
}

/* Call and Link Instructions */

op call( 0b01[2]:disp30[30] )

call.disasm = {
  sink << "call " << "0x" << hex << 4*disp30;
}

call.execute = {
  uint32_t address = cpu.m_pc + 4*disp30;
  cpu.jmp( address, 15 );
}

/* Jump and Link Instructions */

op jmpl( 0b10[2]:rd[5]:0b111000[6]:rs1[5]:0b0[1]:asi[8]:rs2[5] )

jmpl.disasm = {
  sink << "jmpl %r" << rs1 << " + %r" << rs2 << ", %r" << rd;
}

jmpl.execute = {
  cpu.jmp( cpu.m_gpr[rs1] + cpu.m_gpr[rs2], rd );
}

op jmpli( 0b10[2]:rd[5]:0b111000[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

jmpli.disasm = {
  if( simm13 >= 0 ) sink << "jmpl %r" << rs1 << " + " << "0x" << hex << simm13 << ", %r" << rd;
  else              sink << "jmpl %r" << rs1 << " - " << "0x" << hex << -simm13 << ", %r" << rd;
}

jmpli.execute = {
  cpu.jmp( cpu.m_gpr[rs1] + simm13, rd );
}

/* Return from Trap Instructions */

op rett( 0b10[2]:?[5]:0b111001[6]:rs1[5]:0b0[1]:asi[8]:rs2[5] )

rett.disasm = {
  sink << "rett %r" << rs1 << " + %r" << rs2;
}

rett.execute = {
  if (cpu.et())
    cpu.abort( cpu.super() ? Trap_t::illegal_instruction : Trap_t::privileged_instruction );
  
  if (not cpu.super())
    {
     cpu.m_execute_mode = 0;
     cpu.abort( Trap_t::privileged_instruction );
    }
  
  if (cpu.invalidwindow( +1 ))
    {
     cpu.m_execute_mode = 0;
     cpu.abort( Trap_t::window_underflow );
    }
  
  uint32_t address = cpu.m_gpr[rs1] + cpu.m_gpr[rs2];
  if (address & 0x3)
    {
      cpu.m_execute_mode = 0;
      cpu.abort( Trap_t::mem_address_not_aligned );
    }
  
  cpu.et() = 1;
  cpu.m_nnpc = address;
  cpu.rotate( +1 );
  cpu.s() = uint32_t( cpu.ps() );
}

op retti( 0b10[2]:?[5]:0b111001[6]:rs1[5]:0b1[1]:sext<32> simm13[13] )

retti.disasm = {
  if( simm13 >= 0 ) sink << "rett %r" << rs1 << " + " << "0x" << hex << simm13;
  else              sink << "rett %r" << rs1 << " - " << "0x" << hex << -simm13;
}

retti.execute = {
  if (cpu.et())
    cpu.abort( cpu.super() ? Trap_t::illegal_instruction : Trap_t::privileged_instruction );
  
  if (not cpu.super())
    {
     cpu.m_execute_mode = 0;
     cpu.abort( Trap_t::privileged_instruction );
    }
  
  if (cpu.invalidwindow( +1 ))
    {
     cpu.m_execute_mode = 0;
     cpu.abort( Trap_t::window_underflow );
    }
  
  uint32_t address = cpu.m_gpr[rs1] + simm13;
  if (address & 0x3)
    {
      cpu.m_execute_mode = 0;
      cpu.abort( Trap_t::mem_address_not_aligned );
    }
  
  cpu.et() = 1;
  cpu.m_nnpc = address;
  cpu.rotate( +1 );
  cpu.s() = uint32_t( cpu.ps() );
}

/* Trap on Integer Condition Codes Instructions */

op ta( 0b10[2]:?[1]:0b1000[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

ta.disasm = {
  sink << "ta %r" << rs1 << " + %r" << rs2;
}

ta.execute = {
  cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tai( 0b10[2]:?[1]:0b1000[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tai.disasm = {
  sink << "ta %r" << rs1 << " + " << "0x" << hex << imm7;
}

tai.execute = {
  cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tn( 0b10[2]:?[1]:0b0000[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tn.disasm = {
  sink << "tn %r" << rs1 << " + %r" << rs2;
}

tn.execute = {
}

op tni( 0b10[2]:?[1]:0b0000[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tni.disasm = {
  sink << "tn %r" << rs1 << " + " << "0x" << hex << imm7;
}

tni.execute = {
}

op tne( 0b10[2]:?[1]:0b1001[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tne.disasm = {
  sink << "tne %r" << rs1 << " + %r" << rs2;
}

tne.execute = {
  if( cpu.condne() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tnei( 0b10[2]:?[1]:0b1001[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tnei.disasm = {
  sink << "tne %r" << rs1 << " + " << "0x" << hex << imm7;
}

tnei.execute = {
  if( cpu.condne() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op te( 0b10[2]:?[1]:0b0001[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

te.disasm = {
  sink << "te %r" << rs1 << " + %r" << rs2;
}

te.execute = {
  if( cpu.conde() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tei( 0b10[2]:?[1]:0b0001[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tei.disasm = {
  sink << "te %r" << rs1 << " + " << "0x" << hex << imm7;
}

tei.execute = {
  if( cpu.conde() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tg( 0b10[2]:?[1]:0b1010[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tg.disasm = {
  sink << "tg %r" << rs1 << " + %r" << rs2;
}

tg.execute = {
  if( cpu.condg() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tgi( 0b10[2]:?[1]:0b1010[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tgi.disasm = {
  sink << "tg %r" << rs1 << " + " << "0x" << hex << imm7;
}

tgi.execute = {
  if( cpu.condg() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tle( 0b10[2]:?[1]:0b0010[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tle.disasm = {
  sink << "tle %r" << rs1 << " + %r" << rs2;
}

tle.execute = {
  if( cpu.condle() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tlei( 0b10[2]:?[1]:0b0010[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tlei.disasm = {
  sink << "tle %r" << rs1 << " + " << "0x" << hex << imm7;
}

tlei.execute = {
  if( cpu.condle() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tge( 0b10[2]:?[1]:0b1011[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tge.disasm = {
  sink << "tge %r" << rs1 << " + %r" << rs2;
}

tge.execute = {
  if( cpu.condge() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tgei( 0b10[2]:?[1]:0b1011[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tgei.disasm = {
  sink << "tge %r" << rs1 << " + " << "0x" << hex << imm7;
}

tgei.execute = {
  if( cpu.condge() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tl( 0b10[2]:?[1]:0b0011[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tl.disasm = {
  sink << "tl %r" << rs1 << " + %r" << rs2;
}

tl.execute = {
  if( cpu.condl() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tli( 0b10[2]:?[1]:0b0011[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tli.disasm = {
  sink << "tl %r" << rs1 << " + " << "0x" << hex << imm7;
}

tli.execute = {
  if( cpu.condl() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tgu( 0b10[2]:?[1]:0b1100[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tgu.disasm = {
  sink << "tgu %r" << rs1 << " + %r" << rs2;
}

tgu.execute = {
  if( cpu.condgu() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tgui( 0b10[2]:?[1]:0b1100[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tgui.disasm = {
  sink << "tgu %r" << rs1 << " + " << "0x" << hex << imm7;
}

tgui.execute = {
  if( cpu.condgu() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tleu( 0b10[2]:?[1]:0b0100[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tleu.disasm = {
  sink << "tleu %r" << rs1 << " + %r" << rs2;
}

tleu.execute = {
  if( cpu.condleu() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tleui( 0b10[2]:?[1]:0b0100[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tleui.disasm = {
  sink << "tleu %r" << rs1 << " + " << "0x" << hex << imm7;
}

tleui.execute = {
  if( cpu.condleu() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tcc( 0b10[2]:?[1]:0b1101[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tcc.disasm = {
  sink << "tcc %r" << rs1 << " + %r" << rs2;
}

tcc.execute = {
  if( cpu.condcc() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tcci( 0b10[2]:?[1]:0b1101[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tcci.disasm = {
  sink << "tcc %r" << rs1 << " + " << "0x" << hex << imm7;
}

tcci.execute = {
  if( cpu.condcc() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tcs( 0b10[2]:?[1]:0b0101[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tcs.disasm = {
  sink << "tcs %r" << rs1 << " + %r" << rs2;
}

tcs.execute = {
  if( cpu.condcs() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tcsi( 0b10[2]:?[1]:0b0101[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tcsi.disasm = {
  sink << "tcs %r" << rs1 << " + " << "0x" << hex << imm7;
}

tcsi.execute = {
  if( cpu.condcs() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tpos( 0b10[2]:?[1]:0b1110[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tpos.disasm = {
  sink << "tpos %r" << rs1 << " + %r" << rs2;
}

tpos.execute = {
  if( cpu.condpos() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tposi( 0b10[2]:?[1]:0b1110[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tposi.disasm = {
  sink << "tpos %r" << rs1 << " + " << "0x" << hex << imm7;
}

tposi.execute = {
  if( cpu.condpos() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tneg( 0b10[2]:?[1]:0b0110[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tneg.disasm = {
  sink << "tneg %r" << rs1 << " + %r" << rs2;
}

tneg.execute = {
  if( cpu.condneg() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tnegi( 0b10[2]:?[1]:0b0110[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tnegi.disasm = {
  sink << "tneg %r" << rs1 << " + " << "0x" << hex << imm7;
}

tnegi.execute = {
  if( cpu.condneg() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tvc( 0b10[2]:?[1]:0b1111[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tvc.disasm = {
  sink << "tvc %r" << rs1 << " + %r" << rs2;
}

tvc.execute = {
  if( cpu.condvc() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tvci( 0b10[2]:?[1]:0b1111[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tvci.disasm = {
  sink << "tvc %r" << rs1 << " + " << "0x" << hex << imm7;
}

tvci.execute = {
  if( cpu.condvc() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

op tvs( 0b10[2]:?[1]:0b0111[4]:0b111010[6]:rs1[5]:0b0[1]:?[8]:rs2[5] )

tvs.disasm = {
  sink << "tvs %r" << rs1 << " + %r" << rs2;
}

tvs.execute = {
  if( cpu.condvs() ) cpu.swtrap( cpu.m_gpr[rs1] + cpu.m_gpr[rs2] );
}

op tvsi( 0b10[2]:?[1]:0b0111[4]:0b111010[6]:rs1[5]:0b1[1]:?[6]:imm7[7] )

tvsi.disasm = {
  sink << "tvs %r" << rs1 << " + " << "0x" << hex << imm7;
}

tvsi.execute = {
  if( cpu.condvs() ) cpu.swtrap( cpu.m_gpr[rs1] + imm7 );
}

