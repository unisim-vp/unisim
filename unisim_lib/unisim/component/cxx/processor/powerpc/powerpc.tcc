#include "powerpc.hh"
#include <cassert>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"


#include <unisim/util/arithmetic/arithmetic.hh>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using unisim::util::arithmetic::Add32;
					using unisim::util::arithmetic::RotateLeft;
					using unisim::util::arithmetic::CountLeadingZeros;

					inline uint32_t Mask(uint32_t mb, uint32_t me)
					{
						return (mb > me) ? ~(((uint32_t) -1 >> mb) ^ ((me >= 31) ? 0 : (uint32_t) -1 >> (me + 1))) : (((uint32_t)-1 >> mb) ^ ((me >= 31) ? 0 : (uint32_t) -1 >> (me + 1)));
					}

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 30 "powerpc.tcc"
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"


#include <unisim/component/cxx/processor/powerpc/floating.hh>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					template <class CONFIG, class FLOAT>
					inline void GenFPSCR_FPRF(uint32_t& fpscr, const FLOAT& result)
					{
						fpscr = fpscr & ~CONFIG::FPSCR_FPRF_MASK;

						if(unlikely(result.isQNaN()))
						{
							fpscr = fpscr | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isInfty()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isDenormalized()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_DENORMAL << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_DENORMAL << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isZero()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_NORMAL << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_NORMAL << CONFIG::FPSCR_FPRF_OFFSET);
						}
					}

					template <class CONFIG, class FLOAT>
					inline void GenFPSCR_FR(uint32_t& fpscr, const FLOAT& result, const Flags& flags)
					{
						if(flags.hasIncrementFraction(result.isNegative()))
						fpscr = fpscr | CONFIG::FPSCR_FR_MASK;
						else
						fpscr = fpscr & ~CONFIG::FPSCR_FR_MASK;
					}

					template <class CONFIG>
					inline void GenFPSCR_FI(uint32_t& fpscr, const Flags& flags)
					{
						if(flags.isApproximate())
						fpscr = fpscr | CONFIG::FPSCR_FI_MASK;
						else
						fpscr = fpscr & ~CONFIG::FPSCR_FI_MASK;
					}

					template <class CONFIG>
					inline void GenFPSCR_OX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasFlowException() && flags.isApproximate()))
						{
							if(flags.isOverflow())
							{
								fpscr = fpscr | CONFIG::FPSCR_OX_MASK;
							}
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_UX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasFlowException() && flags.isApproximate()))
						{
							if(flags.isUnderflow())
							{
								fpscr = fpscr | CONFIG::FPSCR_UX_MASK;
							}
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_ZX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isDivisionByZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXSNAN(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasSNaNOperand()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXISI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyMinusInfty()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXISI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXIDI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyOnInfty()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXIDI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXZDZ(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isZeroOnZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXZDZ_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXIMZ(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyMultZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXIMZ_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXCVI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isOverflow()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXCVI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_XX(uint32_t& fpscr)
					{
						fpscr = fpscr | ((fpscr & CONFIG::FPSCR_FI_MASK) ? CONFIG::FPSCR_XX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_FX(uint32_t& fpscr, uint32_t old_fpscr)
					{
						fpscr = fpscr |
						(((~old_fpscr & fpscr & CONFIG::FPSCR_OX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_UX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_ZX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_XX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSNAN_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXISI_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXIDI_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXZDZ_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXIMZ_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXVC_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSOFT_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSQRT_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXCVI_MASK)) ? CONFIG::FPSCR_FX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_VX(uint32_t& fpscr)
					{
						fpscr = (fpscr & ~CONFIG::FPSCR_VX_MASK) |
						(((fpscr & CONFIG::FPSCR_VXSNAN_MASK) |
						(fpscr & CONFIG::FPSCR_VXISI_MASK) |
						(fpscr & CONFIG::FPSCR_VXIDI_MASK) |
						(fpscr & CONFIG::FPSCR_VXZDZ_MASK) |
						(fpscr & CONFIG::FPSCR_VXIMZ_MASK) |
						(fpscr & CONFIG::FPSCR_VXVC_MASK) |
						(fpscr & CONFIG::FPSCR_VXSOFT_MASK) |
						(fpscr & CONFIG::FPSCR_VXSQRT_MASK) |
						(fpscr & CONFIG::FPSCR_VXCVI_MASK)) ? CONFIG::FPSCR_VX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_FEX(uint32_t& fpscr)
					{
						fpscr = (fpscr & ~CONFIG::FPSCR_FEX_MASK) |
						((((fpscr & CONFIG::FPSCR_VX_MASK) && (fpscr & CONFIG::FPSCR_VE_MASK)) ||
						((fpscr & CONFIG::FPSCR_OX_MASK) && (fpscr & CONFIG::FPSCR_OE_MASK)) ||
						((fpscr & CONFIG::FPSCR_UX_MASK) && (fpscr & CONFIG::FPSCR_UE_MASK)) ||
						((fpscr & CONFIG::FPSCR_ZX_MASK) && (fpscr & CONFIG::FPSCR_ZE_MASK)) ||
						((fpscr & CONFIG::FPSCR_XX_MASK) && (fpscr & CONFIG::FPSCR_XE_MASK))) ? CONFIG::FPSCR_FEX_MASK : 0);
					}

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 243 "powerpc.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"


#include <iostream>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using std::hex;
					using std::dec;
					using std::endl;
					using std::ios;

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 266 "powerpc.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace powerpc {
template <
#line 38 "ppc.isa"
class
#line 271 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 274 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 279 "powerpc.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
num_uops(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 285 "powerpc.tcc"
),
num_insn_operands(
#line 37 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
0
#line 290 "powerpc.tcc"
),
execution_unit(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
CONFIG::NO_UNIT_T
#line 295 "powerpc.tcc"
),
serialization(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
CONFIG::NO_SERIALIZATION
#line 300 "powerpc.tcc"
),
insn_latency(
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 305 "powerpc.tcc"
),
insn_inv_thoughput(
#line 42 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 310 "powerpc.tcc"
),
function(
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
FnInvalid
#line 315 "powerpc.tcc"
),
latency(
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 320 "powerpc.tcc"
),
nstages(
#line 58 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 325 "powerpc.tcc"
),
noperands(
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
0
#line 330 "powerpc.tcc"
),
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 38 "ppc.isa"
class
#line 341 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 344 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 349 "powerpc.tcc"
>::~Operation()
{
}

template <
#line 38 "ppc.isa"
class
#line 357 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 360 "powerpc.tcc"
>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 364 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 368 "powerpc.tcc"
>::is_sign_extended()
{
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 375 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 380 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 383 "powerpc.tcc"
>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 387 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 391 "powerpc.tcc"
>::load_need_conversion()
{
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 398 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 403 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 406 "powerpc.tcc"
>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 410 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 414 "powerpc.tcc"
>::store_need_conversion()
{
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 421 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 426 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 429 "powerpc.tcc"
>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
uint32_t
#line 433 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 437 "powerpc.tcc"
>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 441 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 444 "powerpc.tcc"
)
{
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation do not provide single precision information: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 454 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 459 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 462 "powerpc.tcc"
>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
list <Operation<CONFIG> *>
#line 466 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 470 "powerpc.tcc"
>::split_into()
{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation non splitable: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 480 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 485 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 488 "powerpc.tcc"
>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 492 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 496 "powerpc.tcc"
>::is_splitted()
{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 503 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 508 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 511 "powerpc.tcc"
>
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::address_t
#line 515 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 519 "powerpc.tcc"
>::loadstore_effective_address(
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 523 "powerpc.tcc"
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 526 "powerpc.tcc"
)
{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return cpu->GetEA();
	}
#line 533 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 538 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 541 "powerpc.tcc"
>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 545 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 549 "powerpc.tcc"
>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 553 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 556 "powerpc.tcc"
)
{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 566 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 571 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 574 "powerpc.tcc"
>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 578 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 582 "powerpc.tcc"
>::memory_access_size()
{
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0, cerr);
		cerr << endl;
		exit(1);
	}
#line 592 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 597 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 600 "powerpc.tcc"
>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 604 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 608 "powerpc.tcc"
>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 612 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 615 "powerpc.tcc"
)
{
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action loadstore_target_register not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 625 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 630 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 633 "powerpc.tcc"
>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 637 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 641 "powerpc.tcc"
>::branch_conditioned()
{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 648 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 653 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 656 "powerpc.tcc"
>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 660 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 664 "powerpc.tcc"
>::branch_linked()
{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return false;
	}
#line 671 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 676 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 679 "powerpc.tcc"
>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 683 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 687 "powerpc.tcc"
>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::STATE *
#line 691 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 694 "powerpc.tcc"
)
{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 701 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 706 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 709 "powerpc.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 713 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 717 "powerpc.tcc"
>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 721 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cia
#line 724 "powerpc.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::STATE *
#line 728 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 731 "powerpc.tcc"
)
{
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return 0;
	}
#line 738 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 743 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 746 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 753 "powerpc.tcc"
>::initialize_operands()
{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
	{
		stringstream ss;
		Operation<CONFIG>::disasm(0,ss);
		string s;
		ss >> s;
		if(s!="???")
		{ cerr << "Error: missing initialize_operands for instruction \"" << s << "\" !" << endl;
		}
	}
#line 766 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 771 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 774 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 781 "powerpc.tcc"
>::initialize_latencies()
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
	{
	}
#line 787 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 792 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 795 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 802 "powerpc.tcc"
>::initialize_function()
{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
	{
		/*
		Operation<CONFIG>::function = FnInvalid;
		registers_written = RegNone;
		*/
	}
#line 812 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 817 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 820 "powerpc.tcc"
>
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 824 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 828 "powerpc.tcc"
>::get_num_uops(
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 832 "powerpc.tcc"
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 835 "powerpc.tcc"
)
{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{ return 1; }
#line 840 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 845 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 848 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 855 "powerpc.tcc"
>::initialize_write_fpscr()
{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 860 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 865 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 868 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 875 "powerpc.tcc"
>::initialize_read_xer()
{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 880 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 885 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 888 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 895 "powerpc.tcc"
>::initialize_write_xer()
{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 900 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 905 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 908 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 915 "powerpc.tcc"
>::initialize_write_crbd()
{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 920 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 925 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 928 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 935 "powerpc.tcc"
>::initialize_write_cr()
{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 940 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 945 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 948 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 955 "powerpc.tcc"
>::initialize_read_crbb()
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 960 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 965 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 968 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 975 "powerpc.tcc"
>::initialize_read_crba()
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 980 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 985 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 988 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 995 "powerpc.tcc"
>::initialize_read_cr()
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1000 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1005 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1008 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1015 "powerpc.tcc"
>::initialize_write_ctr()
{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1020 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1025 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1028 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1035 "powerpc.tcc"
>::initialize_write_lr()
{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1040 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1045 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1048 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1055 "powerpc.tcc"
>::initialize_write_ear()
{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1060 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1065 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1068 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1075 "powerpc.tcc"
>::initialize_write_ra()
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1080 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1085 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1088 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1095 "powerpc.tcc"
>::initialize_write_rd()
{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1100 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1105 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1108 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1115 "powerpc.tcc"
>::initialize_write_fd()
{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1120 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1125 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1128 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1135 "powerpc.tcc"
>::initialize_read_ctr()
{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1140 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1145 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1148 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1155 "powerpc.tcc"
>::initialize_read_lr()
{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1160 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1165 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1168 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1175 "powerpc.tcc"
>::initialize_read_fs()
{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1180 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1185 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1188 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1195 "powerpc.tcc"
>::initialize_read_fc()
{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1200 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1205 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1208 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1215 "powerpc.tcc"
>::initialize_read_fb()
{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1220 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1225 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1228 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1235 "powerpc.tcc"
>::initialize_read_fa()
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1240 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1245 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1248 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1255 "powerpc.tcc"
>::initialize_read_rs()
{
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1260 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1265 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1268 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1275 "powerpc.tcc"
>::initialize_read_rb()
{
#line 60 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1280 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1285 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1288 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1295 "powerpc.tcc"
>::initialize_read_ra()
{
#line 58 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1300 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1305 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1308 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1315 "powerpc.tcc"
>::initialize_serialization()
{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1320 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1325 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1328 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1335 "powerpc.tcc"
>::initialize_unit()
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1340 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1345 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1348 "powerpc.tcc"
>
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
void
#line 1352 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1356 "powerpc.tcc"
>::uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 1360 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 1363 "powerpc.tcc"
,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 1367 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
uop_num
#line 1370 "powerpc.tcc"
)
{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{
		assert(uop_num == 0);
		execute(cpu);
	}
#line 1378 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1383 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1386 "powerpc.tcc"
>
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
void
#line 1390 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1394 "powerpc.tcc"
>::resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 1398 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 1401 "powerpc.tcc"
,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 1405 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
uop_num
#line 1408 "powerpc.tcc"
)
{
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{
		assert(uop_num == 0);
	}
#line 1415 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1420 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1423 "powerpc.tcc"
>
#line 64 "ppc.isa"
void
#line 1427 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1431 "powerpc.tcc"
>::disasm(
#line 64 "ppc.isa"
typename CONFIG::STATE *
#line 1435 "powerpc.tcc"
#line 64 "ppc.isa"
cpu
#line 1438 "powerpc.tcc"
,
#line 64 "ppc.isa"
ostream&
#line 1442 "powerpc.tcc"
#line 64 "ppc.isa"
os
#line 1445 "powerpc.tcc"
)
{
#line 64 "ppc.isa"
	{
		os << "???";
	}
#line 1452 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1457 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1460 "powerpc.tcc"
>
#line 60 "ppc.isa"
void
#line 1464 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1468 "powerpc.tcc"
>::execute(
#line 60 "ppc.isa"
typename CONFIG::STATE *
#line 1472 "powerpc.tcc"
#line 60 "ppc.isa"
cpu
#line 1475 "powerpc.tcc"
)
{
#line 60 "ppc.isa"
	{
		throw IllegalInstructionException<CONFIG>();
	}
#line 1482 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1487 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1490 "powerpc.tcc"
>
class OpAdd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1495 "powerpc.tcc"
>
{
public:
	OpAdd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 1542 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 1546 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 1549 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 1554 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 1558 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 1561 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 1565 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 1568 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1737 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1740 "powerpc.tcc"
>
class OpAddc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1745 "powerpc.tcc"
>
{
public:
	OpAddc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 1792 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 1796 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 1799 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 1804 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 1808 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 1811 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 1815 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 1818 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1990 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1993 "powerpc.tcc"
>
class OpAdde : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1998 "powerpc.tcc"
>
{
public:
	OpAdde(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2045 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2049 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2052 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2057 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2061 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2064 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2068 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2071 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2249 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2252 "powerpc.tcc"
>
class OpAddi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2257 "powerpc.tcc"
>
{
public:
	OpAddi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2302 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2306 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2309 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2314 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2318 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2321 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2325 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2328 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2491 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2494 "powerpc.tcc"
>
class OpAddic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2499 "powerpc.tcc"
>
{
public:
	OpAddic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2544 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2548 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2551 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2556 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2560 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2563 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2567 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2570 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2736 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2739 "powerpc.tcc"
>
class OpAddic_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2744 "powerpc.tcc"
>
{
public:
	OpAddic_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2789 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2793 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2796 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2801 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2805 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2808 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2812 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2815 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2981 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2984 "powerpc.tcc"
>
class OpAddis : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2989 "powerpc.tcc"
>
{
public:
	OpAddis(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3034 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3038 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3041 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3046 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3050 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3053 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3057 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3060 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3223 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3226 "powerpc.tcc"
>
class OpAddme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3231 "powerpc.tcc"
>
{
public:
	OpAddme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3277 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3281 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3284 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3289 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3293 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3296 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3300 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3303 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3475 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3478 "powerpc.tcc"
>
class OpAddze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3483 "powerpc.tcc"
>
{
public:
	OpAddze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3529 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3533 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3536 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3541 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3545 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3548 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3552 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3555 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3730 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3733 "powerpc.tcc"
>
class OpDivw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3738 "powerpc.tcc"
>
{
public:
	OpDivw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3785 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3789 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3792 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3797 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3801 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3804 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3808 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3811 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3980 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3983 "powerpc.tcc"
>
class OpDivwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3988 "powerpc.tcc"
>
{
public:
	OpDivwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4035 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4039 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4042 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4047 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4051 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4054 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4058 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4061 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4230 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4233 "powerpc.tcc"
>
class OpMulhw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4238 "powerpc.tcc"
>
{
public:
	OpMulhw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4284 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4288 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4291 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4296 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4300 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4303 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4307 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4310 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4479 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4482 "powerpc.tcc"
>
class OpMulhwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4487 "powerpc.tcc"
>
{
public:
	OpMulhwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4533 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4537 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4540 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4545 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4549 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4552 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4556 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4559 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4728 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4731 "powerpc.tcc"
>
class OpMulli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4736 "powerpc.tcc"
>
{
public:
	OpMulli(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4781 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4785 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4788 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4793 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4797 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4800 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4804 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4807 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4970 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4973 "powerpc.tcc"
>
class OpMullw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4978 "powerpc.tcc"
>
{
public:
	OpMullw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5025 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5029 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5032 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5037 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5041 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5044 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5048 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5051 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5220 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5223 "powerpc.tcc"
>
class OpNeg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5228 "powerpc.tcc"
>
{
public:
	OpNeg(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5274 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5278 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5281 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5286 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5290 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5293 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5297 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5300 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5463 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5466 "powerpc.tcc"
>
class OpSubf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5471 "powerpc.tcc"
>
{
public:
	OpSubf(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5518 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5522 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5525 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5530 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5534 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5537 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5541 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5544 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5707 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5710 "powerpc.tcc"
>
class OpSubfc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5715 "powerpc.tcc"
>
{
public:
	OpSubfc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5762 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5766 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5769 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5774 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5778 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5781 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5785 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5788 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5954 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5957 "powerpc.tcc"
>
class OpSubfe : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5962 "powerpc.tcc"
>
{
public:
	OpSubfe(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6009 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6013 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6016 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6021 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6025 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6028 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6032 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6035 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6207 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6210 "powerpc.tcc"
>
class OpSubfic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6215 "powerpc.tcc"
>
{
public:
	OpSubfic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6260 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6264 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6267 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6272 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6276 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6279 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6283 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6286 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6452 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6455 "powerpc.tcc"
>
class OpSubfme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6460 "powerpc.tcc"
>
{
public:
	OpSubfme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6506 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6510 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6513 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6518 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6522 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6525 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6529 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6532 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6704 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6707 "powerpc.tcc"
>
class OpSubfze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6712 "powerpc.tcc"
>
{
public:
	OpSubfze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6758 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6762 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6765 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6770 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6774 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6777 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6781 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6784 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6956 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6959 "powerpc.tcc"
>
class OpCmp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6964 "powerpc.tcc"
>
{
public:
	OpCmp(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7010 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7014 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7017 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7022 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7026 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7029 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7033 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7036 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7202 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7205 "powerpc.tcc"
>
class OpCmpi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7210 "powerpc.tcc"
>
{
public:
	OpCmpi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7256 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7260 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7263 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7268 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7272 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7275 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7279 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7282 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7442 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7445 "powerpc.tcc"
>
class OpCmpl : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7450 "powerpc.tcc"
>
{
public:
	OpCmpl(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7496 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7500 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7503 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7508 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7512 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7515 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7519 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7522 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7685 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7688 "powerpc.tcc"
>
class OpCmpli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7693 "powerpc.tcc"
>
{
public:
	OpCmpli(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7739 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7743 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7746 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7751 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7755 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7758 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7762 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7765 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7925 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7928 "powerpc.tcc"
>
class OpAnd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7933 "powerpc.tcc"
>
{
public:
	OpAnd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7979 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7983 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7986 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7991 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7995 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7998 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8002 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8005 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8168 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8171 "powerpc.tcc"
>
class OpAndc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8176 "powerpc.tcc"
>
{
public:
	OpAndc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8222 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8226 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8229 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8234 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8238 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8241 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8245 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8248 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8411 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8414 "powerpc.tcc"
>
class OpAndi_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8419 "powerpc.tcc"
>
{
public:
	OpAndi_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8464 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8468 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8471 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8476 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8480 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8483 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8487 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8490 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8650 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8653 "powerpc.tcc"
>
class OpAndis_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8658 "powerpc.tcc"
>
{
public:
	OpAndis_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8703 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8707 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8710 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8715 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8719 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8722 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8726 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8729 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8889 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8892 "powerpc.tcc"
>
class OpCntlzw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8897 "powerpc.tcc"
>
{
public:
	OpCntlzw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8942 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8946 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8949 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8954 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8958 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8961 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8965 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8968 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9128 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9131 "powerpc.tcc"
>
class OpEqv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9136 "powerpc.tcc"
>
{
public:
	OpEqv(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9182 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9186 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9189 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9194 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9198 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9201 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9205 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9208 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9371 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9374 "powerpc.tcc"
>
class OpExtsb : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9379 "powerpc.tcc"
>
{
public:
	OpExtsb(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9424 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9428 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9431 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9436 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9440 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9443 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9447 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9450 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9610 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9613 "powerpc.tcc"
>
class OpExtsh : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9618 "powerpc.tcc"
>
{
public:
	OpExtsh(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9663 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9667 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9670 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9675 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9679 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9682 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9686 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9689 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9849 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9852 "powerpc.tcc"
>
class OpNand : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9857 "powerpc.tcc"
>
{
public:
	OpNand(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9903 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9907 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9910 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9915 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9919 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9922 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9926 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9929 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10092 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10095 "powerpc.tcc"
>
class OpNor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10100 "powerpc.tcc"
>
{
public:
	OpNor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10146 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10150 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10153 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10158 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10162 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10165 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10169 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10172 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10335 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10338 "powerpc.tcc"
>
class OpOr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10343 "powerpc.tcc"
>
{
public:
	OpOr(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10389 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10393 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10396 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10401 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10405 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10408 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10412 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10415 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10578 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10581 "powerpc.tcc"
>
class OpOrc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10586 "powerpc.tcc"
>
{
public:
	OpOrc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10632 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10636 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10639 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10644 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10648 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10651 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10655 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10658 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10821 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10824 "powerpc.tcc"
>
class OpOri : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10829 "powerpc.tcc"
>
{
public:
	OpOri(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10874 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10878 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10881 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10886 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10890 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10893 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10897 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10900 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11060 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11063 "powerpc.tcc"
>
class OpOris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11068 "powerpc.tcc"
>
{
public:
	OpOris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11113 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11117 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11120 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11125 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11129 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11132 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11136 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11139 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11299 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11302 "powerpc.tcc"
>
class OpXor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11307 "powerpc.tcc"
>
{
public:
	OpXor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11353 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11357 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11360 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11365 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11369 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11372 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11376 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11379 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11542 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11545 "powerpc.tcc"
>
class OpXori : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11550 "powerpc.tcc"
>
{
public:
	OpXori(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11595 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11599 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11602 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11607 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11611 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11614 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11618 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11621 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11781 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11784 "powerpc.tcc"
>
class OpXoris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11789 "powerpc.tcc"
>
{
public:
	OpXoris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11834 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11838 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11841 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11846 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11850 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11853 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11857 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11860 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12020 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12023 "powerpc.tcc"
>
class OpRlwimi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12028 "powerpc.tcc"
>
{
public:
	OpRlwimi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12076 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12080 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12083 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12088 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12092 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12095 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12099 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12102 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12265 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12268 "powerpc.tcc"
>
class OpRlwinm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12273 "powerpc.tcc"
>
{
public:
	OpRlwinm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12321 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12325 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12328 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12333 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12337 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12340 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12344 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12347 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12507 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12510 "powerpc.tcc"
>
class OpRlwnm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12515 "powerpc.tcc"
>
{
public:
	OpRlwnm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12563 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12567 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12570 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12575 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12579 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12582 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12586 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12589 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12752 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12755 "powerpc.tcc"
>
class OpSlw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12760 "powerpc.tcc"
>
{
public:
	OpSlw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12806 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12810 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12813 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12818 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12822 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12825 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12829 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12832 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12995 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12998 "powerpc.tcc"
>
class OpSraw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13003 "powerpc.tcc"
>
{
public:
	OpSraw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13049 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13053 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13056 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13061 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13065 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13068 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13072 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13075 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13241 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13244 "powerpc.tcc"
>
class OpSrawi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13249 "powerpc.tcc"
>
{
public:
	OpSrawi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13295 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13299 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13302 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13307 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13311 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13314 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13318 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13321 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13481 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13484 "powerpc.tcc"
>
class OpSrw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13489 "powerpc.tcc"
>
{
public:
	OpSrw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13535 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13539 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13542 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13547 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13551 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13554 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13558 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13561 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13724 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13727 "powerpc.tcc"
>
class OpFadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13732 "powerpc.tcc"
>
{
public:
	OpFadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13778 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13782 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13785 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13790 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13794 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13797 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13801 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13804 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13976 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13979 "powerpc.tcc"
>
class OpFadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13984 "powerpc.tcc"
>
{
public:
	OpFadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14030 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14034 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14037 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14042 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14046 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14049 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14053 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14056 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14228 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14231 "powerpc.tcc"
>
class OpFdiv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14236 "powerpc.tcc"
>
{
public:
	OpFdiv(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14282 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14286 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14289 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14294 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14298 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14301 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14305 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14308 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14480 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14483 "powerpc.tcc"
>
class OpFdivs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14488 "powerpc.tcc"
>
{
public:
	OpFdivs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14534 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14538 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14541 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14546 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14550 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14553 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14557 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14560 "powerpc.tcc"
	);
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14729 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14732 "powerpc.tcc"
>
class OpFmul : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14737 "powerpc.tcc"
>
{
public:
	OpFmul(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14783 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14787 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14790 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14795 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14799 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14802 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14806 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14809 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14981 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14984 "powerpc.tcc"
>
class OpFmuls : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14989 "powerpc.tcc"
>
{
public:
	OpFmuls(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15035 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15039 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15042 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15047 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15051 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15054 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15058 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15061 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15233 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15236 "powerpc.tcc"
>
class OpFres : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15241 "powerpc.tcc"
>
{
public:
	OpFres(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15286 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15290 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15293 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15298 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15302 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15305 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15309 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15312 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15481 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15484 "powerpc.tcc"
>
class OpFrsqrte : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15489 "powerpc.tcc"
>
{
public:
	OpFrsqrte(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15534 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15538 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15541 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15546 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15550 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15553 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15557 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15560 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15729 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15732 "powerpc.tcc"
>
class OpFsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15737 "powerpc.tcc"
>
{
public:
	OpFsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15783 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15787 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15790 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15795 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15799 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15802 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15806 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15809 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15981 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15984 "powerpc.tcc"
>
class OpFsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15989 "powerpc.tcc"
>
{
public:
	OpFsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16035 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16039 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16042 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16047 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16051 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16054 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16058 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16061 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16233 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16236 "powerpc.tcc"
>
class OpFsel : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16241 "powerpc.tcc"
>
{
public:
	OpFsel(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16288 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16292 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16295 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16300 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16304 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16307 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16311 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16314 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16489 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16492 "powerpc.tcc"
>
class OpFsqrt : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16497 "powerpc.tcc"
>
{
public:
	OpFsqrt(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16542 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16546 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16549 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16554 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16558 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16561 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16565 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16568 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16734 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16737 "powerpc.tcc"
>
class OpFsqrts : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16742 "powerpc.tcc"
>
{
public:
	OpFsqrts(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16787 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16791 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16794 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16799 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16803 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16806 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16810 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16813 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16979 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16982 "powerpc.tcc"
>
class OpFmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16987 "powerpc.tcc"
>
{
public:
	OpFmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17034 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17038 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17041 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17046 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17050 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17053 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17057 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17060 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17235 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17238 "powerpc.tcc"
>
class OpFmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17243 "powerpc.tcc"
>
{
public:
	OpFmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17290 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17294 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17297 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17302 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17306 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17309 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17313 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17316 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17491 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17494 "powerpc.tcc"
>
class OpFmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17499 "powerpc.tcc"
>
{
public:
	OpFmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17546 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17550 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17553 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17558 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17562 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17565 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17569 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17572 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17747 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17750 "powerpc.tcc"
>
class OpFmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17755 "powerpc.tcc"
>
{
public:
	OpFmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17802 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17806 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17809 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17814 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17818 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17821 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17825 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17828 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18003 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18006 "powerpc.tcc"
>
class OpFnmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18011 "powerpc.tcc"
>
{
public:
	OpFnmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18058 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18062 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18065 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18070 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18074 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18077 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18081 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18084 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18259 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18262 "powerpc.tcc"
>
class OpFnmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18267 "powerpc.tcc"
>
{
public:
	OpFnmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18314 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18318 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18321 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18326 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18330 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18333 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18337 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18340 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18515 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18518 "powerpc.tcc"
>
class OpFnmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18523 "powerpc.tcc"
>
{
public:
	OpFnmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18570 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18574 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18577 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18582 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18586 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18589 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18593 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18596 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18771 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18774 "powerpc.tcc"
>
class OpFnmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18779 "powerpc.tcc"
>
{
public:
	OpFnmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18826 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18830 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18833 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18838 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18842 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18845 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18849 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18852 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19027 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19030 "powerpc.tcc"
>
class OpFcmpo : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19035 "powerpc.tcc"
>
{
public:
	OpFcmpo(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19080 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19084 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19087 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19092 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19096 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19099 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19103 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19106 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19275 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19278 "powerpc.tcc"
>
class OpFcmpu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19283 "powerpc.tcc"
>
{
public:
	OpFcmpu(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19328 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19332 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19335 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19340 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19344 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19347 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19351 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19354 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19523 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19526 "powerpc.tcc"
>
class OpFctiw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19531 "powerpc.tcc"
>
{
public:
	OpFctiw(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19576 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19580 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19583 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19588 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19592 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19595 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19599 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19602 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19771 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19774 "powerpc.tcc"
>
class OpFctiwz : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19779 "powerpc.tcc"
>
{
public:
	OpFctiwz(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19824 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19828 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19831 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19836 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19840 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19843 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19847 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19850 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20019 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20022 "powerpc.tcc"
>
class OpFrsp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20027 "powerpc.tcc"
>
{
public:
	OpFrsp(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20072 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20076 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20079 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20084 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20088 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20091 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20095 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20098 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20267 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20270 "powerpc.tcc"
>
class OpFabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20275 "powerpc.tcc"
>
{
public:
	OpFabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20320 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20324 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20327 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20332 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20336 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20339 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20343 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20346 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20515 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20518 "powerpc.tcc"
>
class OpFmr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20523 "powerpc.tcc"
>
{
public:
	OpFmr(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20568 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20572 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20575 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20580 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20584 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20587 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20591 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20594 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20763 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20766 "powerpc.tcc"
>
class OpFnabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20771 "powerpc.tcc"
>
{
public:
	OpFnabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20816 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20820 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20823 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20828 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20832 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20835 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20839 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20842 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21011 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21014 "powerpc.tcc"
>
class OpFneg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21019 "powerpc.tcc"
>
{
public:
	OpFneg(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21064 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21068 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21071 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21076 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21080 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21083 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21087 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21090 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21259 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21262 "powerpc.tcc"
>
class OpMcrfs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21267 "powerpc.tcc"
>
{
public:
	OpMcrfs(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t crfS;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21311 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21315 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21318 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21323 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21327 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21330 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21334 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21337 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21497 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21500 "powerpc.tcc"
>
class OpMffs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21505 "powerpc.tcc"
>
{
public:
	OpMffs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21549 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21553 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21556 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21561 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21565 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21568 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21572 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21575 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21744 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21747 "powerpc.tcc"
>
class OpMtfsb0 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21752 "powerpc.tcc"
>
{
public:
	OpMtfsb0(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21796 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21800 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21803 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21808 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21812 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21815 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21819 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21822 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21985 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21988 "powerpc.tcc"
>
class OpMtfsb1 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21993 "powerpc.tcc"
>
{
public:
	OpMtfsb1(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22037 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22041 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22044 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22049 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22053 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22056 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22060 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22063 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22226 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22229 "powerpc.tcc"
>
class OpMtfsf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22234 "powerpc.tcc"
>
{
public:
	OpMtfsf(CodeType code, typename CONFIG::address_t addr);
	uint32_t fm;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22279 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22283 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22286 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22291 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22295 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22298 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22302 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22305 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_fb();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22468 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22471 "powerpc.tcc"
>
class OpMtfsfi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22476 "powerpc.tcc"
>
{
public:
	OpMtfsfi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t imm;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22521 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22525 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22528 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22533 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22537 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22540 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22544 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22547 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22710 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22713 "powerpc.tcc"
>
class OpB : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22718 "powerpc.tcc"
>
{
public:
	OpB(CodeType code, typename CONFIG::address_t addr);
	int32_t li;
	uint32_t aa;
	uint32_t lk;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22763 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22767 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22770 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22775 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22779 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22782 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22786 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22789 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_write_lr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Returns the target address of branch instructions.
	* The AA bit inform if the branch is relative or absolute.
	*/
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 22984 "powerpc.tcc"
	get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 22988 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cia
#line 22991 "powerpc.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 22995 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 22998 "powerpc.tcc"
	);
	// ----------------------------------------------------------------------------
	/**
	* Returns true if the branch is statically preficten taken.
	* The powerpc instruction set has a bit of the bo field to set
	* up the default branch prediction value statically.
	* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
	*/
	virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	bool
#line 23010 "powerpc.tcc"
	branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 23014 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 23017 "powerpc.tcc"
	);
	// Are branches linked ?
	//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
		virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23024 "powerpc.tcc"
		branch_linked();
		virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23029 "powerpc.tcc"
		branch_conditioned();
	private:
	};

	template <
#line 38 "ppc.isa"
	class
#line 23037 "powerpc.tcc"
#line 38 "ppc.isa"
	CONFIG
#line 23040 "powerpc.tcc"
	>
	class OpBc : public Operation<
#line 38 "ppc.isa"
	CONFIG
#line 23045 "powerpc.tcc"
	>
	{
	public:
		OpBc(CodeType code, typename CONFIG::address_t addr);
		uint32_t bo;
		uint32_t bi;
		int32_t bd;
		uint32_t aa;
		uint32_t lk;
		/*
		*  Copyright (c) 2007,
		*  Commissariat a l'Energie Atomique (CEA)
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*/
		/* instruction endian */
		virtual
#line 60 "ppc.isa"
		void
#line 23092 "powerpc.tcc"
		execute(
#line 60 "ppc.isa"
		typename CONFIG::STATE *
#line 23096 "powerpc.tcc"
#line 60 "ppc.isa"
		cpu
#line 23099 "powerpc.tcc"
		);
		virtual
#line 64 "ppc.isa"
		void
#line 23104 "powerpc.tcc"
		disasm(
#line 64 "ppc.isa"
		typename CONFIG::STATE *
#line 23108 "powerpc.tcc"
#line 64 "ppc.isa"
		cpu
#line 23111 "powerpc.tcc"
		,
#line 64 "ppc.isa"
		ostream&
#line 23115 "powerpc.tcc"
#line 64 "ppc.isa"
		os
#line 23118 "powerpc.tcc"
		);
		virtual
		void
		initialize_unit();
		virtual
		void
		initialize_read_ctr();
		virtual
		void
		initialize_read_cr();
		virtual
		void
		initialize_write_lr();
		virtual
		void
		initialize_write_ctr();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*          Eric Renard (erenard@lri.fr)
		*          Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		//var registers_written : {registers_written_t} = {0}
		/** Functions **/
		virtual
		void
		initialize_function();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Initilize the latency values of each instrucion
		*/
		virtual
		void
		initialize_latencies();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/* --------------------------------------------------------------------------

		Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
		Mais sinon elle respecte bien le format rd = premier registre

		> lbzu lhau lhzu lwzu
		> lbzux, lhaux, lhzux, lwzux
		> stbu, sthu, stwu
		> stbux, sthux, stwux

		> lfdu, lfsu
		> lfdux
		> stfdu, stfsu
		> stfdux, stfsux

		manque les loafd flottant a update comme lfdu)
		-------------------------------------------------------------------------- */
		/* ----
		lswi: load string should output to (rd .. rd+ ceil(nb/4))
		lswx: should output to (rd.. XER[25..31] /4)
		stswi: should input (rs .. rs+ceil(nb/4))
		stswx: should input (rs .. rs+ceil(XER[25..31]/4))
		----- */
		/*
	* NOTES :
		*     -- For store fisrt operand is to oprand to write into memory.
		*     -- For other instructions (to defined)
		*/
		virtual
		void
		initialize_operands();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Returns the target address of branch instructions.
		* The AA bit inform if the branch is relative or absolute.
		*/
		virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 23322 "powerpc.tcc"
		get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 23326 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cia
#line 23329 "powerpc.tcc"
		,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::STATE *
#line 23333 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 23336 "powerpc.tcc"
		);
		// ----------------------------------------------------------------------------
		/**
		* Returns true if the branch is statically preficten taken.
		* The powerpc instruction set has a bit of the bo field to set
		* up the default branch prediction value statically.
		* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
		*/
		virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23348 "powerpc.tcc"
		branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::STATE *
#line 23352 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 23355 "powerpc.tcc"
		);
		// Are branches linked ?
		//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
			virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23362 "powerpc.tcc"
			branch_linked();
			virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23367 "powerpc.tcc"
			branch_conditioned();
		private:
		};

		template <
#line 38 "ppc.isa"
		class
#line 23375 "powerpc.tcc"
#line 38 "ppc.isa"
		CONFIG
#line 23378 "powerpc.tcc"
		>
		class OpBcctr : public Operation<
#line 38 "ppc.isa"
		CONFIG
#line 23383 "powerpc.tcc"
		>
		{
		public:
			OpBcctr(CodeType code, typename CONFIG::address_t addr);
			uint32_t bo;
			uint32_t bi;
			uint32_t lk;
			/*
			*  Copyright (c) 2007,
			*  Commissariat a l'Energie Atomique (CEA)
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*/
			/* instruction endian */
			virtual
#line 60 "ppc.isa"
			void
#line 23428 "powerpc.tcc"
			execute(
#line 60 "ppc.isa"
			typename CONFIG::STATE *
#line 23432 "powerpc.tcc"
#line 60 "ppc.isa"
			cpu
#line 23435 "powerpc.tcc"
			);
			virtual
#line 64 "ppc.isa"
			void
#line 23440 "powerpc.tcc"
			disasm(
#line 64 "ppc.isa"
			typename CONFIG::STATE *
#line 23444 "powerpc.tcc"
#line 64 "ppc.isa"
			cpu
#line 23447 "powerpc.tcc"
			,
#line 64 "ppc.isa"
			ostream&
#line 23451 "powerpc.tcc"
#line 64 "ppc.isa"
			os
#line 23454 "powerpc.tcc"
			);
			virtual
			void
			initialize_unit();
			virtual
			void
			initialize_read_ctr();
			virtual
			void
			initialize_read_cr();
			virtual
			void
			initialize_write_lr();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*          Eric Renard (erenard@lri.fr)
			*          Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			//var registers_written : {registers_written_t} = {0}
			/** Functions **/
			virtual
			void
			initialize_function();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Initilize the latency values of each instrucion
			*/
			virtual
			void
			initialize_latencies();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/* --------------------------------------------------------------------------

			Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
			Mais sinon elle respecte bien le format rd = premier registre

			> lbzu lhau lhzu lwzu
			> lbzux, lhaux, lhzux, lwzux
			> stbu, sthu, stwu
			> stbux, sthux, stwux

			> lfdu, lfsu
			> lfdux
			> stfdu, stfsu
			> stfdux, stfsux

			manque les loafd flottant a update comme lfdu)
			-------------------------------------------------------------------------- */
			/* ----
			lswi: load string should output to (rd .. rd+ ceil(nb/4))
			lswx: should output to (rd.. XER[25..31] /4)
			stswi: should input (rs .. rs+ceil(nb/4))
			stswx: should input (rs .. rs+ceil(XER[25..31]/4))
			----- */
			/*
		* NOTES :
			*     -- For store fisrt operand is to oprand to write into memory.
			*     -- For other instructions (to defined)
			*/
			virtual
			void
			initialize_operands();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Returns the target address of branch instructions.
			* The AA bit inform if the branch is relative or absolute.
			*/
			virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 23655 "powerpc.tcc"
			get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 23659 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cia
#line 23662 "powerpc.tcc"
			,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::STATE *
#line 23666 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 23669 "powerpc.tcc"
			);
			// ----------------------------------------------------------------------------
			/**
			* Returns true if the branch is statically preficten taken.
			* The powerpc instruction set has a bit of the bo field to set
			* up the default branch prediction value statically.
			* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
			*/
			virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23681 "powerpc.tcc"
			branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::STATE *
#line 23685 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 23688 "powerpc.tcc"
			);
			// Are branches linked ?
			//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
				virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 23695 "powerpc.tcc"
				branch_linked();
				virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 23700 "powerpc.tcc"
				branch_conditioned();
			private:
			};

			template <
#line 38 "ppc.isa"
			class
#line 23708 "powerpc.tcc"
#line 38 "ppc.isa"
			CONFIG
#line 23711 "powerpc.tcc"
			>
			class OpBclr : public Operation<
#line 38 "ppc.isa"
			CONFIG
#line 23716 "powerpc.tcc"
			>
			{
			public:
				OpBclr(CodeType code, typename CONFIG::address_t addr);
				uint32_t bo;
				uint32_t bi;
				uint32_t lk;
				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/* instruction endian */
				virtual
#line 60 "ppc.isa"
				void
#line 23761 "powerpc.tcc"
				execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 23765 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 23768 "powerpc.tcc"
				);
				virtual
#line 64 "ppc.isa"
				void
#line 23773 "powerpc.tcc"
				disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 23777 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 23780 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 23784 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 23787 "powerpc.tcc"
				);
				virtual
				void
				initialize_unit();
				virtual
				void
				initialize_read_lr();
				virtual
				void
				initialize_read_ctr();
				virtual
				void
				initialize_read_cr();
				virtual
				void
				initialize_write_lr();
				virtual
				void
				initialize_write_ctr();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*          Eric Renard (erenard@lri.fr)
				*          Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				//var registers_written : {registers_written_t} = {0}
				/** Functions **/
				virtual
				void
				initialize_function();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Initilize the latency values of each instrucion
				*/
				virtual
				void
				initialize_latencies();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/* --------------------------------------------------------------------------

				Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
				Mais sinon elle respecte bien le format rd = premier registre

				> lbzu lhau lhzu lwzu
				> lbzux, lhaux, lhzux, lwzux
				> stbu, sthu, stwu
				> stbux, sthux, stwux

				> lfdu, lfsu
				> lfdux
				> stfdu, stfsu
				> stfdux, stfsux

				manque les loafd flottant a update comme lfdu)
				-------------------------------------------------------------------------- */
				/* ----
				lswi: load string should output to (rd .. rd+ ceil(nb/4))
				lswx: should output to (rd.. XER[25..31] /4)
				stswi: should input (rs .. rs+ceil(nb/4))
				stswx: should input (rs .. rs+ceil(XER[25..31]/4))
				----- */
				/*
			* NOTES :
				*     -- For store fisrt operand is to oprand to write into memory.
				*     -- For other instructions (to defined)
				*/
				virtual
				void
				initialize_operands();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Returns the target address of branch instructions.
				* The AA bit inform if the branch is relative or absolute.
				*/
				virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 23994 "powerpc.tcc"
				get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 23998 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 24001 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 24005 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 24008 "powerpc.tcc"
				);
				// ----------------------------------------------------------------------------
				/**
				* Returns true if the branch is statically preficten taken.
				* The powerpc instruction set has a bit of the bo field to set
				* up the default branch prediction value statically.
				* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
				*/
				virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 24020 "powerpc.tcc"
				branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 24024 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 24027 "powerpc.tcc"
				);
				// Are branches linked ?
				//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
					virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 24034 "powerpc.tcc"
					branch_linked();
					virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 24039 "powerpc.tcc"
					branch_conditioned();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24050 "powerpc.tcc"
				>
				class OpCrand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24055 "powerpc.tcc"
				>
				{
				public:
					OpCrand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24100 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24104 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24107 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24112 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24116 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24119 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24123 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24126 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24298 "powerpc.tcc"
				>
				class OpCrandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24303 "powerpc.tcc"
				>
				{
				public:
					OpCrandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24348 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24352 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24355 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24360 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24364 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24367 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24371 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24374 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24546 "powerpc.tcc"
				>
				class OpCreqv : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24551 "powerpc.tcc"
				>
				{
				public:
					OpCreqv(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24596 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24600 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24603 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24608 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24612 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24615 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24619 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24622 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24794 "powerpc.tcc"
				>
				class OpCrnand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24799 "powerpc.tcc"
				>
				{
				public:
					OpCrnand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24844 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24848 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24851 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24856 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24860 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24863 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24867 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24870 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25042 "powerpc.tcc"
				>
				class OpCrnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25047 "powerpc.tcc"
				>
				{
				public:
					OpCrnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25092 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25096 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25099 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25104 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25108 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25111 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25115 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25118 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25290 "powerpc.tcc"
				>
				class OpCror : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25295 "powerpc.tcc"
				>
				{
				public:
					OpCror(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25340 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25344 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25347 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25352 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25356 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25359 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25363 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25366 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25538 "powerpc.tcc"
				>
				class OpCrorc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25543 "powerpc.tcc"
				>
				{
				public:
					OpCrorc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25588 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25592 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25595 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25600 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25604 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25607 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25611 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25614 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25786 "powerpc.tcc"
				>
				class OpCrxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25791 "powerpc.tcc"
				>
				{
				public:
					OpCrxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25836 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25840 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25843 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25848 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25852 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25855 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25859 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25862 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26034 "powerpc.tcc"
				>
				class OpMcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26039 "powerpc.tcc"
				>
				{
				public:
					OpMcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					uint32_t crfS;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26083 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26087 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26090 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26095 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26099 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26102 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26106 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26109 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_cr();
					virtual
					void
					initialize_write_cr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26275 "powerpc.tcc"
				>
				class OpLbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26280 "powerpc.tcc"
				>
				{
				public:
					OpLbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26325 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26329 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26332 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26337 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26341 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26344 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26348 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26351 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26545 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 26549 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26552 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26560 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26571 "powerpc.tcc"
				>
				class OpLbzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26576 "powerpc.tcc"
				>
				{
				public:
					OpLbzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26621 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26625 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26628 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26633 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26637 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26640 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26644 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26647 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26844 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 26848 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26851 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26859 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 26865 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 26870 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26881 "powerpc.tcc"
				>
				class OpLbzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26886 "powerpc.tcc"
				>
				{
				public:
					OpLbzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26931 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26935 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26938 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26943 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26947 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26950 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26954 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26957 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27157 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27161 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27164 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27172 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27178 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 27183 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27194 "powerpc.tcc"
				>
				class OpLbzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27199 "powerpc.tcc"
				>
				{
				public:
					OpLbzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27244 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27248 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27251 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27256 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27260 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27263 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27267 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27270 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27467 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27471 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27474 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27482 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27493 "powerpc.tcc"
				>
				class OpLha : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27498 "powerpc.tcc"
				>
				{
				public:
					OpLha(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27543 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27547 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27550 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27555 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27559 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27562 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27566 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27569 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27763 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27767 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27770 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27778 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27784 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27795 "powerpc.tcc"
				>
				class OpLhau : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27800 "powerpc.tcc"
				>
				{
				public:
					OpLhau(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27845 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27849 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27852 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27857 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27861 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27864 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27868 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27871 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28068 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28072 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28075 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28083 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28089 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28100 "powerpc.tcc"
				>
				class OpLhaux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28105 "powerpc.tcc"
				>
				{
				public:
					OpLhaux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28150 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28154 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28157 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28162 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28166 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28169 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28173 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28176 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28376 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28380 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28383 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28391 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28397 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28408 "powerpc.tcc"
				>
				class OpLhax : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28413 "powerpc.tcc"
				>
				{
				public:
					OpLhax(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28458 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28462 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28465 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28470 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28474 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28477 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28481 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28484 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28681 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28685 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28688 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28696 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28702 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28713 "powerpc.tcc"
				>
				class OpLhz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28718 "powerpc.tcc"
				>
				{
				public:
					OpLhz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28763 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28767 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28770 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28775 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28779 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28782 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28786 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28789 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28983 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28987 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28990 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28998 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29009 "powerpc.tcc"
				>
				class OpLhzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29014 "powerpc.tcc"
				>
				{
				public:
					OpLhzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29059 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29063 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29066 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29071 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29075 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29078 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29082 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29085 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29282 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29286 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29289 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29297 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29303 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29308 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29319 "powerpc.tcc"
				>
				class OpLhzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29324 "powerpc.tcc"
				>
				{
				public:
					OpLhzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29369 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29373 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29376 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29381 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29385 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29388 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29392 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29395 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29595 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29599 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29602 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29610 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29616 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29621 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29632 "powerpc.tcc"
				>
				class OpLhzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29637 "powerpc.tcc"
				>
				{
				public:
					OpLhzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29682 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29686 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29689 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29694 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29698 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29701 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29705 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29708 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29905 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29909 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29912 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29920 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29931 "powerpc.tcc"
				>
				class OpLwz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29936 "powerpc.tcc"
				>
				{
				public:
					OpLwz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29981 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29985 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29988 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29993 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29997 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30000 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30004 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30007 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30201 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30205 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30208 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30216 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30227 "powerpc.tcc"
				>
				class OpLwzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30232 "powerpc.tcc"
				>
				{
				public:
					OpLwzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30277 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30281 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30284 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30289 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30293 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30296 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30300 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30303 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30500 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30504 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30507 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30515 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30521 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 30526 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30537 "powerpc.tcc"
				>
				class OpLwzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30542 "powerpc.tcc"
				>
				{
				public:
					OpLwzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30587 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30591 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30594 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30599 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30603 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30606 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30610 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30613 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30813 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30817 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30820 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30828 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30834 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 30839 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30850 "powerpc.tcc"
				>
				class OpLwzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30855 "powerpc.tcc"
				>
				{
				public:
					OpLwzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30900 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30904 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30907 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30912 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30916 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30919 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30923 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30926 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31123 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31127 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31130 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31138 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31149 "powerpc.tcc"
				>
				class OpStb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31154 "powerpc.tcc"
				>
				{
				public:
					OpStb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31199 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31203 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31206 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31211 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31215 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31218 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31222 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31225 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31425 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31429 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31432 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31440 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31451 "powerpc.tcc"
				>
				class OpStbu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31456 "powerpc.tcc"
				>
				{
				public:
					OpStbu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31501 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31505 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31508 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31513 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31517 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31520 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31524 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31527 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31730 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31734 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31737 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31745 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 31751 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 31756 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31767 "powerpc.tcc"
				>
				class OpStbux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31772 "powerpc.tcc"
				>
				{
				public:
					OpStbux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31817 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31821 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31824 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31829 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31833 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31836 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31840 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31843 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32049 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32053 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32056 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32064 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 32070 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 32075 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32086 "powerpc.tcc"
				>
				class OpStbx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32091 "powerpc.tcc"
				>
				{
				public:
					OpStbx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32136 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32140 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32143 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32148 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32152 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32155 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32159 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32162 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32365 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32369 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32372 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32380 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32391 "powerpc.tcc"
				>
				class OpSth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32396 "powerpc.tcc"
				>
				{
				public:
					OpSth(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32441 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32445 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32448 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32453 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32457 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32460 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32464 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32467 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32667 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32671 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32674 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32682 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32693 "powerpc.tcc"
				>
				class OpSthu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32698 "powerpc.tcc"
				>
				{
				public:
					OpSthu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32743 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32747 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32750 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32755 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32759 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32762 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32766 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32769 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32972 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32976 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32979 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32987 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 32993 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 32998 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33009 "powerpc.tcc"
				>
				class OpSthux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33014 "powerpc.tcc"
				>
				{
				public:
					OpSthux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33059 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33063 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33066 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33071 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33075 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33078 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33082 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33085 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33288 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33292 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33295 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33303 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 33309 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 33314 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33325 "powerpc.tcc"
				>
				class OpSthx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33330 "powerpc.tcc"
				>
				{
				public:
					OpSthx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33375 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33379 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33382 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33387 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33391 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33394 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33398 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33401 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33601 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33605 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33608 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33616 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33627 "powerpc.tcc"
				>
				class OpStw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33632 "powerpc.tcc"
				>
				{
				public:
					OpStw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33677 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33681 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33684 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33689 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33693 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33696 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33700 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33703 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33903 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33907 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33910 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33918 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33929 "powerpc.tcc"
				>
				class OpStwu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33934 "powerpc.tcc"
				>
				{
				public:
					OpStwu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33979 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33983 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33986 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33991 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33995 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33998 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34002 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34005 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34208 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34212 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34215 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34223 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 34229 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 34234 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34245 "powerpc.tcc"
				>
				class OpStwux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34250 "powerpc.tcc"
				>
				{
				public:
					OpStwux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34295 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34299 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34302 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34307 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34311 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34314 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34318 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34321 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34527 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34531 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34534 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34542 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 34548 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 34553 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34564 "powerpc.tcc"
				>
				class OpStwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34569 "powerpc.tcc"
				>
				{
				public:
					OpStwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34614 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34618 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34621 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34626 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34630 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34633 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34637 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34640 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34843 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34847 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34850 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34858 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34869 "powerpc.tcc"
				>
				class OpLhbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34874 "powerpc.tcc"
				>
				{
				public:
					OpLhbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34919 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34923 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34926 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34931 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34935 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34938 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34942 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34945 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35142 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35146 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35149 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35157 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35168 "powerpc.tcc"
				>
				class OpLwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35173 "powerpc.tcc"
				>
				{
				public:
					OpLwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35218 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35222 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35225 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35230 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35234 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35237 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35241 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35244 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35441 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35445 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35448 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35456 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35467 "powerpc.tcc"
				>
				class OpSthbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35472 "powerpc.tcc"
				>
				{
				public:
					OpSthbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35517 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35521 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35524 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35529 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35533 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35536 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35540 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35543 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35746 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35750 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35753 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35761 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35772 "powerpc.tcc"
				>
				class OpStwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35777 "powerpc.tcc"
				>
				{
				public:
					OpStwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35822 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35826 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35829 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35834 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35838 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35841 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35845 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35848 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36051 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36055 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36058 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36066 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36077 "powerpc.tcc"
				>
				class OpLswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36082 "powerpc.tcc"
				>
				{
				public:
					OpLswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36127 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36131 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36134 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36139 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36143 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36146 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36150 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36153 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36197 "powerpc.tcc"
					resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36201 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36204 "powerpc.tcc"
					,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36208 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36211 "powerpc.tcc"
					);
					virtual
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36216 "powerpc.tcc"
					uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36220 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36223 "powerpc.tcc"
					,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36227 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36230 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36418 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36422 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36425 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36433 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36441 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36445 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36448 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36459 "powerpc.tcc"
				>
				class OpLswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36464 "powerpc.tcc"
				>
				{
				public:
					OpLswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36509 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36513 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36516 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36521 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36525 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36528 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36532 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36535 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36582 "powerpc.tcc"
					resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36586 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36589 "powerpc.tcc"
					,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36593 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36596 "powerpc.tcc"
					);
					virtual
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36601 "powerpc.tcc"
					uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36605 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36608 "powerpc.tcc"
					,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36612 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36615 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36803 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36807 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36810 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36818 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36826 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36830 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36833 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36844 "powerpc.tcc"
				>
				class OpStswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36849 "powerpc.tcc"
				>
				{
				public:
					OpStswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36894 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36898 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36901 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36906 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36910 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36913 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36917 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36920 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36967 "powerpc.tcc"
					resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36971 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36974 "powerpc.tcc"
					,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36978 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36981 "powerpc.tcc"
					);
					virtual
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36986 "powerpc.tcc"
					uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36990 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36993 "powerpc.tcc"
					,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36997 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37000 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37188 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37192 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37195 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37203 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37211 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37215 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37218 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37229 "powerpc.tcc"
				>
				class OpStswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37234 "powerpc.tcc"
				>
				{
				public:
					OpStswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 37279 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 37283 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 37286 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 37291 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 37295 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 37298 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 37302 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 37305 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37355 "powerpc.tcc"
					resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37359 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37362 "powerpc.tcc"
					,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37366 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37369 "powerpc.tcc"
					);
					virtual
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37374 "powerpc.tcc"
					uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37378 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37381 "powerpc.tcc"
					,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37385 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37388 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37576 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37580 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37583 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37591 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37599 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37603 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37606 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37617 "powerpc.tcc"
				>
				class OpLmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37622 "powerpc.tcc"
				>
				{
				public:
					OpLmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 37667 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 37671 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 37674 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 37679 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 37683 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 37686 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 37690 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 37693 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37737 "powerpc.tcc"
					resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37741 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37744 "powerpc.tcc"
					,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37748 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37751 "powerpc.tcc"
					);
					virtual
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37756 "powerpc.tcc"
					uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37760 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37763 "powerpc.tcc"
					,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37767 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37770 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37958 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37962 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37965 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37973 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37984 "powerpc.tcc"
				>
				class OpStmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37989 "powerpc.tcc"
				>
				{
				public:
					OpStmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38034 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38038 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38041 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38046 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38050 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38053 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38057 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38060 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 38107 "powerpc.tcc"
					resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 38111 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 38114 "powerpc.tcc"
					,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 38118 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 38121 "powerpc.tcc"
					);
					virtual
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 38126 "powerpc.tcc"
					uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 38130 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 38133 "powerpc.tcc"
					,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 38137 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 38140 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38328 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38332 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38335 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38343 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38354 "powerpc.tcc"
				>
				class OpLfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38359 "powerpc.tcc"
				>
				{
				public:
					OpLfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38404 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38408 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38411 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38416 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38420 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38423 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38427 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38430 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38630 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38634 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38637 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38645 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38656 "powerpc.tcc"
				>
				class OpLfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38661 "powerpc.tcc"
				>
				{
				public:
					OpLfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38706 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38710 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38713 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38718 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38722 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38725 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38729 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38732 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38935 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38939 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38942 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38950 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 38956 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 38961 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38972 "powerpc.tcc"
				>
				class OpLfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38977 "powerpc.tcc"
				>
				{
				public:
					OpLfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39022 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39026 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39029 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39034 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39038 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39041 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39045 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39048 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39254 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39258 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39261 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39269 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39275 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 39280 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39288 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39291 "powerpc.tcc"
				>
				class OpLfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39296 "powerpc.tcc"
				>
				{
				public:
					OpLfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39341 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39345 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39348 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39353 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39357 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39360 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39364 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39367 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39570 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39574 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39577 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39585 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39596 "powerpc.tcc"
				>
				class OpLfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39601 "powerpc.tcc"
				>
				{
				public:
					OpLfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39646 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39650 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39653 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39658 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39662 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39665 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39669 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39672 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39872 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39876 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39879 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39887 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39895 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39906 "powerpc.tcc"
				>
				class OpLfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39911 "powerpc.tcc"
				>
				{
				public:
					OpLfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39956 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39960 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39963 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39968 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39972 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39975 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39979 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39982 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40185 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40189 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40192 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40200 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40206 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 40211 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40219 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40230 "powerpc.tcc"
				>
				class OpLfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40235 "powerpc.tcc"
				>
				{
				public:
					OpLfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40280 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40284 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40287 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40292 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40296 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40299 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40303 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40306 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40447 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40451 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40454 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40462 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40468 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 40473 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40481 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40492 "powerpc.tcc"
				>
				class OpLfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40497 "powerpc.tcc"
				>
				{
				public:
					OpLfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40542 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40546 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40549 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40554 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40558 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40561 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40565 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40568 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40771 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40775 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40778 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40786 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40794 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40805 "powerpc.tcc"
				>
				class OpStfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40810 "powerpc.tcc"
				>
				{
				public:
					OpStfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40855 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40859 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40862 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40867 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40871 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40874 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40878 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40881 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41081 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41085 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41088 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41096 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41107 "powerpc.tcc"
				>
				class OpStfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41112 "powerpc.tcc"
				>
				{
				public:
					OpStfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41157 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41161 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41164 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41169 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41173 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41176 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41180 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41183 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41386 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41390 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41393 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41401 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 41407 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 41412 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41423 "powerpc.tcc"
				>
				class OpStfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41428 "powerpc.tcc"
				>
				{
				public:
					OpStfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41473 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41477 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41480 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41485 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41489 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41492 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41496 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41499 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41705 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41709 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41712 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41720 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 41726 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 41731 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41742 "powerpc.tcc"
				>
				class OpStfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41747 "powerpc.tcc"
				>
				{
				public:
					OpStfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41792 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41796 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41799 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41804 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41808 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41811 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41815 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41818 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42021 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42025 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42028 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42036 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42047 "powerpc.tcc"
				>
				class OpStfiwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42052 "powerpc.tcc"
				>
				{
				public:
					OpStfiwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42097 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42101 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42104 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42109 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42113 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42116 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42120 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42123 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42326 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42330 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42333 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42341 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42352 "powerpc.tcc"
				>
				class OpStfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42357 "powerpc.tcc"
				>
				{
				public:
					OpStfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42402 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42406 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42409 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42414 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42418 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42421 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42425 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42428 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42628 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42632 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42635 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42643 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 42651 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42655 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42658 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 42674 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42685 "powerpc.tcc"
				>
				class OpStfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42690 "powerpc.tcc"
				>
				{
				public:
					OpStfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42735 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42739 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42742 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42747 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42751 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42754 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42758 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42761 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42964 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42968 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42971 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42979 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 42985 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 42990 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 42998 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43002 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43005 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43021 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43032 "powerpc.tcc"
				>
				class OpStfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43037 "powerpc.tcc"
				>
				{
				public:
					OpStfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43082 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43086 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43089 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43094 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43098 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43101 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43105 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43108 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43314 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43318 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43321 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43329 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43335 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 43340 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 43348 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43352 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43355 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43371 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43382 "powerpc.tcc"
				>
				class OpStfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43387 "powerpc.tcc"
				>
				{
				public:
					OpStfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43432 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43436 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43439 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43444 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43448 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43451 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43455 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43458 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43661 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43665 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43668 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43676 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 43684 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43688 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43691 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43707 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43718 "powerpc.tcc"
				>
				class OpDcba : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43723 "powerpc.tcc"
				>
				{
				public:
					OpDcba(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43767 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43771 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43774 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43779 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43783 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43786 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43790 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43793 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43959 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43970 "powerpc.tcc"
				>
				class OpDcbf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43975 "powerpc.tcc"
				>
				{
				public:
					OpDcbf(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44019 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44023 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44026 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44031 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44035 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44038 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44042 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44045 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44211 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44222 "powerpc.tcc"
				>
				class OpDcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44227 "powerpc.tcc"
				>
				{
				public:
					OpDcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44271 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44275 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44278 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44283 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44287 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44290 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44294 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44297 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44460 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44471 "powerpc.tcc"
				>
				class OpDcbst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44476 "powerpc.tcc"
				>
				{
				public:
					OpDcbst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44520 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44524 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44527 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44532 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44536 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44539 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44543 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44546 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44712 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44723 "powerpc.tcc"
				>
				class OpDcbt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44728 "powerpc.tcc"
				>
				{
				public:
					OpDcbt(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44772 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44776 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44779 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44784 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44788 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44791 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44795 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44798 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44958 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44969 "powerpc.tcc"
				>
				class OpDcbtst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44974 "powerpc.tcc"
				>
				{
				public:
					OpDcbtst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45018 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45022 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45025 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45030 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45034 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45037 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45041 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45044 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45204 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45215 "powerpc.tcc"
				>
				class OpDcbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45220 "powerpc.tcc"
				>
				{
				public:
					OpDcbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45264 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45268 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45271 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45276 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45280 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45283 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45287 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45290 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45456 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45467 "powerpc.tcc"
				>
				class OpIcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45472 "powerpc.tcc"
				>
				{
				public:
					OpIcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45516 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45520 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45523 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45528 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45532 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45535 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45539 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45542 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45708 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45719 "powerpc.tcc"
				>
				class OpTlbia : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45724 "powerpc.tcc"
				>
				{
				public:
					OpTlbia(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45766 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45770 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45773 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45778 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45782 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45785 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45789 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45792 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45949 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45960 "powerpc.tcc"
				>
				class OpTlbie : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45965 "powerpc.tcc"
				>
				{
				public:
					OpTlbie(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46008 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46012 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46015 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46020 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46024 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46027 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46031 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46034 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46197 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46208 "powerpc.tcc"
				>
				class OpTlbsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46213 "powerpc.tcc"
				>
				{
				public:
					OpTlbsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46255 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46259 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46262 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46267 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46271 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46274 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46278 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46281 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46441 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46452 "powerpc.tcc"
				>
				class OpTlbld : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46457 "powerpc.tcc"
				>
				{
				public:
					OpTlbld(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46500 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46504 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46507 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46512 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46516 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46519 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46523 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46526 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46546 "powerpc.tcc"
				>
				class OpTlbli : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46551 "powerpc.tcc"
				>
				{
				public:
					OpTlbli(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46594 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46598 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46601 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46606 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46610 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46613 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46617 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46620 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46640 "powerpc.tcc"
				>
				class OpEciwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46645 "powerpc.tcc"
				>
				{
				public:
					OpEciwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46690 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46694 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46697 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46702 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46706 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46709 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46713 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46716 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46910 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 46914 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 46917 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46925 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46936 "powerpc.tcc"
				>
				class OpEcowx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46941 "powerpc.tcc"
				>
				{
				public:
					OpEcowx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46986 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46990 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46993 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46998 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47002 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47005 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47009 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47012 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47141 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 47145 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 47148 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47156 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47167 "powerpc.tcc"
				>
				class OpEieio : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47172 "powerpc.tcc"
				>
				{
				public:
					OpEieio(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47214 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47218 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47221 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47226 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47230 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47233 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47237 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47240 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47400 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47411 "powerpc.tcc"
				>
				class OpIsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47416 "powerpc.tcc"
				>
				{
				public:
					OpIsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47458 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47462 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47465 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47470 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47474 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47477 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47481 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47484 "powerpc.tcc"
					);
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47641 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47652 "powerpc.tcc"
				>
				class OpLwarx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47657 "powerpc.tcc"
				>
				{
				public:
					OpLwarx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47702 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47706 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47709 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47714 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47718 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47721 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47725 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47728 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47928 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 47932 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 47935 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47943 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47954 "powerpc.tcc"
				>
				class OpStwcx_ : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47959 "powerpc.tcc"
				>
				{
				public:
					OpStwcx_(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48004 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48008 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48011 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48016 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48020 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48023 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48027 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48030 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 48199 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48210 "powerpc.tcc"
				>
				class OpSync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48215 "powerpc.tcc"
				>
				{
				public:
					OpSync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48257 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48261 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48264 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48269 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48273 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48276 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48280 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48283 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 48443 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48454 "powerpc.tcc"
				>
				class OpSc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48459 "powerpc.tcc"
				>
				{
				public:
					OpSc(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48501 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48505 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48508 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48513 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48517 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48520 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48524 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48527 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48684 "powerpc.tcc"
				>
				class OpRfi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48689 "powerpc.tcc"
				>
				{
				public:
					OpRfi(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48731 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48735 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48738 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48743 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48747 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48750 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48754 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48757 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48914 "powerpc.tcc"
				>
				class OpTw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48919 "powerpc.tcc"
				>
				{
				public:
					OpTw(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48964 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48968 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48971 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48976 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48980 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48983 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48987 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48990 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49150 "powerpc.tcc"
				>
				class OpTwi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49155 "powerpc.tcc"
				>
				{
				public:
					OpTwi(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					int32_t simm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49200 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49204 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49207 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49212 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49216 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49219 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49223 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49226 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49386 "powerpc.tcc"
				>
				class OpMcrxr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49391 "powerpc.tcc"
				>
				{
				public:
					OpMcrxr(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49434 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49438 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49441 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49446 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49450 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49453 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49457 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49460 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49620 "powerpc.tcc"
				>
				class OpMfcr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49625 "powerpc.tcc"
				>
				{
				public:
					OpMfcr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49668 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49672 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49675 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49680 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49684 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49687 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49691 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49694 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49857 "powerpc.tcc"
				>
				class OpMfmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49862 "powerpc.tcc"
				>
				{
				public:
					OpMfmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49905 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49909 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49912 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49917 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49921 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49924 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49928 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49931 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50091 "powerpc.tcc"
				>
				class OpMfspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50096 "powerpc.tcc"
				>
				{
				public:
					OpMfspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50140 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50144 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50147 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50152 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50156 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50159 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50163 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50166 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50329 "powerpc.tcc"
				>
				class OpMtspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50334 "powerpc.tcc"
				>
				{
				public:
					OpMtspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50378 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50382 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50385 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50390 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50394 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50397 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50401 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50404 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50567 "powerpc.tcc"
				>
				class OpMftb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50572 "powerpc.tcc"
				>
				{
				public:
					OpMftb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t tbr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50616 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50620 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50623 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50628 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50632 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50635 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50639 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50642 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50805 "powerpc.tcc"
				>
				class OpMtcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50810 "powerpc.tcc"
				>
				{
				public:
					OpMtcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t crm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50854 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50858 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50861 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50866 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50870 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50873 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50877 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50880 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51040 "powerpc.tcc"
				>
				class OpMtmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51045 "powerpc.tcc"
				>
				{
				public:
					OpMtmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51088 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51092 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51095 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51100 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51104 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51107 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51111 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51114 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51274 "powerpc.tcc"
				>
				class OpMfsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51279 "powerpc.tcc"
				>
				{
				public:
					OpMfsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51323 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51327 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51330 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51335 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51339 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51342 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51346 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51349 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51509 "powerpc.tcc"
				>
				class OpMfsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51514 "powerpc.tcc"
				>
				{
				public:
					OpMfsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51558 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51562 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51565 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51570 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51574 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51577 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51581 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51584 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51744 "powerpc.tcc"
				>
				class OpMtsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51749 "powerpc.tcc"
				>
				{
				public:
					OpMtsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51793 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51797 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51800 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51805 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51809 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51812 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51816 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51819 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51982 "powerpc.tcc"
				>
				class OpMtsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51987 "powerpc.tcc"
				>
				{
				public:
					OpMtsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 52031 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 52035 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 52038 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 52043 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52047 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52050 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52054 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52057 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52220 "powerpc.tcc"
				>
				class OpDss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52225 "powerpc.tcc"
				>
				{
				public:
					OpDss(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 64 "ppc.isa"
					void
#line 52234 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52238 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52241 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52245 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52248 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52262 "powerpc.tcc"
				>
				class OpDssall : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52267 "powerpc.tcc"
				>
				{
				public:
					OpDssall(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 64 "ppc.isa"
					void
#line 52276 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52280 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52283 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52287 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52290 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52304 "powerpc.tcc"
				>
				class OpDst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52309 "powerpc.tcc"
				>
				{
				public:
					OpDst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52320 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52324 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52327 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52331 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52334 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52348 "powerpc.tcc"
				>
				class OpDstst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52353 "powerpc.tcc"
				>
				{
				public:
					OpDstst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52364 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52368 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52371 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52375 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52378 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52389 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52392 "powerpc.tcc"
				>
				class OpDststt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52397 "powerpc.tcc"
				>
				{
				public:
					OpDststt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52408 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52412 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52415 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52419 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52422 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52436 "powerpc.tcc"
				>
				class OpDstt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52441 "powerpc.tcc"
				>
				{
				public:
					OpDstt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52452 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52456 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52459 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52463 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52466 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52480 "powerpc.tcc"
				>
				class OpLvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52485 "powerpc.tcc"
				>
				{
				public:
					OpLvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52496 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52500 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52503 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52507 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52510 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52524 "powerpc.tcc"
				>
				class OpLvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52529 "powerpc.tcc"
				>
				{
				public:
					OpLvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52540 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52544 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52547 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52551 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52554 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52568 "powerpc.tcc"
				>
				class OpLvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52573 "powerpc.tcc"
				>
				{
				public:
					OpLvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52584 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52588 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52591 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52595 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52598 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52612 "powerpc.tcc"
				>
				class OpLvsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52617 "powerpc.tcc"
				>
				{
				public:
					OpLvsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52628 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52632 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52635 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52639 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52642 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52656 "powerpc.tcc"
				>
				class OpLvsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52661 "powerpc.tcc"
				>
				{
				public:
					OpLvsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52672 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52676 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52679 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52683 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52686 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52700 "powerpc.tcc"
				>
				class OpLvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52705 "powerpc.tcc"
				>
				{
				public:
					OpLvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52716 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52720 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52723 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52727 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52730 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52744 "powerpc.tcc"
				>
				class OpLvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52749 "powerpc.tcc"
				>
				{
				public:
					OpLvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52760 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52764 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52767 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52771 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52774 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52788 "powerpc.tcc"
				>
				class OpMfvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52793 "powerpc.tcc"
				>
				{
				public:
					OpMfvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					virtual
#line 64 "ppc.isa"
					void
#line 52802 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52806 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52809 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52813 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52816 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52833 "powerpc.tcc"
				>
				class OpMtvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52838 "powerpc.tcc"
				>
				{
				public:
					OpMtvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 52847 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52851 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52854 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52858 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52861 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52878 "powerpc.tcc"
				>
				class OpStvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52883 "powerpc.tcc"
				>
				{
				public:
					OpStvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52894 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52898 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52901 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52905 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52908 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52925 "powerpc.tcc"
				>
				class OpStvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52930 "powerpc.tcc"
				>
				{
				public:
					OpStvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52941 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52945 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52948 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52952 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52955 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52972 "powerpc.tcc"
				>
				class OpStvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52977 "powerpc.tcc"
				>
				{
				public:
					OpStvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52988 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52992 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52995 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52999 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53002 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53019 "powerpc.tcc"
				>
				class OpStvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53024 "powerpc.tcc"
				>
				{
				public:
					OpStvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 53035 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53039 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53042 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53046 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53049 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53066 "powerpc.tcc"
				>
				class OpStvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53071 "powerpc.tcc"
				>
				{
				public:
					OpStvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 53082 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53086 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53089 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53093 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53096 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53113 "powerpc.tcc"
				>
				class OpVaddcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53118 "powerpc.tcc"
				>
				{
				public:
					OpVaddcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53129 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53133 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53136 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53140 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53143 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53157 "powerpc.tcc"
				>
				class OpVaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53162 "powerpc.tcc"
				>
				{
				public:
					OpVaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53173 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53177 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53180 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53184 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53187 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53201 "powerpc.tcc"
				>
				class OpVaddsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53206 "powerpc.tcc"
				>
				{
				public:
					OpVaddsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53217 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53221 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53224 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53228 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53231 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53245 "powerpc.tcc"
				>
				class OpVaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53250 "powerpc.tcc"
				>
				{
				public:
					OpVaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53261 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53265 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53268 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53272 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53275 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53289 "powerpc.tcc"
				>
				class OpVaddsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53294 "powerpc.tcc"
				>
				{
				public:
					OpVaddsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53305 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53309 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53312 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53316 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53319 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53333 "powerpc.tcc"
				>
				class OpVaddubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53338 "powerpc.tcc"
				>
				{
				public:
					OpVaddubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53349 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53353 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53356 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53360 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53363 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53377 "powerpc.tcc"
				>
				class OpVaddubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53382 "powerpc.tcc"
				>
				{
				public:
					OpVaddubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53393 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53397 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53400 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53404 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53407 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53421 "powerpc.tcc"
				>
				class OpVadduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53426 "powerpc.tcc"
				>
				{
				public:
					OpVadduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53437 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53441 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53444 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53448 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53451 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53465 "powerpc.tcc"
				>
				class OpVadduhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53470 "powerpc.tcc"
				>
				{
				public:
					OpVadduhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53481 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53485 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53488 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53492 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53495 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53509 "powerpc.tcc"
				>
				class OpVadduwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53514 "powerpc.tcc"
				>
				{
				public:
					OpVadduwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53525 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53529 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53532 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53536 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53539 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53553 "powerpc.tcc"
				>
				class OpVadduws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53558 "powerpc.tcc"
				>
				{
				public:
					OpVadduws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53569 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53573 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53576 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53580 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53583 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53597 "powerpc.tcc"
				>
				class OpVand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53602 "powerpc.tcc"
				>
				{
				public:
					OpVand(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53613 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53617 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53620 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53624 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53627 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53641 "powerpc.tcc"
				>
				class OpVandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53646 "powerpc.tcc"
				>
				{
				public:
					OpVandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53657 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53661 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53664 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53668 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53671 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53685 "powerpc.tcc"
				>
				class OpVavgsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53690 "powerpc.tcc"
				>
				{
				public:
					OpVavgsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53701 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53705 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53708 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53712 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53715 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53729 "powerpc.tcc"
				>
				class OpVavgsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53734 "powerpc.tcc"
				>
				{
				public:
					OpVavgsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53745 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53749 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53752 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53756 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53759 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53773 "powerpc.tcc"
				>
				class OpVavgsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53778 "powerpc.tcc"
				>
				{
				public:
					OpVavgsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53789 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53793 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53796 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53800 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53803 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53817 "powerpc.tcc"
				>
				class OpVavgub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53822 "powerpc.tcc"
				>
				{
				public:
					OpVavgub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53833 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53837 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53840 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53844 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53847 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53858 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53861 "powerpc.tcc"
				>
				class OpVavguh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53866 "powerpc.tcc"
				>
				{
				public:
					OpVavguh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53877 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53881 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53884 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53888 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53891 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53905 "powerpc.tcc"
				>
				class OpVavguw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53910 "powerpc.tcc"
				>
				{
				public:
					OpVavguw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53921 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53925 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53928 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53932 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53935 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53949 "powerpc.tcc"
				>
				class OpVcfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53954 "powerpc.tcc"
				>
				{
				public:
					OpVcfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53965 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53969 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53972 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53976 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53979 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53993 "powerpc.tcc"
				>
				class OpVcfux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53998 "powerpc.tcc"
				>
				{
				public:
					OpVcfux(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54009 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54013 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54016 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54020 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54023 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54037 "powerpc.tcc"
				>
				class OpVcmpbfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54042 "powerpc.tcc"
				>
				{
				public:
					OpVcmpbfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54054 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54058 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54061 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54065 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54068 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54082 "powerpc.tcc"
				>
				class OpVcmpeqfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54087 "powerpc.tcc"
				>
				{
				public:
					OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54099 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54103 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54106 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54110 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54113 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54127 "powerpc.tcc"
				>
				class OpVcmpequb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54132 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54144 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54148 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54151 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54155 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54158 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54172 "powerpc.tcc"
				>
				class OpVcmpequh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54177 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54189 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54193 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54196 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54200 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54203 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54217 "powerpc.tcc"
				>
				class OpVcmpequw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54222 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54234 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54238 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54241 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54245 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54248 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54262 "powerpc.tcc"
				>
				class OpVcmpgefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54267 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54279 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54283 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54286 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54290 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54293 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54307 "powerpc.tcc"
				>
				class OpVcmpgtfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54312 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54324 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54328 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54331 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54335 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54338 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54352 "powerpc.tcc"
				>
				class OpVcmpgtsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54357 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54369 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54373 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54376 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54380 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54383 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54397 "powerpc.tcc"
				>
				class OpVcmpgtsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54402 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54414 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54418 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54421 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54425 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54428 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54442 "powerpc.tcc"
				>
				class OpVcmpgtsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54447 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54459 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54463 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54466 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54470 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54473 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54487 "powerpc.tcc"
				>
				class OpVcmpgtub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54492 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54504 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54508 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54511 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54515 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54518 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54532 "powerpc.tcc"
				>
				class OpVcmpgtuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54537 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54549 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54553 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54556 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54560 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54563 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54577 "powerpc.tcc"
				>
				class OpVcmpgtuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54582 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54594 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54598 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54601 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54605 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54608 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54622 "powerpc.tcc"
				>
				class OpVctsxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54627 "powerpc.tcc"
				>
				{
				public:
					OpVctsxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54638 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54642 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54645 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54649 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54652 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54666 "powerpc.tcc"
				>
				class OpVctuxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54671 "powerpc.tcc"
				>
				{
				public:
					OpVctuxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54682 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54686 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54689 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54693 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54696 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54710 "powerpc.tcc"
				>
				class OpVexptefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54715 "powerpc.tcc"
				>
				{
				public:
					OpVexptefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54725 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54729 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54732 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54736 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54739 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54753 "powerpc.tcc"
				>
				class OpVlogefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54758 "powerpc.tcc"
				>
				{
				public:
					OpVlogefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54768 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54772 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54775 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54779 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54782 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54796 "powerpc.tcc"
				>
				class OpVmaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54801 "powerpc.tcc"
				>
				{
				public:
					OpVmaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 54813 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54817 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54820 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54824 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54827 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54841 "powerpc.tcc"
				>
				class OpVmaxfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54846 "powerpc.tcc"
				>
				{
				public:
					OpVmaxfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54857 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54861 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54864 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54868 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54871 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54885 "powerpc.tcc"
				>
				class OpVmaxsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54890 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54901 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54905 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54908 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54912 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54915 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54929 "powerpc.tcc"
				>
				class OpVmaxsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54934 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54945 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54949 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54952 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54956 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54959 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54973 "powerpc.tcc"
				>
				class OpVmaxsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54978 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54989 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54993 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54996 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55000 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55003 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55017 "powerpc.tcc"
				>
				class OpVmaxub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55022 "powerpc.tcc"
				>
				{
				public:
					OpVmaxub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55033 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55037 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55040 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55044 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55047 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55061 "powerpc.tcc"
				>
				class OpVmaxuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55066 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55077 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55081 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55084 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55088 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55091 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55105 "powerpc.tcc"
				>
				class OpVmaxuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55110 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55121 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55125 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55128 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55132 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55135 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55149 "powerpc.tcc"
				>
				class OpVmhaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55154 "powerpc.tcc"
				>
				{
				public:
					OpVmhaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55166 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55170 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55173 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55177 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55180 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55194 "powerpc.tcc"
				>
				class OpVmhraddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55199 "powerpc.tcc"
				>
				{
				public:
					OpVmhraddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55211 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55215 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55218 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55222 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55225 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55239 "powerpc.tcc"
				>
				class OpVminfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55244 "powerpc.tcc"
				>
				{
				public:
					OpVminfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55255 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55259 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55262 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55266 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55269 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55283 "powerpc.tcc"
				>
				class OpVminsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55288 "powerpc.tcc"
				>
				{
				public:
					OpVminsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55299 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55303 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55306 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55310 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55313 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55324 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55327 "powerpc.tcc"
				>
				class OpVminsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55332 "powerpc.tcc"
				>
				{
				public:
					OpVminsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55343 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55347 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55350 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55354 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55357 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55371 "powerpc.tcc"
				>
				class OpVminsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55376 "powerpc.tcc"
				>
				{
				public:
					OpVminsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55387 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55391 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55394 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55398 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55401 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55415 "powerpc.tcc"
				>
				class OpVminub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55420 "powerpc.tcc"
				>
				{
				public:
					OpVminub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55431 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55435 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55438 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55442 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55445 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55459 "powerpc.tcc"
				>
				class OpVminuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55464 "powerpc.tcc"
				>
				{
				public:
					OpVminuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55475 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55479 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55482 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55486 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55489 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55503 "powerpc.tcc"
				>
				class OpVminuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55508 "powerpc.tcc"
				>
				{
				public:
					OpVminuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55519 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55523 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55526 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55530 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55533 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55547 "powerpc.tcc"
				>
				class OpVmladduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55552 "powerpc.tcc"
				>
				{
				public:
					OpVmladduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55564 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55568 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55571 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55575 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55578 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55592 "powerpc.tcc"
				>
				class OpVmrghb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55597 "powerpc.tcc"
				>
				{
				public:
					OpVmrghb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55608 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55612 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55615 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55619 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55622 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55633 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55636 "powerpc.tcc"
				>
				class OpVmrghh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55641 "powerpc.tcc"
				>
				{
				public:
					OpVmrghh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55652 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55656 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55659 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55663 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55666 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55680 "powerpc.tcc"
				>
				class OpVmrghw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55685 "powerpc.tcc"
				>
				{
				public:
					OpVmrghw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55696 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55700 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55703 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55707 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55710 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55724 "powerpc.tcc"
				>
				class OpVmrglb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55729 "powerpc.tcc"
				>
				{
				public:
					OpVmrglb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55740 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55744 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55747 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55751 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55754 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55768 "powerpc.tcc"
				>
				class OpVmrglh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55773 "powerpc.tcc"
				>
				{
				public:
					OpVmrglh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55784 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55788 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55791 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55795 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55798 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55812 "powerpc.tcc"
				>
				class OpVmrglw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55817 "powerpc.tcc"
				>
				{
				public:
					OpVmrglw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55828 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55832 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55835 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55839 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55842 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55856 "powerpc.tcc"
				>
				class OpVmsummbm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55861 "powerpc.tcc"
				>
				{
				public:
					OpVmsummbm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55873 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55877 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55880 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55884 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55887 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55901 "powerpc.tcc"
				>
				class OpVmsumshm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55906 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55918 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55922 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55925 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55929 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55932 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55946 "powerpc.tcc"
				>
				class OpVmsumshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55951 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55963 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55967 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55970 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55974 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55977 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55991 "powerpc.tcc"
				>
				class OpVmsumubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55996 "powerpc.tcc"
				>
				{
				public:
					OpVmsumubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56008 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56012 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56015 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56019 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56022 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56036 "powerpc.tcc"
				>
				class OpVmsumuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56041 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56053 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56057 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56060 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56064 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56067 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56081 "powerpc.tcc"
				>
				class OpVmsumuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56086 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56098 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56102 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56105 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56109 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56112 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56126 "powerpc.tcc"
				>
				class OpVmulesb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56131 "powerpc.tcc"
				>
				{
				public:
					OpVmulesb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56142 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56146 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56149 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56153 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56156 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56170 "powerpc.tcc"
				>
				class OpVmulesh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56175 "powerpc.tcc"
				>
				{
				public:
					OpVmulesh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56186 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56190 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56193 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56197 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56200 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56214 "powerpc.tcc"
				>
				class OpVmuleub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56219 "powerpc.tcc"
				>
				{
				public:
					OpVmuleub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56230 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56234 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56237 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56241 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56244 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56258 "powerpc.tcc"
				>
				class OpVmuleuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56263 "powerpc.tcc"
				>
				{
				public:
					OpVmuleuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56274 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56278 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56281 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56285 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56288 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56302 "powerpc.tcc"
				>
				class OpVmulosb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56307 "powerpc.tcc"
				>
				{
				public:
					OpVmulosb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56318 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56322 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56325 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56329 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56332 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56346 "powerpc.tcc"
				>
				class OpVmulosh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56351 "powerpc.tcc"
				>
				{
				public:
					OpVmulosh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56362 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56366 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56369 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56373 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56376 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56390 "powerpc.tcc"
				>
				class OpVmuloub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56395 "powerpc.tcc"
				>
				{
				public:
					OpVmuloub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56406 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56410 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56413 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56417 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56420 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56434 "powerpc.tcc"
				>
				class OpVmulouh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56439 "powerpc.tcc"
				>
				{
				public:
					OpVmulouh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56450 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56454 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56457 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56461 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56464 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56478 "powerpc.tcc"
				>
				class OpVnmsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56483 "powerpc.tcc"
				>
				{
				public:
					OpVnmsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56495 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56499 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56502 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56506 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56509 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56523 "powerpc.tcc"
				>
				class OpVnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56528 "powerpc.tcc"
				>
				{
				public:
					OpVnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56539 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56543 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56546 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56550 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56553 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56567 "powerpc.tcc"
				>
				class OpVor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56572 "powerpc.tcc"
				>
				{
				public:
					OpVor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56583 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56587 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56590 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56594 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56597 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56611 "powerpc.tcc"
				>
				class OpVperm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56616 "powerpc.tcc"
				>
				{
				public:
					OpVperm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56628 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56632 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56635 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56639 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56642 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56656 "powerpc.tcc"
				>
				class OpVpkpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56661 "powerpc.tcc"
				>
				{
				public:
					OpVpkpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56672 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56676 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56679 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56683 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56686 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56700 "powerpc.tcc"
				>
				class OpVpkshss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56705 "powerpc.tcc"
				>
				{
				public:
					OpVpkshss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56716 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56720 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56723 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56727 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56730 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56744 "powerpc.tcc"
				>
				class OpVpkshus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56749 "powerpc.tcc"
				>
				{
				public:
					OpVpkshus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56760 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56764 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56767 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56771 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56774 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56788 "powerpc.tcc"
				>
				class OpVpkswss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56793 "powerpc.tcc"
				>
				{
				public:
					OpVpkswss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56804 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56808 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56811 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56815 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56818 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56832 "powerpc.tcc"
				>
				class OpVpkswus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56837 "powerpc.tcc"
				>
				{
				public:
					OpVpkswus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56848 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56852 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56855 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56859 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56862 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56876 "powerpc.tcc"
				>
				class OpVpkuhum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56881 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56892 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56896 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56899 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56903 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56906 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56920 "powerpc.tcc"
				>
				class OpVpkuhus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56925 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56936 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56940 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56943 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56947 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56950 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56964 "powerpc.tcc"
				>
				class OpVpkuwum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56969 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56980 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56984 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56987 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56991 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56994 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57008 "powerpc.tcc"
				>
				class OpVpkuwus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57013 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57024 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57028 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57031 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57035 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57038 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57052 "powerpc.tcc"
				>
				class OpVrefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57057 "powerpc.tcc"
				>
				{
				public:
					OpVrefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57067 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57071 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57074 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57078 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57081 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57095 "powerpc.tcc"
				>
				class OpVrfim : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57100 "powerpc.tcc"
				>
				{
				public:
					OpVrfim(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57110 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57114 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57117 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57121 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57124 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57138 "powerpc.tcc"
				>
				class OpVrfin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57143 "powerpc.tcc"
				>
				{
				public:
					OpVrfin(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57153 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57157 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57160 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57164 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57167 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57181 "powerpc.tcc"
				>
				class OpVrfip : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57186 "powerpc.tcc"
				>
				{
				public:
					OpVrfip(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57196 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57200 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57203 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57207 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57210 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57224 "powerpc.tcc"
				>
				class OpVrfiz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57229 "powerpc.tcc"
				>
				{
				public:
					OpVrfiz(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57239 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57243 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57246 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57250 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57253 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57267 "powerpc.tcc"
				>
				class OpVrlb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57272 "powerpc.tcc"
				>
				{
				public:
					OpVrlb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57283 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57287 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57290 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57294 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57297 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57311 "powerpc.tcc"
				>
				class OpVrlh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57316 "powerpc.tcc"
				>
				{
				public:
					OpVrlh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57327 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57331 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57334 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57338 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57341 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57355 "powerpc.tcc"
				>
				class OpVrlw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57360 "powerpc.tcc"
				>
				{
				public:
					OpVrlw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57371 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57375 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57378 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57382 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57385 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57399 "powerpc.tcc"
				>
				class OpVrsqrtefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57404 "powerpc.tcc"
				>
				{
				public:
					OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57414 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57418 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57421 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57425 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57428 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57442 "powerpc.tcc"
				>
				class OpVsel : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57447 "powerpc.tcc"
				>
				{
				public:
					OpVsel(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 57459 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57463 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57466 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57470 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57473 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57487 "powerpc.tcc"
				>
				class OpVsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57492 "powerpc.tcc"
				>
				{
				public:
					OpVsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57503 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57507 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57510 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57514 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57517 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57531 "powerpc.tcc"
				>
				class OpVslb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57536 "powerpc.tcc"
				>
				{
				public:
					OpVslb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57547 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57551 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57554 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57558 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57561 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57575 "powerpc.tcc"
				>
				class OpVsldoi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57580 "powerpc.tcc"
				>
				{
				public:
					OpVsldoi(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t sh;
					virtual
#line 64 "ppc.isa"
					void
#line 57592 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57596 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57599 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57603 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57606 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57620 "powerpc.tcc"
				>
				class OpVslh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57625 "powerpc.tcc"
				>
				{
				public:
					OpVslh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57636 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57640 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57643 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57647 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57650 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57664 "powerpc.tcc"
				>
				class OpVslo : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57669 "powerpc.tcc"
				>
				{
				public:
					OpVslo(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57680 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57684 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57687 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57691 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57694 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57708 "powerpc.tcc"
				>
				class OpVslw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57713 "powerpc.tcc"
				>
				{
				public:
					OpVslw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57724 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57728 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57731 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57735 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57738 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57752 "powerpc.tcc"
				>
				class OpVspltb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57757 "powerpc.tcc"
				>
				{
				public:
					OpVspltb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57768 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57772 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57775 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57779 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57782 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57796 "powerpc.tcc"
				>
				class OpVsplth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57801 "powerpc.tcc"
				>
				{
				public:
					OpVsplth(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57812 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57816 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57819 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57823 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57826 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57840 "powerpc.tcc"
				>
				class OpVspltisb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57845 "powerpc.tcc"
				>
				{
				public:
					OpVspltisb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57856 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57860 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57863 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57867 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57870 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57884 "powerpc.tcc"
				>
				class OpVspltish : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57889 "powerpc.tcc"
				>
				{
				public:
					OpVspltish(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57900 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57904 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57907 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57911 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57914 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57928 "powerpc.tcc"
				>
				class OpVspltisw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57933 "powerpc.tcc"
				>
				{
				public:
					OpVspltisw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57944 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57948 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57951 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57955 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57958 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57972 "powerpc.tcc"
				>
				class OpVspltw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57977 "powerpc.tcc"
				>
				{
				public:
					OpVspltw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57988 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57992 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57995 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57999 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58002 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58016 "powerpc.tcc"
				>
				class OpVsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58021 "powerpc.tcc"
				>
				{
				public:
					OpVsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58032 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58036 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58039 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58043 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58046 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58060 "powerpc.tcc"
				>
				class OpVsrab : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58065 "powerpc.tcc"
				>
				{
				public:
					OpVsrab(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58076 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58080 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58083 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58087 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58090 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58104 "powerpc.tcc"
				>
				class OpVsrah : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58109 "powerpc.tcc"
				>
				{
				public:
					OpVsrah(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58120 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58124 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58127 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58131 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58134 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58148 "powerpc.tcc"
				>
				class OpVsraw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58153 "powerpc.tcc"
				>
				{
				public:
					OpVsraw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58164 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58168 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58171 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58175 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58178 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58192 "powerpc.tcc"
				>
				class OpVsrb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58197 "powerpc.tcc"
				>
				{
				public:
					OpVsrb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58208 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58212 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58215 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58219 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58222 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58236 "powerpc.tcc"
				>
				class OpVsrh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58241 "powerpc.tcc"
				>
				{
				public:
					OpVsrh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58252 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58256 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58259 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58263 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58266 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58280 "powerpc.tcc"
				>
				class OpVsro : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58285 "powerpc.tcc"
				>
				{
				public:
					OpVsro(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58296 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58300 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58303 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58307 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58310 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58324 "powerpc.tcc"
				>
				class OpVsrw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58329 "powerpc.tcc"
				>
				{
				public:
					OpVsrw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58340 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58344 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58347 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58351 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58354 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58368 "powerpc.tcc"
				>
				class OpVsubcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58373 "powerpc.tcc"
				>
				{
				public:
					OpVsubcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58384 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58388 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58391 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58395 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58398 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58409 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58412 "powerpc.tcc"
				>
				class OpVsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58417 "powerpc.tcc"
				>
				{
				public:
					OpVsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58428 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58432 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58435 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58439 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58442 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58456 "powerpc.tcc"
				>
				class OpVsubsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58461 "powerpc.tcc"
				>
				{
				public:
					OpVsubsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58472 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58476 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58479 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58483 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58486 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58500 "powerpc.tcc"
				>
				class OpVsubshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58505 "powerpc.tcc"
				>
				{
				public:
					OpVsubshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58516 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58520 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58523 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58527 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58530 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58544 "powerpc.tcc"
				>
				class OpVsubsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58549 "powerpc.tcc"
				>
				{
				public:
					OpVsubsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58560 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58564 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58567 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58571 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58574 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58588 "powerpc.tcc"
				>
				class OpVsububm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58593 "powerpc.tcc"
				>
				{
				public:
					OpVsububm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58604 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58608 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58611 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58615 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58618 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58632 "powerpc.tcc"
				>
				class OpVsububs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58637 "powerpc.tcc"
				>
				{
				public:
					OpVsububs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58648 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58652 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58655 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58659 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58662 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58676 "powerpc.tcc"
				>
				class OpVsubuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58681 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58692 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58696 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58699 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58703 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58706 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58720 "powerpc.tcc"
				>
				class OpVsubuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58725 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58736 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58740 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58743 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58747 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58750 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58764 "powerpc.tcc"
				>
				class OpVsubuwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58769 "powerpc.tcc"
				>
				{
				public:
					OpVsubuwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58780 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58784 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58787 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58791 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58794 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58808 "powerpc.tcc"
				>
				class OpVsubuws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58813 "powerpc.tcc"
				>
				{
				public:
					OpVsubuws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58824 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58828 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58831 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58835 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58838 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58852 "powerpc.tcc"
				>
				class OpVsumsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58857 "powerpc.tcc"
				>
				{
				public:
					OpVsumsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58868 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58872 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58875 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58879 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58882 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58896 "powerpc.tcc"
				>
				class OpVsum2sws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58901 "powerpc.tcc"
				>
				{
				public:
					OpVsum2sws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58912 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58916 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58919 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58923 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58926 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58940 "powerpc.tcc"
				>
				class OpVsum4sbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58945 "powerpc.tcc"
				>
				{
				public:
					OpVsum4sbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58956 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58960 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58963 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58967 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58970 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58984 "powerpc.tcc"
				>
				class OpVsum4shs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58989 "powerpc.tcc"
				>
				{
				public:
					OpVsum4shs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59000 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59004 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59007 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59011 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59014 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59028 "powerpc.tcc"
				>
				class OpVsum4ubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59033 "powerpc.tcc"
				>
				{
				public:
					OpVsum4ubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59044 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59048 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59051 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59055 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59058 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59072 "powerpc.tcc"
				>
				class OpVupkhpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59077 "powerpc.tcc"
				>
				{
				public:
					OpVupkhpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59087 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59091 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59094 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59098 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59101 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59115 "powerpc.tcc"
				>
				class OpVupkhsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59120 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59130 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59134 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59137 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59141 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59144 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59158 "powerpc.tcc"
				>
				class OpVupkhsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59163 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59173 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59177 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59180 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59184 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59187 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59201 "powerpc.tcc"
				>
				class OpVupklpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59206 "powerpc.tcc"
				>
				{
				public:
					OpVupklpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59216 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59220 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59223 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59227 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59230 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59244 "powerpc.tcc"
				>
				class OpVupklsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59249 "powerpc.tcc"
				>
				{
				public:
					OpVupklsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59259 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59263 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59266 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59270 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59273 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59284 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59287 "powerpc.tcc"
				>
				class OpVupklsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59292 "powerpc.tcc"
				>
				{
				public:
					OpVupklsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59302 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59306 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59309 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59313 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59316 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59330 "powerpc.tcc"
				>
				class OpVxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59335 "powerpc.tcc"
				>
				{
				public:
					OpVxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59346 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59350 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59353 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59357 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59360 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 59404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59407 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 59411 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59415 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 59419 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 59422 "powerpc.tcc"
				)
				{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t ca; // carry out
						uint8_t ov; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						Add32(result, ca, ov, sign, a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							if(unlikely(oe))
							{
								// Generate XER[OV] and XER[SO]
								xer = ov ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 59468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59476 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 59480 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59484 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 59488 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 59491 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 59495 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 59498 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "add" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 59505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59513 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59520 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 59525 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59533 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59540 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59558 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59565 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59583 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59590 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59608 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59615 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59630 "powerpc.tcc"
				}
				/** Integer (FnIntBasic | FnIntBasicSerial | FnIntExtended) **/
				template <
#line 38 "ppc.isa"
				class
#line 59636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59639 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59646 "powerpc.tcc"
				>::initialize_function()
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 59651 "powerpc.tcc"
				}
				/** Integer **/
				template <
#line 38 "ppc.isa"
				class
#line 59657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59660 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59667 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59680 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59687 "powerpc.tcc"
				>::initialize_operands()
				{
#line 464 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 59700 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59709 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59714 "powerpc.tcc"
				> *DecodeOpAdd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 59720 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 59727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59730 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 59734 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59738 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 59742 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 59745 "powerpc.tcc"
				)
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 59792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59800 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 59804 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59808 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 59812 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 59815 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 59819 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 59822 "powerpc.tcc"
				)
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 59829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59837 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59844 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 59849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59857 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59864 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59882 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59889 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59899 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59904 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59907 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59914 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59924 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59929 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59932 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59939 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59962 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59969 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59987 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59995 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60002 "powerpc.tcc"
				>::initialize_function()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60007 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60015 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60022 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60027 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60035 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60042 "powerpc.tcc"
				>::initialize_operands()
				{
#line 475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 60056 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60065 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60070 "powerpc.tcc"
				> *DecodeOpAddc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 60076 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60086 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60090 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60094 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60098 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60101 "powerpc.tcc"
				)
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();
						uint32_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, a, b, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 60149 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60157 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60161 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60165 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60169 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60172 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60176 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60179 "powerpc.tcc"
				)
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "adde" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 60186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60194 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60201 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60206 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60214 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60221 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 60228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60236 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60243 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60253 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60261 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60268 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60278 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60286 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60293 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60310 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60317 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60335 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60342 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 60357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60365 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60372 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 60390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60398 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60405 "powerpc.tcc"
				>::initialize_function()
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 60410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60418 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60425 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 125 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60438 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60445 "powerpc.tcc"
				>::initialize_operands()
				{
#line 487 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 60460 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60469 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60474 "powerpc.tcc"
				> *DecodeOpAdde(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 60480 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60490 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60494 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60498 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60502 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60505 "powerpc.tcc"
				)
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t result = (ra != 0 ? a + simm : simm);

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 60519 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60527 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60531 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60535 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60539 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60542 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60546 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60549 "powerpc.tcc"
				)
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "li r" << rd << ", " << simm;
						else
						os << "addi r" << rd << ", r" << ra << ", " << simm;
					}
#line 60559 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60567 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60574 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60579 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60587 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60594 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60604 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60612 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60619 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60629 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60637 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60644 "powerpc.tcc"
				>::initialize_function()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60649 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60657 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60664 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60677 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60684 "powerpc.tcc"
				>::initialize_operands()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 60696 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60705 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60710 "powerpc.tcc"
				> *DecodeOpAddi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 60716 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60726 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60730 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60734 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60738 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60741 "powerpc.tcc"
				)
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, a, simm, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);
					}
#line 60767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60775 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60779 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60783 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60787 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60790 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60794 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60797 "powerpc.tcc"
				)
				{
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic r" << rd << ", r" << ra << ", " << simm;
					}
#line 60804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60812 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60819 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60832 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60839 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60857 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60864 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60882 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60889 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60898 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60906 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60913 "powerpc.tcc"
				>::initialize_function()
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60918 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60926 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60933 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60938 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 60955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60958 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60965 "powerpc.tcc"
				>::initialize_operands()
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 60975 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60984 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60989 "powerpc.tcc"
				> *DecodeOpAddic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 60995 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61005 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61009 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61013 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61017 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61020 "powerpc.tcc"
				)
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, a, simm, 0) ;

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 61057 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61065 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61069 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61073 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61077 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61080 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61084 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61087 "powerpc.tcc"
				)
				{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic. r" << rd << ", r" << ra << ", " << simm;
					}
#line 61094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61102 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61109 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61122 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61129 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61147 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61154 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61172 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61179 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61196 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61203 "powerpc.tcc"
				>::initialize_function()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61216 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61223 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61236 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61243 "powerpc.tcc"
				>::initialize_operands()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
						OUTPUT(XER_T,2);

					}
#line 61254 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61263 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61268 "powerpc.tcc"
				> *DecodeOpAddic_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 61274 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61281 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61284 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61288 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61292 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61296 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61299 "powerpc.tcc"
				)
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t result = ra != 0 ? a + simm : simm;

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 61313 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61321 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61325 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61329 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61333 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61336 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61340 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61343 "powerpc.tcc"
				)
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "lis r" << rd << ", " << (simm >> 16);
						else
						os << "addis r" << rd << ", r" << ra << ", " << (simm >> 16);
					}
#line 61353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61361 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61368 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61373 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61381 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61388 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61398 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61406 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61413 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61423 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61431 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61438 "powerpc.tcc"
				>::initialize_function()
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61443 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61451 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61458 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61463 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61471 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61478 "powerpc.tcc"
				>::initialize_operands()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 61490 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61499 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61504 "powerpc.tcc"
				> *DecodeOpAddis(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 61510 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61520 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61524 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61528 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61532 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61535 "powerpc.tcc"
				)
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, 0xFFFFFFFF, a, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 61582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61590 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61594 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61598 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61602 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61605 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61609 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61612 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 61619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61627 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61634 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61647 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61654 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 61661 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61669 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61676 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61686 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61694 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61701 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61710 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61718 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61725 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61743 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61750 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 61768 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61776 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61783 "powerpc.tcc"
				>::initialize_function()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 61788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61796 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61803 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61808 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 61825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61828 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61835 "powerpc.tcc"
				>::initialize_operands()
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 61845 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61854 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61859 "powerpc.tcc"
				> *DecodeOpAddme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 61865 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61875 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61879 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61883 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61887 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61890 "powerpc.tcc"
				)
				{
#line 356 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, a, carry_in, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 61937 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61945 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61949 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61953 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61957 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61960 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61964 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61967 "powerpc.tcc"
				)
				{
#line 399 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 61974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61982 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61989 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61994 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62002 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62009 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 62016 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62024 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62031 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62041 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62049 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62056 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62073 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62080 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62090 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62098 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62105 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62128 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62135 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62161 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62168 "powerpc.tcc"
				>::initialize_function()
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 62173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62181 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62188 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62201 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62208 "powerpc.tcc"
				>::initialize_operands()
				{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62222 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62231 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62236 "powerpc.tcc"
				> *DecodeOpAddze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 62242 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62252 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62256 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62260 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62264 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62267 "powerpc.tcc"
				)
				{
#line 405 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						if(unlikely((a == 0x80000000UL && b == 0xffffffffUL) || b == 0))
						{
							// Write back the result (zero)
							cpu->SetGPR(rd, 0);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();
								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: LT=0 GT=0 EQ=0 SO=XER[SO]
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0);

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Read the input operands
							int32_t a = cpu->GetGPR(ra);
							int32_t b = cpu->GetGPR(rb);

							// Compute the result
							int32_t result = a / b;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 62348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62356 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 62360 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62364 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 62368 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 62371 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 62375 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 62378 "powerpc.tcc"
				)
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 62385 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62393 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62400 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 62405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62413 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62420 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62438 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62445 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62463 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62470 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62488 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62495 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62518 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62525 "powerpc.tcc"
				>::initialize_function()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 62530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62538 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62545 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 62550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62558 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62565 "powerpc.tcc"
				>::initialize_operands()
				{
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62578 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62587 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62592 "powerpc.tcc"
				> *DecodeOpDivw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 62598 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62608 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62612 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62616 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62620 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62623 "powerpc.tcc"
				)
				{
#line 487 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						if(unlikely(b == 0))
						{
							// Write back the result (zero)
							cpu->SetGPR(rd, 0);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=0 CR0[GT]=0 CR0[EQ]=1
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									CONFIG::CR0_EQ_MASK;

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Compute the result
							uint32_t result = a / b ;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 62702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62710 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 62714 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62718 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 62722 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 62725 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 62729 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 62732 "powerpc.tcc"
				)
				{
#line 562 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divwu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 62739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62747 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62754 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 62759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62767 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62774 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62784 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62792 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62799 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62809 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62817 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62824 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62834 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62842 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62849 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62872 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62879 "powerpc.tcc"
				>::initialize_function()
				{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 62884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62892 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62899 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 62904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62912 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62919 "powerpc.tcc"
				>::initialize_operands()
				{
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62932 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62941 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62946 "powerpc.tcc"
				> *DecodeOpDivwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 62952 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62962 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62966 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 62970 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62974 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62977 "powerpc.tcc"
				)
				{
#line 568 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = cpu->GetGPR(rb);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) b;
						uint32_t result = (int32_t) (result64 >> 32);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 63010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63018 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63022 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63026 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63030 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63033 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63037 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63040 "powerpc.tcc"
				)
				{
#line 597 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhw" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63055 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63062 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63075 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63082 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63100 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63107 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63117 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63125 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63132 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63142 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63150 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63157 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 63172 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63180 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63187 "powerpc.tcc"
				>::initialize_function()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63200 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63207 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 63212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63220 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63227 "powerpc.tcc"
				>::initialize_operands()
				{
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63240 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63249 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63254 "powerpc.tcc"
				> *DecodeOpMulhw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 63260 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63270 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63274 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63278 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63282 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63285 "powerpc.tcc"
				)
				{
#line 602 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint64_t result64 = (uint64_t) a * (uint64_t) b;
						uint32_t result = (uint32_t) (result64 >> 32);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 63318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63326 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63330 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63334 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63338 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63341 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63345 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63348 "powerpc.tcc"
				)
				{
#line 631 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhwu" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63363 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63370 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63383 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63390 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63408 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63415 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63425 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63433 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63440 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63450 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63458 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63465 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 63480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63488 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63495 "powerpc.tcc"
				>::initialize_function()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63500 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63508 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63515 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 135 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 63520 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63528 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63535 "powerpc.tcc"
				>::initialize_operands()
				{
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63548 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63557 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63562 "powerpc.tcc"
				> *DecodeOpMulhwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 63568 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63578 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63582 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63586 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63590 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63593 "powerpc.tcc"
				)
				{
#line 636 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) simm;
						uint32_t result = (uint32_t) result64;

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 63608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63616 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63620 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63624 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63628 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63631 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63635 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63638 "powerpc.tcc"
				)
				{
#line 647 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulli r" << rd << ", r" << ra << ", " << simm;
					}
#line 63645 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63653 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63660 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63665 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63673 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63680 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63690 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63698 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63705 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63723 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63730 "powerpc.tcc"
				>::initialize_function()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 63735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63743 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63750 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 63755 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63763 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63770 "powerpc.tcc"
				>::initialize_operands()
				{
#line 233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 63778 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63787 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63792 "powerpc.tcc"
				> *DecodeOpMulli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 63798 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63808 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63812 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63816 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63820 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63823 "powerpc.tcc"
				)
				{
#line 652 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) b;
						uint32_t result = (uint32_t) result64;

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							if(oe && (0xFFFFFFFF00000000ULL & result64) != 0)
							{
								// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
								xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 63867 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63875 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63879 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63883 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63887 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63890 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63894 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63897 "powerpc.tcc"
				)
				{
#line 692 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mullw r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63912 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63919 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63924 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63929 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63932 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63939 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63957 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63964 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63982 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63989 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64007 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64014 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 64029 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64037 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64044 "powerpc.tcc"
				>::initialize_function()
				{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 64049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64057 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64064 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 137 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ if (oe) LAT(5); else LAT(4); }
#line 64069 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64077 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64084 "powerpc.tcc"
				>::initialize_operands()
				{
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64097 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64106 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64111 "powerpc.tcc"
				> *DecodeOpMullw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 64117 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64127 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64131 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64135 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64139 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64142 "powerpc.tcc"
				)
				{
#line 697 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						if(a == 0x80000000UL)
						{
							// Write back the result
							cpu->SetGPR(rd, 0x80000000UL);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;
									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=1 CR0[GT]=0 CR0[EQ]=0
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									CONFIG::CR0_LT_MASK;

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Compute the result
							uint32_t result = -a; // 2's complement of a: (~a) + 1;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;
									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 64218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64226 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64230 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64234 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64238 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64241 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64245 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64248 "powerpc.tcc"
				)
				{
#line 769 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "neg" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 64255 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64263 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64270 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64283 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64290 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64300 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64308 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64315 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64325 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64333 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64340 "powerpc.tcc"
				>::initialize_function()
				{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64353 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64360 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64373 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64380 "powerpc.tcc"
				>::initialize_operands()
				{
#line 233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 64388 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64397 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64402 "powerpc.tcc"
				> *DecodeOpNeg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 64408 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64418 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64422 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64426 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64430 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64433 "powerpc.tcc"
				)
				{
#line 774 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t sign; // sign
						uint8_t overflow; // overflow

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result;
						Add32(result, carry, overflow, sign, ~a, b, 1);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							if(unlikely(oe))
							{
								// Generate XER[OV] and XER[SO]
								xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 64479 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64487 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64491 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64495 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64499 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64502 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64506 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64509 "powerpc.tcc"
				)
				{
#line 816 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subf" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 64516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64524 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64531 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64544 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64551 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64569 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64576 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64594 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64601 "powerpc.tcc"
				>::initialize_function()
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64606 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64614 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64621 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64634 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64641 "powerpc.tcc"
				>::initialize_operands()
				{
#line 464 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64654 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64663 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64668 "powerpc.tcc"
				> *DecodeOpSubf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 64674 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64684 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64688 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64692 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64696 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64699 "powerpc.tcc"
				)
				{
#line 821 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, ~a, b, 1);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 64745 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64753 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64757 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64761 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64765 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64768 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64772 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64775 "powerpc.tcc"
				)
				{
#line 863 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 64782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64790 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64797 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64810 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64817 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64835 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64842 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64860 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64867 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 64885 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64893 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64900 "powerpc.tcc"
				>::initialize_function()
				{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64913 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64920 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64925 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64933 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64940 "powerpc.tcc"
				>::initialize_operands()
				{
#line 475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64954 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64963 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64968 "powerpc.tcc"
				> *DecodeOpSubfc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 64974 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64984 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64988 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 64992 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64996 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64999 "powerpc.tcc"
				)
				{
#line 868 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, ~a, b, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 65047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65055 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65059 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65063 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65067 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65070 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65074 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65077 "powerpc.tcc"
				)
				{
#line 912 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfe" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 65084 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65092 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65099 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65104 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65112 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65119 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 65126 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65131 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65134 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65141 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65159 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65166 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65175 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65183 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65190 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65200 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65208 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65215 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 65233 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65241 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65248 "powerpc.tcc"
				>::initialize_function()
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 65253 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65261 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65268 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65281 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65288 "powerpc.tcc"
				>::initialize_operands()
				{
#line 487 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 65303 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65312 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65317 "powerpc.tcc"
				> *DecodeOpSubfe(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 65323 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65333 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65337 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65341 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65345 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65348 "powerpc.tcc"
				)
				{
#line 917 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow = 0; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = simm;
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, sign, -a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = (carry || a == 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);
					}
#line 65375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65383 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65387 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65391 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65395 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65398 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65402 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65405 "powerpc.tcc"
				)
				{
#line 940 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfic r" << rd << ", r" << ra << ", " << simm;
					}
#line 65412 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65420 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65427 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65440 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65447 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65465 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65472 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65490 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65497 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65514 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65521 "powerpc.tcc"
				>::initialize_function()
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 65526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65534 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65541 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 142 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65546 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 65563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65566 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65573 "powerpc.tcc"
				>::initialize_operands()
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 65583 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65592 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65597 "powerpc.tcc"
				> *DecodeOpSubfic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 65603 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65613 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65617 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65621 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65625 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65628 "powerpc.tcc"
				)
				{
#line 945 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, ~a, 0xFFFFFFFF, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 65675 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65683 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65687 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65691 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65695 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65698 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65702 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65705 "powerpc.tcc"
				)
				{
#line 988 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 65712 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65720 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65727 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65732 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65740 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65747 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 65754 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65762 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65769 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65787 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65794 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65811 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65818 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65828 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65833 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65836 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65843 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 65861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65869 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65876 "powerpc.tcc"
				>::initialize_function()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 65881 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65889 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65896 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65901 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 65918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65921 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65928 "powerpc.tcc"
				>::initialize_operands()
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 65938 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65947 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65952 "powerpc.tcc"
				> *DecodeOpSubfme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 65958 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65968 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65972 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 65976 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65980 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65983 "powerpc.tcc"
				)
				{
#line 993 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint8_t sign; // sign
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, sign, ~a, carry_in, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 66030 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66038 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66042 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66046 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66050 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66053 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66057 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66060 "powerpc.tcc"
				)
				{
#line 1036 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 66067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66075 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66082 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66095 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66102 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 66109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66117 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66124 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66142 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66149 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66166 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66173 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66191 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66198 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 66216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66224 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66231 "powerpc.tcc"
				>::initialize_function()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 66236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66244 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66251 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66264 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66271 "powerpc.tcc"
				>::initialize_operands()
				{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 66285 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66294 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66299 "powerpc.tcc"
				> *DecodeOpSubfze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 66305 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER COMPARE INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 66317 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66320 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66324 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66328 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66332 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66335 "powerpc.tcc"
				)
				{
#line 1047 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = cpu->GetGPR(rb) ;
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < b) ? CONFIG::CR0_LT_MASK : (a > b) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66361 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66365 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66369 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66373 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66376 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66380 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66383 "powerpc.tcc"
				)
				{
#line 1061 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmp cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 66390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66398 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66405 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66418 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66425 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66443 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66450 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66460 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66468 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66475 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 468 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66484 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66492 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66499 "powerpc.tcc"
				>::initialize_function()
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66504 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66512 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66519 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66524 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66532 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66539 "powerpc.tcc"
				>::initialize_operands()
				{
#line 751 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66550 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66559 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66564 "powerpc.tcc"
				> *DecodeOpCmp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 66570 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66580 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66584 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66588 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66592 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66595 "powerpc.tcc"
				)
				{
#line 1066 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < simm) ? CONFIG::CR0_LT_MASK : (a > simm) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66615 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66623 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66627 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66631 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66635 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66638 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66642 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66645 "powerpc.tcc"
				)
				{
#line 1082 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpi cr" << crfD << ", " << l << ", r" << ra << ", " << simm;
					}
#line 66652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66660 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66667 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66680 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66687 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66705 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66712 "powerpc.tcc"
				>::initialize_function()
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66725 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66732 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66737 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66745 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66752 "powerpc.tcc"
				>::initialize_operands()
				{
#line 383 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66762 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66771 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66776 "powerpc.tcc"
				> *DecodeOpCmpi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 66782 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66792 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66796 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66800 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66804 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66807 "powerpc.tcc"
				)
				{
#line 1087 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb) ;
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < b) ? CONFIG::CR0_LT_MASK : (a > b) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66828 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66833 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66836 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66840 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66844 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66848 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66851 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66855 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66858 "powerpc.tcc"
				)
				{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpl cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 66865 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66873 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66880 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66885 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66893 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66900 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66918 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66925 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66943 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66950 "powerpc.tcc"
				>::initialize_function()
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66963 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66970 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66983 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66990 "powerpc.tcc"
				>::initialize_operands()
				{
#line 751 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 67001 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67010 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67015 "powerpc.tcc"
				> *DecodeOpCmpl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 67021 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67031 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67035 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67039 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67043 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67046 "powerpc.tcc"
				)
				{
#line 1109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < uimm) ? CONFIG::CR0_LT_MASK : (a > uimm) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67066 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67074 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67078 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67082 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67086 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67089 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67093 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67096 "powerpc.tcc"
				)
				{
#line 1125 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpli cr" << crfD << ", " << l << ", r" << ra << ", " << uimm;
					}
#line 67103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67111 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67118 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67123 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67131 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67138 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67148 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67156 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67163 "powerpc.tcc"
				>::initialize_function()
				{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67176 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67183 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67196 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67203 "powerpc.tcc"
				>::initialize_operands()
				{
#line 383 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 67213 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67222 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67227 "powerpc.tcc"
				> *DecodeOpCmpli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 67233 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 67245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67248 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67252 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67256 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67260 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67263 "powerpc.tcc"
				)
				{
#line 1136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s & b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 67295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67303 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67307 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67311 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67315 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67318 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67322 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67325 "powerpc.tcc"
				)
				{
#line 1164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "and" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 67332 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67340 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67347 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67360 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67367 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67385 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67392 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67410 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67417 "powerpc.tcc"
				>::initialize_function()
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67430 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67437 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 149 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67450 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67457 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 67470 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67479 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67484 "powerpc.tcc"
				> *DecodeOpAnd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 67490 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67500 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67504 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67508 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67512 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67515 "powerpc.tcc"
				)
				{
#line 1169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s & ~b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 67547 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67555 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67559 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67563 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67567 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67570 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67574 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67577 "powerpc.tcc"
				)
				{
#line 1197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 67584 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67592 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67599 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67604 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67612 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67619 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67629 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67637 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67644 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67662 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67669 "powerpc.tcc"
				>::initialize_function()
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67682 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67689 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67702 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67709 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 67722 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67731 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67736 "powerpc.tcc"
				> *DecodeOpAndc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 67742 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67752 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67756 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67760 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67764 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67767 "powerpc.tcc"
				)
				{
#line 1202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						uint32_t result = s & uimm;

						// Write back the result
						cpu->SetGPR(ra, result);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67801 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67805 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67809 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67813 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67816 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67820 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67823 "powerpc.tcc"
				)
				{
#line 1224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andi. r" << ra << ", r" << rs << ", " << uimm;
					}
#line 67830 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67838 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67845 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67858 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67865 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67875 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67883 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67890 "powerpc.tcc"
				>::initialize_function()
				{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67895 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67903 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67910 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67915 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67923 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67930 "powerpc.tcc"
				>::initialize_operands()
				{
#line 340 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 67939 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67948 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67953 "powerpc.tcc"
				> *DecodeOpAndi_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 67959 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67969 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67973 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 67977 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67981 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67984 "powerpc.tcc"
				)
				{
#line 1229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						uint32_t result = s & uimm;

						// Write back the result
						cpu->SetGPR(ra, result);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 68010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68018 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68022 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68026 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68030 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68033 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68037 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68040 "powerpc.tcc"
				)
				{
#line 1251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andis. r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 68047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68055 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68062 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68075 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68082 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68100 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68107 "powerpc.tcc"
				>::initialize_function()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68112 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68120 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68127 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68132 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68137 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68140 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68147 "powerpc.tcc"
				>::initialize_operands()
				{
#line 340 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 68156 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68165 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68170 "powerpc.tcc"
				> *DecodeOpAndis_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 68176 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68186 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68190 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68194 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68198 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68201 "powerpc.tcc"
				)
				{
#line 1256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						// 	uint32_t result = 0;
						// 	uint32_t m = 1 << 31;
						// 	while(result < 32)
						// 	{
							// 		if(s & m) break;
							// 		m >>= 1;
							// 		result++;
							// 	}

						uint32_t result = CountLeadingZeros(s);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68240 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68248 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68252 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68256 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68260 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68263 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68267 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68270 "powerpc.tcc"
				)
				{
#line 1291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cntlzw" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68277 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68285 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68292 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68297 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68305 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68312 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68330 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68337 "powerpc.tcc"
				>::initialize_function()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68350 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68357 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68370 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68377 "powerpc.tcc"
				>::initialize_operands()
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 68389 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68398 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68403 "powerpc.tcc"
				> *DecodeOpCntlzw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 68409 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68419 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68423 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68427 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68431 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68434 "powerpc.tcc"
				)
				{
#line 1296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s ^ b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68474 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68478 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68482 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68486 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68489 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68493 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68496 "powerpc.tcc"
				)
				{
#line 1324 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "eqv" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 68503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68511 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68518 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68531 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68538 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68548 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68556 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68563 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68573 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68581 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68588 "powerpc.tcc"
				>::initialize_function()
				{
#line 226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68593 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68601 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68608 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68613 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68621 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68628 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68641 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68650 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68655 "powerpc.tcc"
				> *DecodeOpEqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 68661 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68671 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68675 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68679 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68683 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68686 "powerpc.tcc"
				)
				{
#line 1329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = (uint32_t)(int32_t)(int8_t)(uint8_t) s;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68725 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68729 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68733 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68737 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68740 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68744 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68747 "powerpc.tcc"
				)
				{
#line 1356 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsb" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68754 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68762 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68769 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68774 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68782 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68789 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68807 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68814 "powerpc.tcc"
				>::initialize_function()
				{
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68827 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68834 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68847 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68854 "powerpc.tcc"
				>::initialize_operands()
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 68866 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68875 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68880 "powerpc.tcc"
				> *DecodeOpExtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 68886 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68896 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68900 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68904 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68908 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68911 "powerpc.tcc"
				)
				{
#line 1361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = (uint32_t)(int32_t)(int16_t)(uint16_t) s;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68942 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68950 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68954 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68958 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68962 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68965 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68969 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68972 "powerpc.tcc"
				)
				{
#line 1388 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsh" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68979 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68987 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68994 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69007 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69014 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69032 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69039 "powerpc.tcc"
				>::initialize_function()
				{
#line 228 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69044 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69052 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69059 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69064 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69072 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69079 "powerpc.tcc"
				>::initialize_operands()
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 69091 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69100 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69105 "powerpc.tcc"
				> *DecodeOpExtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 69111 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69121 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69125 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69129 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69133 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69136 "powerpc.tcc"
				)
				{
#line 1393 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s & b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69176 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69180 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69184 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69188 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69191 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69195 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69198 "powerpc.tcc"
				)
				{
#line 1421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "nand" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69205 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69213 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69220 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69233 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69240 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69250 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69258 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69265 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69283 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69290 "powerpc.tcc"
				>::initialize_function()
				{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69303 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69310 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69323 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69330 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69343 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69352 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69357 "powerpc.tcc"
				> *DecodeOpNand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNand<
#line 38 "ppc.isa"
					CONFIG
#line 69363 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69373 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69377 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69381 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69385 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69388 "powerpc.tcc"
				)
				{
#line 1426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s | b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69420 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69428 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69432 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69436 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69440 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69443 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69447 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69450 "powerpc.tcc"
				)
				{
#line 1454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "not" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "nor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69460 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69468 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69475 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69488 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69495 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69513 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69520 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69538 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69545 "powerpc.tcc"
				>::initialize_function()
				{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69558 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69565 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69578 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69585 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69598 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69607 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69612 "powerpc.tcc"
				> *DecodeOpNor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNor<
#line 38 "ppc.isa"
					CONFIG
#line 69618 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69628 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69632 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69636 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69640 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69643 "powerpc.tcc"
				)
				{
#line 1462 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s | b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69675 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69683 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69687 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69691 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69695 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69698 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69702 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69705 "powerpc.tcc"
				)
				{
#line 1490 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "mr" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "or" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69723 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69730 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69743 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69750 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69768 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69775 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69793 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69800 "powerpc.tcc"
				>::initialize_function()
				{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69813 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69820 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69833 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69840 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69853 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69862 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69867 "powerpc.tcc"
				> *DecodeOpOr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOr<
#line 38 "ppc.isa"
					CONFIG
#line 69873 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69883 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69887 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69891 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69895 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69898 "powerpc.tcc"
				)
				{
#line 1498 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s | ~b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69938 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69942 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69946 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69950 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69953 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69957 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69960 "powerpc.tcc"
				)
				{
#line 1526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "orc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69967 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69975 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69982 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69987 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69995 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70002 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70012 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70020 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70027 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70045 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70052 "powerpc.tcc"
				>::initialize_function()
				{
#line 232 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70057 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70065 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70072 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70077 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70085 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70092 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 70105 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70114 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70119 "powerpc.tcc"
				> *DecodeOpOrc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 70125 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70135 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70139 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70143 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70147 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70150 "powerpc.tcc"
				)
				{
#line 1531 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s | uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70172 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70176 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70180 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70184 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70187 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70191 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70194 "powerpc.tcc"
				)
				{
#line 1541 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == 0 && ra == 0 && uimm == 0)
						os << "nop";
						else
						os << "ori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 70204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70212 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70219 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70232 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70239 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70257 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70264 "powerpc.tcc"
				>::initialize_function()
				{
#line 233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70269 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70277 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70284 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70289 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70298 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70305 "powerpc.tcc"
				>::initialize_operands()
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70313 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70322 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70327 "powerpc.tcc"
				> *DecodeOpOri(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOri<
#line 38 "ppc.isa"
					CONFIG
#line 70333 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70343 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70347 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70351 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70355 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70358 "powerpc.tcc"
				)
				{
#line 1549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s | uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70372 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70380 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70384 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70388 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70392 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70395 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70399 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70402 "powerpc.tcc"
				)
				{
#line 1559 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "oris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 70409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70417 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70424 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70429 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70437 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70444 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70462 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70469 "powerpc.tcc"
				>::initialize_function()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70474 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70482 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70489 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70494 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70503 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70510 "powerpc.tcc"
				>::initialize_operands()
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70518 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70527 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70532 "powerpc.tcc"
				> *DecodeOpOris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOris<
#line 38 "ppc.isa"
					CONFIG
#line 70538 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70548 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70552 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70556 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70560 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70563 "powerpc.tcc"
				)
				{
#line 1564 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s ^ b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 70595 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70603 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70607 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70611 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70615 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70618 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70622 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70625 "powerpc.tcc"
				)
				{
#line 1592 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 70632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70640 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70647 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70660 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70667 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70685 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70692 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70710 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70717 "powerpc.tcc"
				>::initialize_function()
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70730 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70737 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70742 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70750 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70757 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 70770 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70779 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70784 "powerpc.tcc"
				> *DecodeOpXor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXor<
#line 38 "ppc.isa"
					CONFIG
#line 70790 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70800 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70804 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70808 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70812 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70815 "powerpc.tcc"
				)
				{
#line 1597 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s ^ uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70837 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70841 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70845 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70849 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70852 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70856 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70859 "powerpc.tcc"
				)
				{
#line 1607 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 70866 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70874 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70881 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70886 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70894 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70901 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70911 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70919 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70926 "powerpc.tcc"
				>::initialize_function()
				{
#line 236 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70931 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70939 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70946 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70951 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70960 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70967 "powerpc.tcc"
				>::initialize_operands()
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70975 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70984 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70989 "powerpc.tcc"
				> *DecodeOpXori(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXori<
#line 38 "ppc.isa"
					CONFIG
#line 70995 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71005 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71009 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71013 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71017 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71020 "powerpc.tcc"
				)
				{
#line 1612 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s ^ uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 71034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71042 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71046 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71050 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71054 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71057 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71061 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71064 "powerpc.tcc"
				)
				{
#line 1622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xoris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 71071 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71079 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71086 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71091 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71099 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71106 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71124 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71131 "powerpc.tcc"
				>::initialize_function()
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71144 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71151 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71156 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 71162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71165 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71172 "powerpc.tcc"
				>::initialize_operands()
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 71180 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71189 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71194 "powerpc.tcc"
				> *DecodeOpXoris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 71200 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 71212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71215 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71219 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71223 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71227 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71230 "powerpc.tcc"
				)
				{
#line 1633 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t r = RotateLeft(s, sh);
						uint32_t mask = Mask(mb, me);
						uint32_t result = (r & mask) | (a & ~mask);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71272 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71276 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71280 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71284 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71287 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71291 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71294 "powerpc.tcc"
				)
				{
#line 1663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwimi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 71301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71309 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71316 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71329 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71336 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71346 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71354 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71361 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71371 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71376 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71379 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71386 "powerpc.tcc"
				>::initialize_function()
				{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71399 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71406 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 166 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71411 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71419 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71426 "powerpc.tcc"
				>::initialize_operands()
				{
#line 318 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 71439 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71448 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71453 "powerpc.tcc"
				> *DecodeOpRlwimi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 71459 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71469 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71473 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71477 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71481 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71484 "powerpc.tcc"
				)
				{
#line 1668 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t r = RotateLeft(s, sh);
						uint32_t mask = Mask(mb, me);
						uint32_t result = r & mask;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71517 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71525 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71529 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71533 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71537 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71540 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71544 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71547 "powerpc.tcc"
				)
				{
#line 1697 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwinm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 71554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71562 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71569 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71574 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71582 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71589 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71599 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71607 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71614 "powerpc.tcc"
				>::initialize_function()
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71627 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71634 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 167 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71647 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71654 "powerpc.tcc"
				>::initialize_operands()
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 71666 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71675 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71680 "powerpc.tcc"
				> *DecodeOpRlwinm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 71686 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71696 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71700 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71704 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71708 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71711 "powerpc.tcc"
				)
				{
#line 1702 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t r = RotateLeft(s, b);
						uint32_t mask = Mask(mb, me);
						uint32_t result = r & mask;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71745 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71753 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71757 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71761 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71765 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71768 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71772 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71775 "powerpc.tcc"
				)
				{
#line 1732 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwnm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb << ", " << mb << ", " << me;
					}
#line 71782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71790 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71797 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71810 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71817 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71835 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71842 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71860 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71867 "powerpc.tcc"
				>::initialize_function()
				{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71880 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71887 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 168 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71892 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71900 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71907 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 71920 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71929 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71934 "powerpc.tcc"
				> *DecodeOpRlwnm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 71940 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER SHIFT INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 71952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71955 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71959 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 71963 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71967 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71970 "powerpc.tcc"
				)
				{
#line 1743 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = (b & 0x20) ? 0 : s << (b & 0x1f);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72002 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72010 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72014 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72018 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72022 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72025 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72029 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72032 "powerpc.tcc"
				)
				{
#line 1771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "slw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72039 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72047 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72054 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72059 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72067 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72074 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72084 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72092 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72099 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72117 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72124 "powerpc.tcc"
				>::initialize_function()
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72129 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72137 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72144 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72149 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72157 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72164 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72177 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72186 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72191 "powerpc.tcc"
				> *DecodeOpSlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 72197 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72207 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72211 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72215 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72219 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72222 "powerpc.tcc"
				)
				{
#line 1776 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						int32_t result;

						if(b == 0)
						{
							result = s;
							// Generate XER[CA]: XER[CA]=1
							xer = xer & ~CONFIG::XER_CA_MASK;
						}
						else if(b & 0x20)
						{
							if(s < 0)
							{
								result = 0xffffffff;
								// Generate XER[CA]
								xer = (s & 0x7fffffff) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
							}
							else
							{
								result = 0;
								// Generate XER[CA]: XER[CA]=0
								xer = xer & ~CONFIG::XER_CA_MASK;
							}
						}
						else
						{
							b = b & 0x1f;
							result = (int32_t) s >> b;
							// Generate XER[CA]
							xer = (s < 0 && (s << (32 - b)) != 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						}

						// Write back the result
						cpu->SetGPR(ra, result);

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72292 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72296 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72300 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72304 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72307 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72311 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72314 "powerpc.tcc"
				)
				{
#line 1834 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "sraw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72329 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72336 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72349 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72356 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72374 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72381 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72399 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72406 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72423 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72430 "powerpc.tcc"
				>::initialize_function()
				{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72443 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72450 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72463 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72470 "powerpc.tcc"
				>::initialize_operands()
				{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72484 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72493 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72498 "powerpc.tcc"
				> *DecodeOpSraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 72504 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72514 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72518 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72522 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72526 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72529 "powerpc.tcc"
				)
				{
#line 1839 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						int32_t result;

						if(sh == 0)
						{
							result = s;
							// Generate XER[CA]: XER[CA]=0
							xer = xer & ~CONFIG::XER_CA_MASK;
						}
						else
						{
							result = s >> sh;
							// Generate XER[CA]
							xer = (s < 0 && (s << (32 - sh)) != 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72574 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72582 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72586 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72590 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72594 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72597 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72601 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72604 "powerpc.tcc"
				)
				{
#line 1880 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srawi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh;
					}
#line 72611 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72619 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72626 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72631 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72639 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72646 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72664 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72671 "powerpc.tcc"
				>::initialize_function()
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72684 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72691 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72704 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72711 "powerpc.tcc"
				>::initialize_operands()
				{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 72724 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72733 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72738 "powerpc.tcc"
				> *DecodeOpSrawi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 72744 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72754 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72758 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72762 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72766 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72769 "powerpc.tcc"
				)
				{
#line 1885 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						unsigned int sh = b & 0x3f;
						uint32_t result = (sh & 0x20) ? 0 : s >> (sh & 0x1f);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72810 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72814 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72818 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72822 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72825 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72829 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72832 "powerpc.tcc"
				)
				{
#line 1914 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72847 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72854 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72859 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72867 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72874 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72892 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72899 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72909 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72917 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72924 "powerpc.tcc"
				>::initialize_function()
				{
#line 244 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72937 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72944 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72957 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72964 "powerpc.tcc"
				>::initialize_operands()
				{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72977 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72986 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72991 "powerpc.tcc"
				> *DecodeOpSrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 72997 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************************************

				FLOATING-POINT ARITHMETIC INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 73042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73045 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73049 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73053 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73057 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73060 "powerpc.tcc"
				)
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.plusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73122 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73126 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73130 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73134 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73137 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73141 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73144 "powerpc.tcc"
				)
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73159 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73166 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73171 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73179 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73186 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73204 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73211 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73221 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73229 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73236 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73246 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73254 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73261 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73270 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73278 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73285 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73297 "powerpc.tcc"
				}
				/** Floating (FnFpCommon |FnFpFPSCR | FnFpFPSCRSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 73303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73306 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73313 "powerpc.tcc"
				>::initialize_function()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 73318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73326 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73333 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73346 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73353 "powerpc.tcc"
				>::initialize_operands()
				{
#line 522 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 73368 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73377 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73382 "powerpc.tcc"
				> *DecodeOpFadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 73388 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73398 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73402 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73406 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73410 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73413 "powerpc.tcc"
				)
				{
#line 310 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.plusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73469 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73477 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73481 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73485 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73489 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73492 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73496 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73499 "powerpc.tcc"
				)
				{
#line 362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73514 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73521 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73534 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73541 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73551 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73559 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73566 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73584 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73591 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73609 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73616 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73625 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73630 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73633 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73640 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73660 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73667 "powerpc.tcc"
				>::initialize_function()
				{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 73672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73680 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73687 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73692 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73700 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73707 "powerpc.tcc"
				>::initialize_operands()
				{
#line 522 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 73722 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73731 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73736 "powerpc.tcc"
				> *DecodeOpFadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 73742 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73752 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73756 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73760 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73764 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73767 "powerpc.tcc"
				)
				{
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.divAssign(b, flags);

						// Generate OX, UX, ZX, VXSNAN, VXIDI, VXZDZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_ZX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIDI<CONFIG>(fpscr, flags);
						GenFPSCR_VXZDZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73823 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73831 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73835 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73839 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73843 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73846 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73850 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73853 "powerpc.tcc"
				)
				{
#line 419 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdiv" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73868 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73875 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73888 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73895 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73913 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73920 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73938 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73945 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73963 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73970 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73979 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73987 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73994 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74014 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74021 "powerpc.tcc"
				>::initialize_function()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74034 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74041 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(31); }
#line 74046 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74054 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74061 "powerpc.tcc"
				>::initialize_operands()
				{
#line 522 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74076 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74085 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74090 "powerpc.tcc"
				> *DecodeOpFdiv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 74096 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74106 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74110 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74114 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74118 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74121 "powerpc.tcc"
				)
				{
#line 424 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.divAssign(b, flags);

						// Generate OX, UX, ZX, VXSNAN, VXIDI, VXZDZ, FR, FI, FPRF, XX, FX, VX, FEX
						uint32_t old_fpscr = fpscr;
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_ZX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIDI<CONFIG>(fpscr, flags);
						GenFPSCR_VXZDZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74178 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74186 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74190 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74194 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74198 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74201 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74205 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74208 "powerpc.tcc"
				)
				{
#line 477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdivs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 74215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74223 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74230 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74240 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74248 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74255 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74265 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74273 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74280 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74290 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74298 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74305 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74322 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74329 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74349 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74356 "powerpc.tcc"
				>::initialize_function()
				{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74361 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74369 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74376 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 89 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(17); }
#line 74381 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74386 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74389 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74396 "powerpc.tcc"
				>::initialize_operands()
				{
#line 522 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74411 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74420 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74425 "powerpc.tcc"
				> *DecodeOpFdivs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 74431 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74441 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74445 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74449 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74453 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74456 "powerpc.tcc"
				)
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAssign(c, flags);

						// Generate OX, UX, VXSNAN, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74518 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74522 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74526 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74530 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74533 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74537 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74540 "powerpc.tcc"
				)
				{
#line 532 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmul" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 74547 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74555 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74562 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 74567 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74575 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74582 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74600 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74607 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74617 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74622 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74625 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74632 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74642 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74650 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74657 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74666 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74674 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74681 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74693 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74701 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74708 "powerpc.tcc"
				>::initialize_function()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74721 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74728 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 74733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74741 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74748 "powerpc.tcc"
				>::initialize_operands()
				{
#line 535 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74763 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74772 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74777 "powerpc.tcc"
				> *DecodeOpFmul(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 74783 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74793 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74797 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74801 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74805 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74808 "powerpc.tcc"
				)
				{
#line 537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAssign(c, flags);

						// Generate OX, UX, VXSNAN, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74872 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74876 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74880 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74884 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74887 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74891 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74894 "powerpc.tcc"
				)
				{
#line 589 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmuls" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 74901 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74909 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74916 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 74921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74929 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74936 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74946 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74954 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74961 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74971 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74979 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74986 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75004 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75011 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75020 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75028 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75035 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75055 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75062 "powerpc.tcc"
				>::initialize_function()
				{
#line 258 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75075 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75082 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 75087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75095 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75102 "powerpc.tcc"
				>::initialize_operands()
				{
#line 535 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75117 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75126 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75131 "powerpc.tcc"
				> *DecodeOpFmuls(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 75137 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75147 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75151 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75155 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75159 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75162 "powerpc.tcc"
				)
				{
#line 594 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode(RN_NEAREST);
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						if(unlikely(b.isSNaN()))
						{
							// b = SNaN
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Write back result
								SoftFloat result(b.queryValue() | 0x400000UL);// QNaN (b with high order bit of mantissa set)
								cpu->SetFPR(fd, SoftDouble(result, flags));
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							}
							// Generate VXSNAN
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
						else if(unlikely(b.isQNaN()))
						{
							// b = QNaN
							// Write back result
							cpu->SetFPR(fd, SoftDouble(b, flags)); // QNaN (b)
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(b.isZero()))
						{
							// Generate ZX
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

							if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
							{
								if(b.isNegative())
								{
									// b = -0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
								else
								{
									// b = +0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
							}
						}
						else if(unlikely(b.isInfty()))
						{
							if(b.isNegative())
							{
								// b = -infinity
								cpu->SetFPR(fd, SoftDouble(0x8000000000000000ULL)); // -0
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							}
							else
							{
								// b = +infinity
								cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							}
						}
						else
						{
							SoftFloat result(0x3f800000ULL); // 1.0

							// Compute the result
							result.divAssign(b, flags);

							// Generate OX, UX, ZX, VXSNAN, FR, FI, FPRF
							GenFPSCR_OX<CONFIG>(fpscr, flags);
							GenFPSCR_UX<CONFIG>(fpscr, flags);
							GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);

							// Write back the result
							cpu->SetFPR(fd, SoftDouble(result, flags));
						}

						// Generate XX, FX, VX, FEX
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 75283 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75288 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75291 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 75295 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75299 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 75303 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 75306 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 75310 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 75313 "powerpc.tcc"
				)
				{
#line 711 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fres" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 75320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75328 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75335 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 75340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75348 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75355 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75373 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75380 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75398 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75405 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75414 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75422 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75429 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75449 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75456 "powerpc.tcc"
				>::initialize_function()
				{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75469 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75476 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(10); }
#line 75481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75489 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75496 "powerpc.tcc"
				>::initialize_operands()
				{
#line 548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75510 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75519 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75524 "powerpc.tcc"
				> *DecodeOpFres(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFres<
#line 38 "ppc.isa"
					CONFIG
#line 75530 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75540 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75544 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75548 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75552 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75555 "powerpc.tcc"
				)
				{
#line 716 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode(RN_NEAREST);
						const SoftDouble& b = cpu->GetFPR(fb);

						if(unlikely(b.isSNaN()))
						{
							// b = SNaN
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
								// Write back result
								cpu->SetFPR(fd, SoftDouble(b.queryValue() | 0x0008000000000000ULL)); // QNaN (b with high order bit of mantissa set)
							}
							// Generate VXSNAN
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
						else if(unlikely(b.isQNaN()))
						{
							// b = QNaN
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							// Write back result
							cpu->SetFPR(fd, b); // QNaN (b)
						}
						else if(unlikely(b.isZero()))
						{
							// Generate ZX
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

							if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
							{
								if(b.isNegative())
								{
									// b = -0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
								else
								{
									// b = +0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
							}
						}
						else if(unlikely(b.isNegative()))
						{
							// -infinity <= b < 0
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Write back result
								cpu->SetFPR(fd, SoftDouble(0x7ff8000000000000ULL)); // Positive QNaN
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							}
							// Generate VXSQRT
							fpscr = fpscr | CONFIG::FPSCR_VXSQRT_MASK;
						}
						else if(unlikely(b.isInfty()))
						{
							// b = +infinity
							cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else
						{
							// 0 < b < infinity

							// First estimation of 1/sqrt(b), seed of Newton-Raphson algorithm
							// see http://www.mceniry.net/papers/Fast%20Inverse%20Square%20Root.pdf
							SoftDouble u((0xbfcdd6a18f6a6f55ULL - b.queryValue()) >> 1);

							// Newton-Raphson method
							SoftDouble half(0x3fe0000000000000ULL); // 0.5
							SoftDouble three(0x4008000000000000ULL); // 3.0

							unsigned int i;
							for(i = 0; i < 5; i++)
							{
								// Newton-Raphson iteration
								// w = b * u * u
								SoftDouble w(b);
								w.multAssign(u, flags);
								w.multAssign(u, flags);
								// v = 3.0 - w
								SoftDouble v(three);
								v.minusAssign(w, flags);
								// u = 0.5 * u * v
								u.multAssign(half, flags);
								u.multAssign(v, flags);
							}

							// Write back result
							cpu->SetFPR(fd, u);

							// Generate ZX, VXSNAN, FR, FI, FPRF
							GenFPSCR_ZX<CONFIG>(fpscr, flags);
							GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
							GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, u);
						}

						// Generate XX, FX, VX, FEX
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 75698 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75706 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 75710 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75714 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 75718 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 75721 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 75725 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 75728 "powerpc.tcc"
				)
				{
#line 855 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsqrte" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 75735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75743 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75750 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 75755 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75763 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75770 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75788 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75795 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75813 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75820 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75837 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75844 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75856 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75864 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75871 "powerpc.tcc"
				>::initialize_function()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75876 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75884 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75891 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 75896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75904 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75911 "powerpc.tcc"
				>::initialize_operands()
				{
#line 548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75925 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75934 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75939 "powerpc.tcc"
				> *DecodeOpFrsqrte(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 75945 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75955 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75959 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 75963 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75967 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75970 "powerpc.tcc"
				)
				{
#line 860 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.minusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 76024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76032 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76036 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76040 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76044 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76047 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76051 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76054 "powerpc.tcc"
				)
				{
#line 910 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 76061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76069 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76076 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76081 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76089 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76096 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76106 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76114 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76121 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76131 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76139 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76146 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76164 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76171 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76180 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76188 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76195 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76207 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76215 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76222 "powerpc.tcc"
				>::initialize_function()
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76235 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76242 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76247 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76255 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76262 "powerpc.tcc"
				>::initialize_operands()
				{
#line 522 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 76277 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76286 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76291 "powerpc.tcc"
				> *DecodeOpFsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 76297 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76307 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76311 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76315 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 76319 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 76322 "powerpc.tcc"
				)
				{
#line 915 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.minusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));

					}
#line 76379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76387 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76391 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76395 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76399 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76402 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76406 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76409 "powerpc.tcc"
				)
				{
#line 968 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 76416 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76424 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76431 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76436 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76444 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76451 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76469 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76476 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76494 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76501 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76511 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76519 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76526 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76535 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76543 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76550 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76570 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76577 "powerpc.tcc"
				>::initialize_function()
				{
#line 262 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76590 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76597 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76602 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76610 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76617 "powerpc.tcc"
				>::initialize_operands()
				{
#line 522 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 76632 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76641 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76646 "powerpc.tcc"
				> *DecodeOpFsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 76652 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76662 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76666 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76670 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 76674 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 76677 "powerpc.tcc"
				)
				{
#line 973 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute and write the result
						cpu->SetFPR(fd, ((!a.isZero() && a.isNegative()) || a.isNaN()) ? b : c);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 76701 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76709 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76713 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76717 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76721 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76724 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76728 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76731 "powerpc.tcc"
				)
				{
#line 993 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsel" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 76738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76746 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76753 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76758 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76766 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76773 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76783 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76791 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76798 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76808 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76813 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76816 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76823 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76833 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76841 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76848 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76858 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76866 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76873 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76882 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76890 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76897 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76909 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76917 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76924 "powerpc.tcc"
				>::initialize_function()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76937 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76944 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76957 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76964 "powerpc.tcc"
				>::initialize_operands()
				{
#line 574 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 76978 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76987 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76992 "powerpc.tcc"
				> *DecodeOpFsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 76998 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77008 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77012 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77016 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77020 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77023 "powerpc.tcc"
				)
				{
#line 998 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 77031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77039 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77043 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77047 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77051 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77054 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77058 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77061 "powerpc.tcc"
				)
				{
#line 1002 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrt" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 77068 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77076 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77083 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77088 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77096 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77103 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77113 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77121 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77128 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77138 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77146 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77153 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77162 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77170 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77177 "powerpc.tcc"
				>::initialize_function()
				{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77190 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77197 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 77202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77210 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77217 "powerpc.tcc"
				>::initialize_operands()
				{
#line 548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77231 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77240 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77245 "powerpc.tcc"
				> *DecodeOpFsqrt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 77251 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77261 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77265 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77269 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77273 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77276 "powerpc.tcc"
				)
				{
#line 1007 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 77284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77292 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77296 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77300 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77304 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77307 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77311 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77314 "powerpc.tcc"
				)
				{
#line 1011 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrts" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 77321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77329 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77336 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77349 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77356 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77374 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77381 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77399 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77406 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77423 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77430 "powerpc.tcc"
				>::initialize_function()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77443 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77450 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 114 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 77455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77463 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77470 "powerpc.tcc"
				>::initialize_operands()
				{
#line 548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77484 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77493 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77498 "powerpc.tcc"
				> *DecodeOpFsqrts(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 77504 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************************

				FLOATING POINT MULTIPLY-ADD INSTRUCTIONS

				******************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 77516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77519 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77523 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77527 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77531 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77534 "powerpc.tcc"
				)
				{
#line 1022 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 77590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77598 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77602 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77606 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77610 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77613 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77617 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77620 "powerpc.tcc"
				)
				{
#line 1074 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 77627 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77635 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77642 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77647 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77655 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77662 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77680 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77687 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77705 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77712 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77730 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77737 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77755 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77762 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77779 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77786 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 77798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77806 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77813 "powerpc.tcc"
				>::initialize_function()
				{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77826 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77833 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 77838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77846 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77853 "powerpc.tcc"
				>::initialize_operands()
				{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77869 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77878 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77883 "powerpc.tcc"
				> *DecodeOpFmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 77889 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77899 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77903 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 77907 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77911 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77914 "powerpc.tcc"
				)
				{
#line 1079 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 77973 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77981 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77985 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 77989 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77993 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77996 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78000 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78003 "powerpc.tcc"
				)
				{
#line 1134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78018 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78025 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78030 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78038 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78045 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78063 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78070 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78080 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78088 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78095 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78105 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78113 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78120 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78130 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78138 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78145 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78154 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78162 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78169 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78181 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78189 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78196 "powerpc.tcc"
				>::initialize_function()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78209 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78216 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78221 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78229 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78236 "powerpc.tcc"
				>::initialize_operands()
				{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 78252 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78261 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78266 "powerpc.tcc"
				> *DecodeOpFmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 78272 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78282 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 78286 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78290 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 78294 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 78297 "powerpc.tcc"
				)
				{
#line 1139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 78353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78361 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 78365 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78369 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 78373 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 78376 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78380 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78383 "powerpc.tcc"
				)
				{
#line 1191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78398 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78405 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78418 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78425 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78443 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78450 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78460 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78468 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78475 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78485 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78493 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78500 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78518 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78525 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78542 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78549 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78569 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78576 "powerpc.tcc"
				>::initialize_function()
				{
#line 268 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78589 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78596 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 78601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78609 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78616 "powerpc.tcc"
				>::initialize_operands()
				{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 78632 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78641 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78646 "powerpc.tcc"
				> *DecodeOpFmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 78652 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78662 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 78666 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78670 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 78674 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 78677 "powerpc.tcc"
				)
				{
#line 1196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 78736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78744 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 78748 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78752 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 78756 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 78759 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78763 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78766 "powerpc.tcc"
				)
				{
#line 1251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78781 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78788 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78801 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78808 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78826 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78833 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78851 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78858 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78868 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78876 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78883 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78893 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78901 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78908 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78925 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78932 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78944 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78952 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78959 "powerpc.tcc"
				>::initialize_function()
				{
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78964 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78972 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78979 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78984 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78992 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78999 "powerpc.tcc"
				>::initialize_operands()
				{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79015 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79024 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79029 "powerpc.tcc"
				> *DecodeOpFmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 79035 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79045 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79049 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79053 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79057 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79060 "powerpc.tcc"
				)
				{
#line 1256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79119 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79127 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79131 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79135 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79139 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79142 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79146 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79149 "powerpc.tcc"
				)
				{
#line 1311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79164 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79171 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79184 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79191 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79209 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79216 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79226 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79234 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79241 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79259 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79266 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79276 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79281 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79284 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79291 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79300 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79308 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79315 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 79327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79335 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79342 "powerpc.tcc"
				>::initialize_function()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 79347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79355 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79362 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 79367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79375 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79382 "powerpc.tcc"
				>::initialize_operands()
				{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79398 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79407 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79412 "powerpc.tcc"
				> *DecodeOpFnmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 79418 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79428 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79432 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79436 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79440 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79443 "powerpc.tcc"
				)
				{
#line 1316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79513 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79517 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79521 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79525 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79528 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79532 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79535 "powerpc.tcc"
				)
				{
#line 1374 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79550 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79557 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79570 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79577 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79587 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79595 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79602 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79620 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79627 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79637 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79645 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79652 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79670 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79677 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79686 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79694 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79701 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 79713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79721 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79728 "powerpc.tcc"
				>::initialize_function()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 79733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79741 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79748 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 79753 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79761 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79768 "powerpc.tcc"
				>::initialize_operands()
				{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79784 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79793 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79798 "powerpc.tcc"
				> *DecodeOpFnmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 79804 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79814 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79818 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79822 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79826 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79829 "powerpc.tcc"
				)
				{
#line 1379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79888 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79896 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79900 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79904 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79908 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79911 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79915 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79918 "powerpc.tcc"
				)
				{
#line 1434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79925 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79933 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79940 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79945 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79953 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79960 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79970 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79978 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79985 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79995 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80003 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80010 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80020 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80028 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80035 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80053 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80060 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80069 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80077 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80084 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 80096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80104 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80111 "powerpc.tcc"
				>::initialize_function()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80124 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80131 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 80136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80144 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80151 "powerpc.tcc"
				>::initialize_operands()
				{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 80167 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80176 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80181 "powerpc.tcc"
				> *DecodeOpFnmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 80187 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80197 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80201 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80205 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80209 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80212 "powerpc.tcc"
				)
				{
#line 1439 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 80273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80281 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80285 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80289 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 80293 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 80296 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 80300 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 80303 "powerpc.tcc"
				)
				{
#line 1496 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 80310 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80318 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80325 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 80330 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80338 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80345 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80363 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80370 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80388 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80395 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80413 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80420 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80438 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80445 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80462 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80469 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 80481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80489 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80496 "powerpc.tcc"
				>::initialize_function()
				{
#line 273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80501 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80509 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80516 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80521 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80529 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80536 "powerpc.tcc"
				>::initialize_operands()
				{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 80552 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80561 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80566 "powerpc.tcc"
				> *DecodeOpFnmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 80572 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT COMPARE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 80584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80587 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80591 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80595 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80599 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80602 "powerpc.tcc"
				)
				{
#line 1507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Do the floating point comparison
						uint32_t c;
						switch(a.compare(b))
						{
							case SoftDouble::CRNaN: c = 1; break;
							case SoftDouble::CRLess: c = 8; break;
							case SoftDouble::CREqual: c = 2; break;
							case SoftDouble::CRGreater: c = 4; break;
						default:
							throw "Internal error";
						}

						// Generate FPCC
						fpscr = (fpscr & ~CONFIG::FPSCR_FPCC_MASK) | ((c << CONFIG::FPSCR_FPCC_OFFSET) & CONFIG::FPSCR_FPCC_MASK);

						// Generate VXSNAN and VXVC
						if(unlikely(a.isSNaN() || b.isSNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								fpscr = fpscr | CONFIG::FPSCR_VXVC_MASK;
							}
						}
						if(unlikely(a.isQNaN() || b.isQNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXVC_MASK;
						}

						// Generate FX, VX, FEX
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// CR[crfD] <- c
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << ((7 - crfD) * 4)));
					}
#line 80669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80677 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80681 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80685 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 80689 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 80692 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 80696 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 80699 "powerpc.tcc"
				)
				{
#line 1570 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpo cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 80706 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80714 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80721 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 80726 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80734 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80741 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80759 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80766 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80776 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80784 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80791 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80800 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80808 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80815 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 468 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80832 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80839 "powerpc.tcc"
				>::initialize_function()
				{
#line 274 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80852 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80859 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80872 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80879 "powerpc.tcc"
				>::initialize_operands()
				{
#line 760 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 80892 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80901 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80906 "powerpc.tcc"
				> *DecodeOpFcmpo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 80912 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80922 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80926 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 80930 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80934 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80937 "powerpc.tcc"
				)
				{
#line 1575 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Do the floating point comparison
						uint32_t c;
						switch(a.compare(b))
						{
							case SoftDouble::CRNaN: c = 1; break;
							case SoftDouble::CRLess: c = 8; break;
							case SoftDouble::CREqual: c = 2; break;
							case SoftDouble::CRGreater: c = 4; break;
						default:
							throw "Internal error";
						}

						// Generate FPCC
						fpscr = (fpscr & ~CONFIG::FPSCR_FPCC_MASK) | ((c << CONFIG::FPSCR_FPCC_OFFSET) & CONFIG::FPSCR_FPCC_MASK);

						// Generate VXSNAN
						if(unlikely(a.isSNaN() || b.isSNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}

						// Generate FX, VX, FEX
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// CR[crfD] <- c
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << ((7 - crfD) * 4)));
					}
#line 80996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81004 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81008 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81012 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81016 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81019 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81023 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81026 "powerpc.tcc"
				)
				{
#line 1630 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpu cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 81033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81041 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81048 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81053 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81061 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81068 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81078 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81086 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81093 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81111 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81118 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81127 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81135 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81142 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 468 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81159 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81166 "powerpc.tcc"
				>::initialize_function()
				{
#line 275 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81171 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81179 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81186 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81191 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81199 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81206 "powerpc.tcc"
				>::initialize_operands()
				{
#line 760 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 81219 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81228 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81233 "powerpc.tcc"
				> *DecodeOpFcmpu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 81239 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT ROUNDING-CONVERTING INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 81251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81254 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81258 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81262 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81266 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81269 "powerpc.tcc"
				)
				{
#line 1641 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble b = cpu->GetFPR(fb);

						// Compute the result
						SoftDouble::IntConversion icResult;
						uint32_t result32;
						uint64_t result64;
						flags.clearKeepSignalingConversion();
						b.retrieveInteger(icResult.setSigned(), flags);
						flags.setKeepSignalingConversion();
						result32 = (uint32_t) icResult.queryInt();
						result64 = 0xfff8000000000000ULL | result32;
						if(result32 == 0 && b.isNegative())
						result64 |= 0x0000000100000000ULL;

						SoftDouble result(result64);

						// Generate VXSNAN, VXCVI, FR, FI, XX, FX, VX, FEX
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXCVI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, b, flags);
						if(!flags.isOverflow()) GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception if FPSCR[FEX] is set
							throw FloatingPointException<CONFIG>();
						}

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81346 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81350 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81354 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81358 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81361 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81365 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81368 "powerpc.tcc"
				)
				{
#line 1706 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiw" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 81375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81383 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81390 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81395 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81403 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81410 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81420 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81428 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81435 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81445 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81453 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81460 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81469 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81477 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81484 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 81496 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81504 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81511 "powerpc.tcc"
				>::initialize_function()
				{
#line 276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81524 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81531 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81544 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81551 "powerpc.tcc"
				>::initialize_operands()
				{
#line 592 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 81565 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81574 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81579 "powerpc.tcc"
				> *DecodeOpFctiw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 81585 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81595 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81599 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81603 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81607 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81610 "powerpc.tcc"
				)
				{
#line 1712 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						SoftDouble b = cpu->GetFPR(fb);

						// Compute the result
						SoftDouble::IntConversion icResult;
						uint32_t result32;
						uint64_t result64;
						flags.setRoundingMode(RN_ZERO);
						flags.clearKeepSignalingConversion();
						b.retrieveInteger(icResult.setSigned(), flags);
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						flags.setKeepSignalingConversion();
						result32 = (uint32_t) icResult.queryInt();
						result64 = 0xfff8000000000000ULL | result32;
						if(result32 == 0 && b.isNegative())
						result64 |= 0x0000000100000000ULL;

						SoftDouble result(result64);

						// Generate VXSNAN, VXCVI, FR, FI, XX, FX, VX, FEX
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXCVI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, b, flags);
						if(!flags.isOverflow()) GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception if FPSCR[FEX] is set
							throw FloatingPointException<CONFIG>();
						}

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81688 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81692 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81696 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81700 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81703 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81707 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81710 "powerpc.tcc"
				)
				{
#line 1778 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiwz" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 81717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81725 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81732 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81737 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81745 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81752 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81762 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81770 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81777 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81787 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81795 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81802 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81811 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81819 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81826 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 81838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81846 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81853 "powerpc.tcc"
				>::initialize_function()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81858 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81866 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81873 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81878 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81886 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81893 "powerpc.tcc"
				>::initialize_operands()
				{
#line 592 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 81907 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81916 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81921 "powerpc.tcc"
				> *DecodeOpFctiwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 81927 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81937 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81941 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 81945 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81949 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81952 "powerpc.tcc"
				)
				{
#line 1783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						flags.clearKeepSignalingConversion();
						flags.setUpApproximateInfty();
						SoftFloat result(b, flags);
						flags.clearUpApproximateInfty();
						flags.setKeepSignalingConversion();

						// Generate OX, UX, VXSNAN, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82016 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82020 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82024 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82028 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82031 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82035 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82038 "powerpc.tcc"
				)
				{
#line 1835 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsp" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82053 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82060 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82073 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82080 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82090 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82098 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82105 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82115 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82120 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82123 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82130 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82147 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82154 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82166 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82174 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82181 "powerpc.tcc"
				>::initialize_function()
				{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82194 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82201 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82206 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82214 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82221 "powerpc.tcc"
				>::initialize_operands()
				{
#line 592 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82235 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82244 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82249 "powerpc.tcc"
				> *DecodeOpFrsp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 82255 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT MOVE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 82267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82270 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82274 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82278 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82282 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82285 "powerpc.tcc"
				)
				{
#line 1846 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fd);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result = b;
						if(result.isNegative())
						{
							result.opposite();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82323 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82327 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82331 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82335 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82338 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82342 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82345 "powerpc.tcc"
				)
				{
#line 1872 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82360 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82367 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82372 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82380 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82387 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82405 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82412 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82430 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82437 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82454 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82461 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82473 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82481 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82488 "powerpc.tcc"
				>::initialize_function()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82493 "powerpc.tcc"
				}
				/** Floating **/
				template <
#line 38 "ppc.isa"
				class
#line 82499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82502 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82509 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82514 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82522 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82529 "powerpc.tcc"
				>::initialize_operands()
				{
#line 604 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82541 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82550 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82555 "powerpc.tcc"
				> *DecodeOpFabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 82561 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82571 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82575 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82579 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82583 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82586 "powerpc.tcc"
				)
				{
#line 1877 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						cpu->SetFPR(fd, cpu->GetFPR(fb));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82613 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82617 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82621 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82625 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82628 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82632 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82635 "powerpc.tcc"
				)
				{
#line 1892 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmr" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82642 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82650 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82657 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82670 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82677 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82695 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82702 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82712 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82720 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82727 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82744 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82751 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82763 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82771 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82778 "powerpc.tcc"
				>::initialize_function()
				{
#line 280 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82783 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82791 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82798 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82811 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82818 "powerpc.tcc"
				>::initialize_operands()
				{
#line 604 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82830 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82839 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82844 "powerpc.tcc"
				> *DecodeOpFmr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 82850 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82860 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82864 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82868 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82872 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82875 "powerpc.tcc"
				)
				{
#line 1897 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fd);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result = b;
						if(result.isPositive())
						{
							result.opposite();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82913 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82917 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82921 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82925 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82928 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82932 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82935 "powerpc.tcc"
				)
				{
#line 1923 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82942 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82950 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82957 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82962 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82970 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82977 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82987 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82995 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83002 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83012 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83020 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83027 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83036 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83041 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83044 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83051 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83063 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83071 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83078 "powerpc.tcc"
				>::initialize_function()
				{
#line 281 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 83083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83091 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83098 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83111 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83118 "powerpc.tcc"
				>::initialize_operands()
				{
#line 604 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 83130 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83139 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83144 "powerpc.tcc"
				> *DecodeOpFnabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 83150 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83160 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83164 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83168 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83172 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83175 "powerpc.tcc"
				)
				{
#line 1928 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fb);

						// Compute the result
						result.opposite();

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83200 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83208 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83212 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83216 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83220 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83223 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83227 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83230 "powerpc.tcc"
				)
				{
#line 1949 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fneg" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 83237 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83245 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83252 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83257 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83265 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83272 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83290 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83297 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83307 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83315 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83322 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83331 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83336 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83339 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83346 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83358 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83363 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83366 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83373 "powerpc.tcc"
				>::initialize_function()
				{
#line 282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 83378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83386 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83393 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83398 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83406 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83413 "powerpc.tcc"
				>::initialize_operands()
				{
#line 604 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 83425 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83434 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83439 "powerpc.tcc"
				> *DecodeOpFneg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 83445 "powerpc.tcc"
					>(code, addr);
				}

				/*****************************************************************

				FLOATING-POINT STATUS & CONTROL REGISTER INSTRUCTIONS

				*****************************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 83457 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83460 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83464 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83468 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83472 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83475 "powerpc.tcc"
				)
				{
#line 1960 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();

						// Extract FPSCR source 4-bit field
						uint32_t c = (fpscr >> (4 * (7 - crfS))) & 0xf;
						// Copy it into CR 4-bit destination field
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << (4 * (7 - crfS))));
						if(unlikely(crfS == 0))
						cpu->SetFPSCR(fpscr & 0x9fffffffUL); // Don't clear FEX and VX bits
						else
						cpu->SetFPSCR(fpscr & ~(0xffUL << (4 * (7 - crfS)))); // clear bit field
					}
#line 83499 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83507 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83511 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83515 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83519 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83522 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83526 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83529 "powerpc.tcc"
				)
				{
#line 1980 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mcrfs cr" << crfD << ", cr" << crfS;
					}
#line 83536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83544 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83551 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83564 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83571 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 83578 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83586 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83593 "powerpc.tcc"
				>::initialize_function()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 83598 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83606 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83613 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83618 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83626 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83633 "powerpc.tcc"
				>::initialize_operands()
				{
#line 807 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(FPSCRF_T, crfS);
						OUTPUT(CR_T, crfD);
						//  INPUT(FPSCR_T, crfS);
						INPUT(FPSCR_T, 0);
					}
#line 83644 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83653 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83658 "powerpc.tcc"
				> *DecodeOpMcrfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 83664 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83674 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83678 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83682 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83686 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83689 "powerpc.tcc"
				)
				{
#line 1985 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Move FPSCR into destination FPR
						uint32_t fpscr = cpu->GetFPSCR();
						uint64_t _f;
						_f = (uint64_t) fpscr | 0xfff8000000000000ULL;
						cpu->SetFPR(fd, SoftDouble(_f));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83710 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83718 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83722 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83726 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83730 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83733 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83737 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83740 "powerpc.tcc"
				)
				{
#line 2002 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mffs" << (rc ? "." : "") << " f" << fd;
					}
#line 83747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83755 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83762 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83775 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83782 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 83789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83797 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83804 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83822 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83829 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83846 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83853 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83865 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83873 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83880 "powerpc.tcc"
				>::initialize_function()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 83885 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83893 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83900 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83913 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83920 "powerpc.tcc"
				>::initialize_operands()
				{
#line 664 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T,0);
						OUTPUT(FPR_T, fd);
						if (rc)
						{
							OUTPUT(CR_T,1);
						}
					}
#line 83932 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83941 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83946 "powerpc.tcc"
				> *DecodeOpMffs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 83952 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83962 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83966 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 83970 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83974 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83977 "powerpc.tcc"
				)
				{
#line 2007 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						if(likely(crbD != 1 && crbD != 2))
						{
							fpscr = fpscr & (~(1 << (31 - crbD)));
						}

						// Generate VX, FEX
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						cpu->SetFPSCR(fpscr);


						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84014 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84018 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84022 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84026 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84029 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84033 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84036 "powerpc.tcc"
				)
				{
#line 2032 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb0" << (rc ? "." : "") << " crb" << crbD;
					}
#line 84043 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84051 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84058 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84063 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84071 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84078 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84093 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84100 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84112 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84120 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84127 "powerpc.tcc"
				>::initialize_function()
				{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84132 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84137 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84140 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84147 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84152 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84160 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84167 "powerpc.tcc"
				>::initialize_operands()
				{
#line 853 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 84180 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84189 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84194 "powerpc.tcc"
				> *DecodeOpMtfsb0(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 84200 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84210 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84214 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84218 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84222 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84225 "powerpc.tcc"
				)
				{
#line 2037 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						if(likely(crbD != 1 && crbD != 2))
						{
							fpscr = fpscr | (1 << (31 - crbD));
							cpu->SetFPSCR(fpscr);
						}
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84247 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84255 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84259 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84263 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84267 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84270 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84274 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84277 "powerpc.tcc"
				)
				{
#line 2055 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb1" << (rc ? "." : "") << " cr" << crbD;
					}
#line 84284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84292 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84299 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84304 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84312 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84319 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84334 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84341 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84361 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84368 "powerpc.tcc"
				>::initialize_function()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84373 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84381 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84388 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84393 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84401 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84408 "powerpc.tcc"
				>::initialize_operands()
				{
#line 853 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 84421 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84430 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84435 "powerpc.tcc"
				> *DecodeOpMtfsb1(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 84441 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84451 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84455 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84459 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84463 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84466 "powerpc.tcc"
				)
				{
#line 2060 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t _m, fpscr, _fm, _rb,_c;
						int _i;
						_rb = cpu->GetFPR(fb).queryValue();
						fpscr = cpu->GetFPSCR();
						_fm = fm;

						if(_fm & 0x80)
						{
							_m = 0x60000000;
						}
						else
						{
							_m=0x0;
						}
						_c=0x1;
						for(_i=0;_i< 8;_i++)
						{
							if(_c & _fm)
							{
								_m= _m | (0xf<<(_i*4));
							}
							_c=_c<<1;
						}
						fpscr = _rb & _m;
						cpu->SetFPSCR(fpscr);
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84514 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84518 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84522 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84526 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84529 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84533 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84536 "powerpc.tcc"
				)
				{
#line 2096 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsf" << (rc ? "." : "") << " " << fm << ", f" << fb;
					}
#line 84543 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84551 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84558 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84563 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84571 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84578 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84585 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84593 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84600 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 84610 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84618 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84625 "powerpc.tcc"
				>::initialize_function()
				{
#line 287 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84630 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84638 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84645 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 119 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84650 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84658 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84665 "powerpc.tcc"
				>::initialize_operands()
				{
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						OUTPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
					}
#line 84678 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84687 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84692 "powerpc.tcc"
				> *DecodeOpMtfsf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 84698 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84708 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84712 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84716 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84720 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84723 "powerpc.tcc"
				)
				{
#line 2101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t mask = crfD ? 0xf : 0x9;
						uint32_t fpscr = cpu->GetFPSCR();
						fpscr = (fpscr & (~(0xf << (4 * (7 - crfD))))) | ((imm & mask) << (4 * (7 - crfD)));
						cpu->SetFPSCR(fpscr);
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84742 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84750 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84754 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84758 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84762 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84765 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84769 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84772 "powerpc.tcc"
				)
				{
#line 2116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsfi" << (rc ? "." : "") << " cr" << crfD << ", " << imm;
					}
#line 84779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84787 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84794 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84807 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84814 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84821 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84829 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84836 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84848 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84856 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84863 "powerpc.tcc"
				>::initialize_function()
				{
#line 288 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84868 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84876 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84883 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84888 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84896 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84903 "powerpc.tcc"
				>::initialize_operands()
				{
#line 795 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						//  OUTPUT(CR_T, crfD);
						OUTPUT(FPSCR_T, 0);
					}
#line 84917 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84926 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84931 "powerpc.tcc"
				> *DecodeOpMtfsfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 84937 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 84977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84980 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84984 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 84988 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84992 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84995 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? li : cpu->GetCIA() + li;
						cpu->SetNIA(target_addr);
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85004 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85012 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85016 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85020 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85024 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85027 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85031 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85034 "powerpc.tcc"
				)
				{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = (aa ? li : Operation<CONFIG>::GetAddr() + li);
						os << "b" << (lk ? "l" : "") << (aa ? "a" : "") << " ";
						os << "0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85055 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85062 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85075 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85082 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85094 "powerpc.tcc"
				}
				/** Branch (FnBranch | FnConditionalBranch | FnBranchCountReg | FnBranchLinkReg) **/
				template <
#line 38 "ppc.isa"
				class
#line 85100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85103 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85110 "powerpc.tcc"
				>::initialize_function()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranch;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 85118 "powerpc.tcc"
				}
				/** Branch **/
				template <
#line 38 "ppc.isa"
				class
#line 85124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85127 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85134 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 85139 "powerpc.tcc"
				}
				/* Dependancies for Branch Instruction */
				template <
#line 38 "ppc.isa"
				class
#line 85145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85148 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85155 "powerpc.tcc"
				>::initialize_operands()
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 85165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85173 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85177 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85181 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85185 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 85188 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85192 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85195 "powerpc.tcc"
				)
				{
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? li : cia + li);
					}
#line 85202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85210 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85214 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85218 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85222 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85225 "powerpc.tcc"
				)
				{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Unconditional branch is statically predicted taken
						return true;
					}
#line 85233 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85241 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85245 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85249 "powerpc.tcc"
				>::branch_linked()
				{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 85256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85264 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85268 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85272 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return false;
					}
#line 85279 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85288 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85293 "powerpc.tcc"
				> *DecodeOpB(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpB<
#line 38 "ppc.isa"
					CONFIG
#line 85299 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85309 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 85313 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85317 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 85321 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 85324 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						uint32_t ctr_ok, cond_ok, ok;

						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}

						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						ok = ctr_ok && cond_ok;

						if(ok) {
							typename CONFIG::address_t target_addr = aa ? bd : cpu->GetCIA() + bd;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85370 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85378 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85382 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85386 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85390 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85393 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85397 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85400 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? bd : Operation<CONFIG>::GetAddr() + bd;
						switch(bo)
						{
							case 0: os << "bdnzf"; break;
							case 2: os << "bdzf"; break;
							case 4: os << "bf"; break;
							case 8: os << "bdnzt"; break;
							case 10: os << "bdzt"; break;
							case 12: os << "bt"; break;
							case 16: os << "bdnz"; break;
							case 18: os << "bdz"; break;
							default: os << "bc";
						}
						if(lk) os << "l";
						if(aa) os << "a";
						os << " ";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: case 16: case 18: os << bi; break;
							default: os << bo << ", " << bi;
						}
						os << ", 0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85440 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85447 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85452 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85457 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85460 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85467 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85479 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85487 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85494 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85514 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85521 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85533 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85538 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85541 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85548 "powerpc.tcc"
				>::initialize_write_ctr()
				{
#line 411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85560 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85568 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85575 "powerpc.tcc"
				>::initialize_function()
				{
#line 144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnConditionalBranch;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 85583 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85591 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85598 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 85603 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85611 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85618 "powerpc.tcc"
				>::initialize_operands()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if( (bo & 16) == 0 )
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 85637 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85645 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85649 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85653 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85657 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 85660 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85664 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85667 "powerpc.tcc"
				)
				{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? bd : cia + bd);
					}
#line 85674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85682 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85686 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85690 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85694 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85697 "powerpc.tcc"
				)
				{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// bd represent the displacement
						// bo represent the behavior of the branch
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != (((bo & 0x01) && (bo & 0x04)) || (bd < 0));
					}
#line 85707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85715 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85719 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85723 "powerpc.tcc"
				>::branch_linked()
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 85730 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85735 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85738 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85742 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85746 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 85753 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85762 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85767 "powerpc.tcc"
				> *DecodeOpBc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBc<
#line 38 "ppc.isa"
					CONFIG
#line 85773 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85783 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 85787 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85791 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 85795 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 85798 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						if(bo & 8) throw IllegalInstructionException<CONFIG>();
						int cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if(cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85833 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85837 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85841 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85845 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85848 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85852 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85855 "powerpc.tcc"
				)
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 4: os << "bfctr"; break;
							case 12: os << "btctr"; break;
						case 20:
							if(bi == 0)
							{
								os << "bctr";
								break;
							}
							// no break if bi != 0
						default:
							os << "bcctr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 4: case 12: os << " " << bi; break;
							case 20: if(bi == 0) break;
							// no break if bi != 0
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85888 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85896 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85903 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85916 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85923 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 85932 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85940 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85947 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85959 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85967 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85974 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85994 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86001 "powerpc.tcc"
				>::initialize_function()
				{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchCountReg;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 86009 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86017 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86024 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86029 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86037 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86044 "powerpc.tcc"
				>::initialize_operands()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CTR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 86059 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86067 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86071 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86075 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86079 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 86082 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86086 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86089 "powerpc.tcc"
				)
				{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetCTR() & 0xfffffffc);
					}
#line 86096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86104 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86108 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86112 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86116 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86119 "powerpc.tcc"
				)
				{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 86128 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86136 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86140 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86144 "powerpc.tcc"
				>::branch_linked()
				{
#line 112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 86151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86159 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86163 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86167 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 86174 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86183 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86188 "powerpc.tcc"
				> *DecodeOpBcctr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 86194 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 86201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86204 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 86208 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86212 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 86216 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 86219 "powerpc.tcc"
				)
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						int ctr_ok, cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						if(ctr_ok && cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 86261 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86269 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 86273 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86277 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 86281 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 86284 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 86288 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 86291 "powerpc.tcc"
				)
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 0: os << "bdnzflr"; break;
							case 2: os << "bdzflr"; break;
							case 4: os << "bflr"; break;
							case 8: os << "bdnztlr"; break;
							case 10: os << "bdztlr"; break;
							case 12: os << "btlr"; break;
							case 16: os << "bdnzlr"; break;
							case 18: os << "bdzlr"; break;
							case 20: os << "blr"; break;
							default: os << "bclr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: os << " " << bi; break;
							case 16: case 18: case 20: break;
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 86322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86330 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86337 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 86342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86350 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86357 "powerpc.tcc"
				>::initialize_read_lr()
				{
#line 327 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86374 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86381 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86393 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86401 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86408 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86420 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86428 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86435 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86447 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86455 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86462 "powerpc.tcc"
				>::initialize_write_ctr()
				{
#line 411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86474 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86482 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86489 "powerpc.tcc"
				>::initialize_function()
				{
#line 152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchLinkReg;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 86497 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86505 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86512 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 71 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86517 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86525 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86532 "powerpc.tcc"
				>::initialize_operands()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(LR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 86552 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86560 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86564 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86568 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86572 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 86575 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86579 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86582 "powerpc.tcc"
				)
				{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetLR() & 0xfffffffc);
					}
#line 86589 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86597 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86601 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86605 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86609 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86612 "powerpc.tcc"
				)
				{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 86621 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86629 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86633 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86637 "powerpc.tcc"
				>::branch_linked()
				{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 86644 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86652 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86656 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86660 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 86667 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86676 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86681 "powerpc.tcc"
				> *DecodeOpBclr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 86687 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 86727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86730 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 86734 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86738 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 86742 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 86745 "powerpc.tcc"
				)
				{
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & _b)<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 86758 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86766 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 86770 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86774 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 86778 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 86781 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 86785 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 86788 "powerpc.tcc"
				)
				{
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 86795 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86803 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86810 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 86815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86823 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86830 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 86837 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86845 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86852 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86869 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86876 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86885 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86893 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86900 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86909 "powerpc.tcc"
				}
				/** Condition Register **/
				template <
#line 38 "ppc.isa"
				class
#line 86915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86918 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86925 "powerpc.tcc"
				>::initialize_function()
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 86930 "powerpc.tcc"
				}
				/** Condition **/
				template <
#line 38 "ppc.isa"
				class
#line 86936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86939 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86946 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86951 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86959 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86966 "powerpc.tcc"
				>::initialize_operands()
				{
#line 824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 86997 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87006 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87011 "powerpc.tcc"
				> *DecodeOpCrand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 87017 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87027 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87031 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87035 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87039 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87042 "powerpc.tcc"
				)
				{
#line 50 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87063 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87067 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87071 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87075 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87078 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87082 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87085 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crandc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87100 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87107 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87112 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87120 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87127 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87142 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87149 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87166 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87173 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87190 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87197 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87206 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87214 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87221 "powerpc.tcc"
				>::initialize_function()
				{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87226 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87234 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87241 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87246 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87254 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87261 "powerpc.tcc"
				>::initialize_operands()
				{
#line 824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87292 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87301 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87306 "powerpc.tcc"
				> *DecodeOpCrandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 87312 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87322 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87326 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87330 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87334 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87337 "powerpc.tcc"
				)
				{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a ^ _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87350 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87358 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87362 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87366 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87370 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87373 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87377 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87380 "powerpc.tcc"
				)
				{
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "creqv cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87387 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87395 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87402 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87407 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87415 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87422 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87429 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87437 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87444 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87461 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87468 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87477 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87482 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87485 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87492 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87501 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87509 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87516 "powerpc.tcc"
				>::initialize_function()
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87521 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87529 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87536 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87541 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87549 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87556 "powerpc.tcc"
				>::initialize_operands()
				{
#line 824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87587 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87596 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87601 "powerpc.tcc"
				> *DecodeOpCreqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 87607 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87617 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87621 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87625 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87629 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87632 "powerpc.tcc"
				)
				{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a & _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87645 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87653 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87657 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87661 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87665 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87668 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87672 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87675 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87682 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87690 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87697 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87710 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87717 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87724 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87732 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87739 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87748 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87756 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87763 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87772 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87780 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87787 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87796 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87804 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87811 "powerpc.tcc"
				>::initialize_function()
				{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87824 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87831 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87836 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87844 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87851 "powerpc.tcc"
				>::initialize_operands()
				{
#line 824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87882 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87888 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87891 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87896 "powerpc.tcc"
				> *DecodeOpCrnand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 87902 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87912 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87916 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87920 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87924 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87927 "powerpc.tcc"
				)
				{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a | _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87940 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87948 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87952 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87956 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87960 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87963 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87967 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87970 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87977 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87985 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87992 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87997 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88005 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88012 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88019 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88027 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88034 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88043 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88051 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88058 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88075 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88082 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88091 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88099 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88106 "powerpc.tcc"
				>::initialize_function()
				{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88111 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88116 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88119 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88126 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88131 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88139 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88146 "powerpc.tcc"
				>::initialize_operands()
				{
#line 824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88177 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88186 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88191 "powerpc.tcc"
				> *DecodeOpCrnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 88197 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88207 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88211 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88215 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88219 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88222 "powerpc.tcc"
				)
				{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | _b) << (31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 88235 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88243 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88247 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88251 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88255 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88258 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88262 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88265 "powerpc.tcc"
				)
				{
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "cror cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88272 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88280 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88287 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88292 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88297 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88300 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88307 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88322 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88329 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88346 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88353 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88370 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88377 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88386 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88394 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88401 "powerpc.tcc"
				>::initialize_function()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88406 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88411 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88414 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88421 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88426 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88434 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88441 "powerpc.tcc"
				>::initialize_operands()
				{
#line 824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88472 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88481 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88486 "powerpc.tcc"
				> *DecodeOpCror(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCror<
#line 38 "ppc.isa"
					CONFIG
#line 88492 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88502 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88506 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88510 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88514 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88517 "powerpc.tcc"
				)
				{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 88530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88538 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88542 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88546 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88550 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88553 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88557 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88560 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crorc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88567 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88575 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88582 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88587 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88595 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88602 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88609 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88617 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88624 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88641 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88648 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88665 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88672 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88681 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88689 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88696 "powerpc.tcc"
				>::initialize_function()
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88701 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88709 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88716 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88721 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88729 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88736 "powerpc.tcc"
				>::initialize_operands()
				{
#line 824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88767 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88776 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88781 "powerpc.tcc"
				> *DecodeOpCrorc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 88787 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88797 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88801 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88805 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88809 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88812 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _e ;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a ^ _b)<<(31-crbD);
						_e = ~(1<<(31-crbD));
						cpu->SetCR((_c & _e) | _d );
					}
#line 88825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88833 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88837 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88841 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88845 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88848 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88852 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88855 "powerpc.tcc"
				)
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crxor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88862 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88870 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88877 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88882 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88890 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88897 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88912 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88919 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88928 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88936 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88943 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88952 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88960 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88967 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88976 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88984 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88991 "powerpc.tcc"
				>::initialize_function()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89004 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 89011 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 81 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 89016 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89024 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 89031 "powerpc.tcc"
				>::initialize_operands()
				{
#line 824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 89062 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89071 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89076 "powerpc.tcc"
				> *DecodeOpCrxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 89082 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89092 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89096 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89100 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89104 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89107 "powerpc.tcc"
				)
				{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						cpu->SetCR((cpu->GetCR() & (~(0xf << (4 * (7 - crfD))))) | (((cpu->GetCR() >> (4 * (7 - crfS))) & 0xf) << (4 * (7 - crfD))));
					}
#line 89114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89122 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89126 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89130 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89134 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89137 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89141 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89144 "powerpc.tcc"
				)
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "mcrf cr" << crfD << ", cr" << crfS;
					}
#line 89151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89159 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89166 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 89171 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89179 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89186 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 369 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89203 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89210 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 468 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89219 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89227 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89234 "powerpc.tcc"
				>::initialize_function()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 89239 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89247 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89254 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 89259 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89267 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89274 "powerpc.tcc"
				>::initialize_operands()
				{
#line 816 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(CRF_T, crfS);
						OUTPUT(CR_T, crfD);
						INPUT(CR_T, crfS);
					}
#line 89284 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89293 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89298 "powerpc.tcc"
				> *DecodeOpMcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 89304 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************

				INTEGER LOAD INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 89349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89352 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89356 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89360 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89364 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89367 "powerpc.tcc"
				)
				{
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 89377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89385 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89389 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89393 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89397 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89400 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89404 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89407 "powerpc.tcc"
				)
				{
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89419 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89427 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89434 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 89439 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89447 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89454 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89464 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89472 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89479 "powerpc.tcc"
				>::initialize_function()
				{
#line 301 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 89484 "powerpc.tcc"
				}
				/** Load Store **/
				template <
#line 38 "ppc.isa"
				class
#line 89490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89493 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89500 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89513 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89520 "powerpc.tcc"
				>::initialize_operands()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 89532 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89540 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89544 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89548 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 89552 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89555 "powerpc.tcc"
				)
				{
#line 71 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89560 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89568 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89572 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89576 "powerpc.tcc"
				>::memory_access_size()
				{
#line 152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 89581 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89590 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89595 "powerpc.tcc"
				> *DecodeOpLbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 89601 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89611 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89615 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89619 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89623 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89626 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 89639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89647 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89651 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89655 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89659 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89662 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89666 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89669 "powerpc.tcc"
				)
				{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89681 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89689 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89696 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 89701 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89709 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89716 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89726 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89734 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89741 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89759 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89766 "powerpc.tcc"
				>::initialize_function()
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 89771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89779 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89786 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89791 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89799 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89806 "powerpc.tcc"
				>::initialize_operands()
				{
#line 282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 89815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89823 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89827 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89831 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 89835 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89838 "powerpc.tcc"
				)
				{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89851 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89855 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89859 "powerpc.tcc"
				>::memory_access_size()
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 89864 "powerpc.tcc"
				}
				// Integer LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 89870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89873 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 89877 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89881 "powerpc.tcc"
				>::is_splitted()
				{
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 89888 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89896 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 89900 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89904 "powerpc.tcc"
				>::split_into()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 34 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 89925 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89934 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89939 "powerpc.tcc"
				> *DecodeOpLbzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 89945 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89955 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89959 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 89963 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89967 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89970 "powerpc.tcc"
				)
				{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 89983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89991 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89995 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 89999 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90003 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90006 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90010 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90013 "powerpc.tcc"
				)
				{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90025 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90033 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90040 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90053 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90060 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90070 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90075 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90078 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90085 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90095 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90103 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90110 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90128 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90135 "powerpc.tcc"
				>::initialize_function()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90148 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90155 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90160 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90168 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90175 "powerpc.tcc"
				>::initialize_operands()
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 90184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90192 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90196 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90200 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90204 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90207 "powerpc.tcc"
				)
				{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90220 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90224 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90228 "powerpc.tcc"
				>::memory_access_size()
				{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 90233 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90241 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 90245 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90249 "powerpc.tcc"
				>::is_splitted()
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 90256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90264 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 90268 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90272 "powerpc.tcc"
				>::split_into()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (87 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 90295 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90304 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90309 "powerpc.tcc"
				> *DecodeOpLbzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 90315 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90325 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90329 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90333 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90337 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90340 "powerpc.tcc"
				)
				{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 90350 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90358 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90362 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90366 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90370 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90373 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90377 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90380 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90392 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90400 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90407 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90412 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90420 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90427 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90437 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90442 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90445 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90452 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90462 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90467 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90470 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90477 "powerpc.tcc"
				>::initialize_function()
				{
#line 304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90490 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90497 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90502 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 90509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90512 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90519 "powerpc.tcc"
				>::initialize_operands()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 90528 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90536 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90540 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90544 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90548 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90551 "powerpc.tcc"
				)
				{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90564 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90568 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90572 "powerpc.tcc"
				>::memory_access_size()
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 90577 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90586 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90591 "powerpc.tcc"
				> *DecodeOpLbzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 90597 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90607 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90611 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90615 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90619 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90622 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 90632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90640 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90644 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90648 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90652 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90655 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90659 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90662 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lha r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90682 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90689 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90702 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90709 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90727 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90734 "powerpc.tcc"
				>::initialize_function()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90747 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90754 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90767 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90774 "powerpc.tcc"
				>::initialize_operands()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 90786 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90794 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90798 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90802 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90806 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90809 "powerpc.tcc"
				)
				{
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90822 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90826 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90830 "powerpc.tcc"
				>::memory_access_size()
				{
#line 156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 90835 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90840 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90843 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 90847 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90851 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 788 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 90856 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90865 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90870 "powerpc.tcc"
				> *DecodeOpLha(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLha<
#line 38 "ppc.isa"
					CONFIG
#line 90876 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90886 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90890 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90894 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90898 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90901 "powerpc.tcc"
				)
				{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 90914 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90922 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90926 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90930 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90934 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90937 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90941 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90944 "powerpc.tcc"
				)
				{
#line 136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhau r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90956 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90964 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90971 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90976 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90984 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90991 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91009 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91016 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91034 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91041 "powerpc.tcc"
				>::initialize_function()
				{
#line 306 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91046 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91054 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91061 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91066 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91074 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91081 "powerpc.tcc"
				>::initialize_operands()
				{
#line 282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 91090 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91098 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91102 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91106 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91110 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91113 "powerpc.tcc"
				)
				{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91126 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91130 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91134 "powerpc.tcc"
				>::memory_access_size()
				{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91147 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91151 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91155 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91160 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91166 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91169 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91174 "powerpc.tcc"
				> *DecodeOpLhau(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 91180 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91190 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91194 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91198 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91202 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91205 "powerpc.tcc"
				)
				{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 91218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91226 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91230 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91234 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91238 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91241 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91245 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91248 "powerpc.tcc"
				)
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhaux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91260 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91268 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91275 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91280 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91288 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91295 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91305 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91313 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91320 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91330 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91338 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91345 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91363 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91370 "powerpc.tcc"
				>::initialize_function()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91383 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91390 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91395 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91403 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91410 "powerpc.tcc"
				>::initialize_operands()
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 91419 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91427 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91431 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91435 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91439 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91442 "powerpc.tcc"
				)
				{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91447 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91455 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91459 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91463 "powerpc.tcc"
				>::memory_access_size()
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91476 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91480 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91484 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 790 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91489 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91498 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91503 "powerpc.tcc"
				> *DecodeOpLhaux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 91509 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91519 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91523 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91527 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91531 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91534 "powerpc.tcc"
				)
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 91544 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91552 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91556 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91560 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91564 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91567 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91571 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91574 "powerpc.tcc"
				)
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhax r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91594 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91601 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91606 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91614 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91621 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91631 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91639 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91646 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91664 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91671 "powerpc.tcc"
				>::initialize_function()
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91684 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91691 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91696 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 91703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91706 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91713 "powerpc.tcc"
				>::initialize_operands()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 91722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91730 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91734 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91738 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91742 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91745 "powerpc.tcc"
				)
				{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91750 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91758 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91762 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91766 "powerpc.tcc"
				>::memory_access_size()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91779 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91783 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91787 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 791 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91792 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91801 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91806 "powerpc.tcc"
				> *DecodeOpLhax(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 91812 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91822 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91826 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91830 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91834 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91837 "powerpc.tcc"
				)
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 91847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91855 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91859 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91863 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91867 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91870 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91874 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91877 "powerpc.tcc"
				)
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91889 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91897 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91904 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91909 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91917 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91924 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91942 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91949 "powerpc.tcc"
				>::initialize_function()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91962 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91969 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91982 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91989 "powerpc.tcc"
				>::initialize_operands()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 92001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92009 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92013 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 92017 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92021 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92024 "powerpc.tcc"
				)
				{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92029 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92037 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92041 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 92045 "powerpc.tcc"
				>::memory_access_size()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92050 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92059 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92064 "powerpc.tcc"
				> *DecodeOpLhz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 92070 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92080 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92084 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92088 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92092 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92095 "powerpc.tcc"
				)
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 92108 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92116 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92120 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92124 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92128 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92131 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92135 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92138 "powerpc.tcc"
				)
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92150 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92158 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92165 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92170 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92178 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92185 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92203 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92210 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92220 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92228 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92235 "powerpc.tcc"
				>::initialize_function()
				{
#line 310 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92240 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92248 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92255 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92260 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92268 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92275 "powerpc.tcc"
				>::initialize_operands()
				{
#line 282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 92284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92292 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92296 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92300 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92304 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92307 "powerpc.tcc"
				)
				{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92312 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92317 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92320 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92324 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92328 "powerpc.tcc"
				>::memory_access_size()
				{
#line 161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92333 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92338 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92341 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 92345 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92349 "powerpc.tcc"
				>::is_splitted()
				{
#line 313 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 92356 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92364 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 92368 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92372 "powerpc.tcc"
				>::split_into()
				{
#line 316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 40 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 92393 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92402 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92407 "powerpc.tcc"
				> *DecodeOpLhzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 92413 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92423 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92427 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92431 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92435 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92438 "powerpc.tcc"
				)
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 92451 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92459 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92463 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92467 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92471 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92474 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92478 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92481 "powerpc.tcc"
				)
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92501 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92508 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92521 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92528 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92546 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92553 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92563 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92571 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92578 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92596 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92603 "powerpc.tcc"
				>::initialize_function()
				{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92616 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92623 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92628 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92633 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92636 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92643 "powerpc.tcc"
				>::initialize_operands()
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 92652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92660 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92664 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92668 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92672 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92675 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92688 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92692 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92696 "powerpc.tcc"
				>::memory_access_size()
				{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92701 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92709 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 92713 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92717 "powerpc.tcc"
				>::is_splitted()
				{
#line 334 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 92724 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92732 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 92736 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92740 "powerpc.tcc"
				>::split_into()
				{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (279 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 92763 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92772 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92777 "powerpc.tcc"
				> *DecodeOpLhzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 92783 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92793 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92797 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92801 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92805 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92808 "powerpc.tcc"
				)
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 92818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92826 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92830 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92834 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92838 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92841 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92845 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92848 "powerpc.tcc"
				)
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92868 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92875 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92888 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92895 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92913 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92920 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92938 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92945 "powerpc.tcc"
				>::initialize_function()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92950 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92958 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92965 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92970 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 92977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92980 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92987 "powerpc.tcc"
				>::initialize_operands()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 92996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93004 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93008 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 93012 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93016 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93019 "powerpc.tcc"
				)
				{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93032 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93036 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 93040 "powerpc.tcc"
				>::memory_access_size()
				{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 93045 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93054 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93059 "powerpc.tcc"
				> *DecodeOpLhzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 93065 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93075 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93079 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93083 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93087 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93090 "powerpc.tcc"
				)
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 93100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93108 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93112 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93116 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93120 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93123 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93127 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93130 "powerpc.tcc"
				)
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93142 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93150 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93157 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93162 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93170 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93177 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93187 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93195 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93202 "powerpc.tcc"
				>::initialize_function()
				{
#line 313 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93207 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93215 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93222 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93235 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93242 "powerpc.tcc"
				>::initialize_operands()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 93254 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93262 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93266 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93270 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93274 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93277 "powerpc.tcc"
				)
				{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93290 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93294 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93298 "powerpc.tcc"
				>::memory_access_size()
				{
#line 164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93303 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93312 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93317 "powerpc.tcc"
				> *DecodeOpLwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 93323 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93333 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93337 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93341 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93345 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93348 "powerpc.tcc"
				)
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 93361 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93369 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93373 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93377 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93381 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93384 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93388 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93391 "powerpc.tcc"
				)
				{
#line 276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93403 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93411 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93418 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93423 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93431 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93438 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93456 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93463 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93473 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93481 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93488 "powerpc.tcc"
				>::initialize_function()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93501 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93508 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93521 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93528 "powerpc.tcc"
				>::initialize_operands()
				{
#line 282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 93537 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93545 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93549 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93553 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93557 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93560 "powerpc.tcc"
				)
				{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93565 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93573 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93577 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93581 "powerpc.tcc"
				>::memory_access_size()
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93594 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 93598 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93602 "powerpc.tcc"
				>::is_splitted()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 93609 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93617 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 93621 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93625 "powerpc.tcc"
				>::split_into()
				{
#line 360 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwz_ctype=0;
						lwz_ctype = 32 << 26;
						lwz_ctype = lwz_ctype | (rd << 21);
						lwz_ctype = lwz_ctype | (ra << 16);
						lwz_ctype = lwz_ctype | (d & 0xffff);
						l.push_back( new OpLwz<CONFIG>(lwz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 93647 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93656 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93661 "powerpc.tcc"
				> *DecodeOpLwzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 93667 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93677 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93681 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93685 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93689 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93692 "powerpc.tcc"
				)
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 93705 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93713 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93717 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93721 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93725 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93728 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93732 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93735 "powerpc.tcc"
				)
				{
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93755 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93762 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93775 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93782 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93800 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93807 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93825 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93832 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93842 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93850 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93857 "powerpc.tcc"
				>::initialize_function()
				{
#line 315 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93862 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93870 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93877 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93882 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93890 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93897 "powerpc.tcc"
				>::initialize_operands()
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 93906 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93914 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93918 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93922 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93926 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93929 "powerpc.tcc"
				)
				{
#line 89 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93942 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93946 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93950 "powerpc.tcc"
				>::memory_access_size()
				{
#line 166 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93963 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 93967 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93971 "powerpc.tcc"
				>::is_splitted()
				{
#line 379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 93978 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93986 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 93990 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93994 "powerpc.tcc"
				>::split_into()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwzx_ctype=0;
						lwzx_ctype = 31 << 26;
						lwzx_ctype = lwzx_ctype | (rd << 21);
						lwzx_ctype = lwzx_ctype | (ra << 16);
						lwzx_ctype = lwzx_ctype | (rb << 11);
						lwzx_ctype = lwzx_ctype | (23 << 1);
						l.push_back( new OpLwzx<CONFIG>(lwzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 94017 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94026 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94031 "powerpc.tcc"
				> *DecodeOpLwzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 94037 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94047 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94051 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94055 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94059 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94062 "powerpc.tcc"
				)
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 94072 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94080 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94084 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94088 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94092 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94095 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94099 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94102 "powerpc.tcc"
				)
				{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94122 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94129 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94142 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94149 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94159 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94167 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94174 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94192 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94199 "powerpc.tcc"
				>::initialize_function()
				{
#line 316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 94204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94212 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94219 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94224 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 94231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94234 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94241 "powerpc.tcc"
				>::initialize_operands()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 94250 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94258 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94262 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94266 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94270 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94273 "powerpc.tcc"
				)
				{
#line 81 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 94278 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94286 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94290 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94294 "powerpc.tcc"
				>::memory_access_size()
				{
#line 167 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 94299 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94308 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94313 "powerpc.tcc"
				> *DecodeOpLwzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 94319 "powerpc.tcc"
					>(code, addr);
				}

				/****************************

				INTEGER STORE INSTRUCTIONS

				****************************/
				template <
#line 38 "ppc.isa"
				class
#line 94331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94334 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94338 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94342 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94346 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94349 "powerpc.tcc"
				)
				{
#line 326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 94359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94367 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94371 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94375 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94379 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94382 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94386 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94389 "powerpc.tcc"
				)
				{
#line 332 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stb r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94409 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94416 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94429 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94436 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 94443 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94451 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94458 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94476 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94483 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94501 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94508 "powerpc.tcc"
				>::initialize_function()
				{
#line 317 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 94513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94521 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94528 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94533 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94538 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94541 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94548 "powerpc.tcc"
				>::initialize_operands()
				{
#line 347 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 94556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94564 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94568 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94572 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94576 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94579 "powerpc.tcc"
				)
				{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 94584 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94592 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94596 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94600 "powerpc.tcc"
				>::memory_access_size()
				{
#line 168 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 94605 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94614 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94619 "powerpc.tcc"
				> *DecodeOpStb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStb<
#line 38 "ppc.isa"
					CONFIG
#line 94625 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94635 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94639 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94643 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94647 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94650 "powerpc.tcc"
				)
				{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 94663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94671 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94675 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94679 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94683 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94686 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94690 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94693 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94705 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94713 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94720 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94733 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94740 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 94747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94755 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94762 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94772 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94780 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94787 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94805 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94812 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94822 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94827 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94830 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94837 "powerpc.tcc"
				>::initialize_function()
				{
#line 318 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 94842 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94850 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94857 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94862 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94870 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94877 "powerpc.tcc"
				>::initialize_operands()
				{
#line 353 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 94886 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94894 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94898 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94902 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94906 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94909 "powerpc.tcc"
				)
				{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 94914 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94922 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94926 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94930 "powerpc.tcc"
				>::memory_access_size()
				{
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 94935 "powerpc.tcc"
				}
				// Integer STORES with update
				template <
#line 38 "ppc.isa"
				class
#line 94941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94944 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 94948 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94952 "powerpc.tcc"
				>::is_splitted()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 94959 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94967 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 94971 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94975 "powerpc.tcc"
				>::split_into()
				{
#line 406 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 38 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 94998 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95007 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95012 "powerpc.tcc"
				> *DecodeOpStbu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 95018 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95028 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95032 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95036 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95040 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95043 "powerpc.tcc"
				)
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 95056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95064 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95068 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95072 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95076 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95079 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95083 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95086 "powerpc.tcc"
				)
				{
#line 370 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95098 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95106 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95113 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95126 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95133 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95148 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95155 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95173 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95180 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95190 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95198 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95205 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95223 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95230 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95240 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95248 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95255 "powerpc.tcc"
				>::initialize_function()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95260 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95268 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95275 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95280 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95288 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95295 "powerpc.tcc"
				>::initialize_operands()
				{
#line 421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 95304 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95312 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95316 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95320 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 95324 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 95327 "powerpc.tcc"
				)
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 95332 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95340 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95344 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95348 "powerpc.tcc"
				>::memory_access_size()
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 95353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95361 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 95365 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95369 "powerpc.tcc"
				>::is_splitted()
				{
#line 426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 95376 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95384 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 95388 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95392 "powerpc.tcc"
				>::split_into()
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stbx_ctype=0;
						stbx_ctype = 31 << 26;
						stbx_ctype = stbx_ctype | (rs << 21);
						stbx_ctype = stbx_ctype | (ra << 16);
						stbx_ctype = stbx_ctype | (rb << 11);
						stbx_ctype = stbx_ctype | (215 << 1);
						l.push_back( new OpStb<CONFIG>(stbx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 95417 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95426 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95431 "powerpc.tcc"
				> *DecodeOpStbux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 95437 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95447 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95451 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95455 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95459 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95462 "powerpc.tcc"
				)
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 95472 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95480 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95484 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95488 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95492 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95495 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95499 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95502 "powerpc.tcc"
				)
				{
#line 386 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95514 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95522 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95529 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95542 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95549 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95564 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95571 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95589 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95596 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95606 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95614 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95621 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95631 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95639 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95646 "powerpc.tcc"
				>::initialize_function()
				{
#line 320 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95651 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95659 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95666 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95671 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95679 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95686 "powerpc.tcc"
				>::initialize_operands()
				{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 95695 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95703 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95707 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95711 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 95715 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 95718 "powerpc.tcc"
				)
				{
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 95723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95731 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95735 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95739 "powerpc.tcc"
				>::memory_access_size()
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 95744 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95753 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95758 "powerpc.tcc"
				> *DecodeOpStbx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 95764 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95771 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95774 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95778 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95782 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95786 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95789 "powerpc.tcc"
				)
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 95799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95807 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95811 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95815 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95819 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95822 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95826 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95829 "powerpc.tcc"
				)
				{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sth r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95841 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95849 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95856 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95869 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95876 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95883 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95888 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95891 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95898 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95916 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95923 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95933 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95941 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95948 "powerpc.tcc"
				>::initialize_function()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95953 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95958 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95961 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95968 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95973 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95981 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95988 "powerpc.tcc"
				>::initialize_operands()
				{
#line 347 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 95996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96004 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96008 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 96012 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96016 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96019 "powerpc.tcc"
				)
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96032 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96036 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 96040 "powerpc.tcc"
				>::memory_access_size()
				{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96045 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96054 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96059 "powerpc.tcc"
				> *DecodeOpSth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSth<
#line 38 "ppc.isa"
					CONFIG
#line 96065 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96075 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96079 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96083 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96087 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96090 "powerpc.tcc"
				)
				{
#line 412 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 96103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96111 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96115 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96119 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96123 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96126 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96130 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96133 "powerpc.tcc"
				)
				{
#line 421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96153 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96160 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96173 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96180 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 96187 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96195 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96202 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96220 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96227 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96237 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96245 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96252 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96270 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96277 "powerpc.tcc"
				>::initialize_function()
				{
#line 322 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 96282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96290 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96297 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 96302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96310 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96317 "powerpc.tcc"
				>::initialize_operands()
				{
#line 353 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 96326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96334 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96338 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96342 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96346 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96349 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96362 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96366 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96370 "powerpc.tcc"
				>::memory_access_size()
				{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96383 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 96387 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96391 "powerpc.tcc"
				>::is_splitted()
				{
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 96398 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96406 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 96410 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96414 "powerpc.tcc"
				>::split_into()
				{
#line 454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 44 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 96437 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96446 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96451 "powerpc.tcc"
				> *DecodeOpSthu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 96457 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96467 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96471 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96475 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96479 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96482 "powerpc.tcc"
				)
				{
#line 431 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 96495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96503 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96507 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96511 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96515 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96518 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96522 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96525 "powerpc.tcc"
				)
				{
#line 440 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96537 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96545 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96552 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96557 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96565 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96572 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96590 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96597 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96607 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96615 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96622 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96640 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96647 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96665 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96672 "powerpc.tcc"
				>::initialize_function()
				{
#line 323 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 96677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96685 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96692 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 96697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96705 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96712 "powerpc.tcc"
				>::initialize_operands()
				{
#line 421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 96721 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96729 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96733 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96737 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96741 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96744 "powerpc.tcc"
				)
				{
#line 112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96757 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96761 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96765 "powerpc.tcc"
				>::memory_access_size()
				{
#line 174 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96770 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96778 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 96782 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96786 "powerpc.tcc"
				>::is_splitted()
				{
#line 474 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 96793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96801 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 96805 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96809 "powerpc.tcc"
				>::split_into()
				{
#line 477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType sthx_ctype=0;
						sthx_ctype = 31 << 26;
						sthx_ctype = sthx_ctype | (rs << 21);
						sthx_ctype = sthx_ctype | (ra << 16);
						sthx_ctype = sthx_ctype | (rb << 11);
						sthx_ctype = sthx_ctype | (407 << 1);
						l.push_back( new OpStb<CONFIG>(sthx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 96834 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96840 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96843 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96848 "powerpc.tcc"
				> *DecodeOpSthux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 96854 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96864 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96868 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96872 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96876 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96879 "powerpc.tcc"
				)
				{
#line 450 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 96889 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96897 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96901 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96905 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96909 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96912 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96916 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96919 "powerpc.tcc"
				)
				{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96931 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96939 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96946 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96951 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96959 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96966 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96976 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96984 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96991 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97009 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97016 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97034 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97041 "powerpc.tcc"
				>::initialize_function()
				{
#line 324 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97046 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97054 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97061 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97066 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97074 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97081 "powerpc.tcc"
				>::initialize_operands()
				{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 97090 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97098 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97102 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97106 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97110 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97113 "powerpc.tcc"
				)
				{
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97126 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97130 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97134 "powerpc.tcc"
				>::memory_access_size()
				{
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 97139 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97148 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97153 "powerpc.tcc"
				> *DecodeOpSthx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 97159 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97166 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97169 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97173 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97177 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97181 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97184 "powerpc.tcc"
				)
				{
#line 466 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 97194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97202 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97206 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97210 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97214 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97217 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97221 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97224 "powerpc.tcc"
				)
				{
#line 472 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97244 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97251 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97264 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97271 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97278 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97286 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97293 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97303 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97311 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97318 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97336 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97343 "powerpc.tcc"
				>::initialize_function()
				{
#line 325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97356 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97363 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97376 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97383 "powerpc.tcc"
				>::initialize_operands()
				{
#line 347 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 97391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97399 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97403 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97407 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97411 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97414 "powerpc.tcc"
				)
				{
#line 114 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97419 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97427 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97431 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97435 "powerpc.tcc"
				>::memory_access_size()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 97440 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97449 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97454 "powerpc.tcc"
				> *DecodeOpStw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStw<
#line 38 "ppc.isa"
					CONFIG
#line 97460 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97467 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97470 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97474 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97478 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97482 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97485 "powerpc.tcc"
				)
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 97498 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97503 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97506 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97510 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97514 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97518 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97521 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97525 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97528 "powerpc.tcc"
				)
				{
#line 491 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97540 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97548 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97555 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97560 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97568 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97575 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97590 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97597 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97607 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97615 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97622 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97640 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97647 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97665 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97672 "powerpc.tcc"
				>::initialize_function()
				{
#line 326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97685 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97692 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97705 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97712 "powerpc.tcc"
				>::initialize_operands()
				{
#line 353 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 97721 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97729 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97733 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97737 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97741 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97744 "powerpc.tcc"
				)
				{
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97757 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97761 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97765 "powerpc.tcc"
				>::memory_access_size()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 97770 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97778 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 97782 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97786 "powerpc.tcc"
				>::is_splitted()
				{
#line 500 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 97793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97801 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 97805 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97809 "powerpc.tcc"
				>::split_into()
				{
#line 503 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stw_ctype=0;
						stw_ctype = 36 << 26;
						stw_ctype = stw_ctype | (rs << 21);
						stw_ctype = stw_ctype | (ra << 16);
						stw_ctype = stw_ctype | (d & 0xffff);
						l.push_back( new OpStw<CONFIG>(stw_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 97832 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97841 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97846 "powerpc.tcc"
				> *DecodeOpStwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 97852 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97862 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97866 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97870 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97874 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97877 "powerpc.tcc"
				)
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 97890 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97898 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97902 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97906 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97910 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97913 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97917 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97920 "powerpc.tcc"
				)
				{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97932 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97940 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97947 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97952 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97960 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97967 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97982 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97989 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98007 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98014 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98032 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98039 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98057 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98064 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98082 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98089 "powerpc.tcc"
				>::initialize_function()
				{
#line 327 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 98094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98102 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98109 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98122 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98129 "powerpc.tcc"
				>::initialize_operands()
				{
#line 421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98138 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98146 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98150 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98154 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98158 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98161 "powerpc.tcc"
				)
				{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 98166 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98174 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98178 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98182 "powerpc.tcc"
				>::memory_access_size()
				{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 98187 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98195 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 98199 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98203 "powerpc.tcc"
				>::is_splitted()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 98210 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98218 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 98222 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98226 "powerpc.tcc"
				>::split_into()
				{
#line 526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stwx_ctype=0;
						stwx_ctype = 31 << 26;
						stwx_ctype = stwx_ctype | (rs << 21);
						stwx_ctype = stwx_ctype | (ra << 16);
						stwx_ctype = stwx_ctype | (rb << 11);
						stwx_ctype = stwx_ctype | (151 << 1);
						l.push_back( new OpStwx<CONFIG>(stwx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 98250 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98259 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98264 "powerpc.tcc"
				> *DecodeOpStwux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 98270 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98280 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98284 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98288 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98292 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98295 "powerpc.tcc"
				)
				{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 98305 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98313 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98317 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98321 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98325 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98328 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98332 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98335 "powerpc.tcc"
				)
				{
#line 526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98355 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98362 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98375 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98382 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 98389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98397 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98404 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98414 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98422 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98429 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98439 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98447 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98454 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98464 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98472 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98479 "powerpc.tcc"
				>::initialize_function()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 98484 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98492 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98499 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98504 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98512 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98519 "powerpc.tcc"
				>::initialize_operands()
				{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98528 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98536 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98540 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98544 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98548 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98551 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 98556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98564 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98568 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98572 "powerpc.tcc"
				>::memory_access_size()
				{
#line 179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 98577 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98586 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98591 "powerpc.tcc"
				> *DecodeOpStwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 98597 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				INTEGER LOAD STORE w BYTE REVERSE INSTRUCTIONS

				***************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 98609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98612 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98616 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98620 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98624 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98627 "powerpc.tcc"
				)
				{
#line 542 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16LoadByteReverse(rd, ea); // 16-bit load/byte reverse/no signe extend
					}
#line 98637 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98645 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98649 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98653 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98657 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98660 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98664 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98667 "powerpc.tcc"
				)
				{
#line 548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98687 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98694 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98699 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98707 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98714 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98724 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98732 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98739 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98757 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98764 "powerpc.tcc"
				>::initialize_function()
				{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 98769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98777 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98784 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98789 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 98796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98799 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98806 "powerpc.tcc"
				>::initialize_operands()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98823 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98827 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98831 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98835 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98838 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 98843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98851 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98855 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98859 "powerpc.tcc"
				>::memory_access_size()
				{
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 98864 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98873 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98878 "powerpc.tcc"
				> *DecodeOpLhbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 98884 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98894 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98898 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98902 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98906 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98909 "powerpc.tcc"
				)
				{
#line 558 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32LoadByteReverse(rd, ea); // 32-bit load/byte reverse/no signe extend
					}
#line 98919 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98927 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98931 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98935 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98939 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98942 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98946 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98949 "powerpc.tcc"
				)
				{
#line 564 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98961 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98969 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98976 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98981 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98989 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98996 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99014 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99021 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99039 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99046 "powerpc.tcc"
				>::initialize_function()
				{
#line 330 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 99051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99059 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99066 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99071 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 99078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99081 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99088 "powerpc.tcc"
				>::initialize_operands()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99097 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99105 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99109 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99113 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99117 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99120 "powerpc.tcc"
				)
				{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 99125 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99133 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99137 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99141 "powerpc.tcc"
				>::memory_access_size()
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 99146 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99155 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99160 "powerpc.tcc"
				> *DecodeOpLwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99166 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99176 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99180 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99184 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99188 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99191 "powerpc.tcc"
				)
				{
#line 574 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16StoreByteReverse(rs, ea); // 16-bit load/byte reverse
					}
#line 99201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99209 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99213 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99217 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99221 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99224 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99228 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99231 "powerpc.tcc"
				)
				{
#line 580 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99243 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99251 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99258 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99263 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99271 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99278 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 99285 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99293 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99300 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99310 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99318 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99325 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99335 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99343 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99350 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99360 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99368 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99375 "powerpc.tcc"
				>::initialize_function()
				{
#line 331 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 99380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99388 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99395 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99408 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99415 "powerpc.tcc"
				>::initialize_operands()
				{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99424 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99432 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99436 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99440 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99444 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99447 "powerpc.tcc"
				)
				{
#line 118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 99452 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99457 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99460 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99464 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99468 "powerpc.tcc"
				>::memory_access_size()
				{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 99473 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99482 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99487 "powerpc.tcc"
				> *DecodeOpSthbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99493 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99503 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99507 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99511 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99515 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99518 "powerpc.tcc"
				)
				{
#line 590 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32StoreByteReverse(rs, ea); // 32-bit load/byte reverse
					}
#line 99528 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99536 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99540 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99544 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99548 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99551 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99555 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99558 "powerpc.tcc"
				)
				{
#line 596 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99578 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99585 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99598 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99605 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 99612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99620 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99627 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99637 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99645 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99652 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99670 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99677 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99695 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99702 "powerpc.tcc"
				>::initialize_function()
				{
#line 332 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 99707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99715 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99722 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99727 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99735 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99742 "powerpc.tcc"
				>::initialize_operands()
				{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99759 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99763 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99767 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99771 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99774 "powerpc.tcc"
				)
				{
#line 119 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 99779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99787 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99791 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99795 "powerpc.tcc"
				>::memory_access_size()
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 99800 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99809 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99814 "powerpc.tcc"
				> *DecodeOpStwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99820 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE STRING INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 99832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99835 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99839 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99843 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99847 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99850 "powerpc.tcc"
				)
				{
#line 612 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = nb ? nb : 32;
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 99874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99882 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99886 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99890 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99894 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99897 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99901 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99904 "powerpc.tcc"
				)
				{
#line 632 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswi r" << rd << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99924 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99931 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99936 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99944 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99951 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99961 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99969 "powerpc.tcc"
				>
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 99973 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99977 "powerpc.tcc"
				>::resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 99981 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 99984 "powerpc.tcc"
				,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 99988 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 99991 "powerpc.tcc"
				)
				{
#line 511 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;
					}
#line 100012 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100020 "powerpc.tcc"
				>
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100024 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100028 "powerpc.tcc"
				>::uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100032 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100035 "powerpc.tcc"
				,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100039 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100042 "powerpc.tcc"
				)
				{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = (nb ? nb : 32) - (uop_num * 4);
						unsigned int r = (rd + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntLoadMSBFirst(r, ea, sz);
					}
#line 100060 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100068 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100075 "powerpc.tcc"
				>::initialize_function()
				{
#line 334 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadStringImm; }
#line 100080 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100088 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100095 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100100 "powerpc.tcc"
				}
				// --- Load & Store string ----------------------------------------------------
				/*

				lswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				lswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				*/
				template <
#line 38 "ppc.isa"
				class
#line 100153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100156 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100163 "powerpc.tcc"
				>::initialize_operands()
				{
#line 923 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra); // target address
						INPUT(GPR_T, rd);
						INPUT(IMM_T, nb);
					}
#line 100172 "powerpc.tcc"
				}
				//Load string
				template <
#line 38 "ppc.isa"
				class
#line 100178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100181 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100185 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100189 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100193 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100196 "powerpc.tcc"
				)
				{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 100201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100209 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100213 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100217 "powerpc.tcc"
				>::memory_access_size()
				{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 100222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100230 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100234 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100238 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100242 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100245 "powerpc.tcc"
				)
				{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 100250 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100259 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100264 "powerpc.tcc"
				> *DecodeOpLswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 100270 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100280 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 100284 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100288 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 100292 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 100295 "powerpc.tcc"
				)
				{
#line 642 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 100321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100329 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 100333 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100337 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 100341 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 100344 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 100348 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 100351 "powerpc.tcc"
				)
				{
#line 664 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 100363 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100371 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100378 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 100383 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100391 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100398 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100408 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100416 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100423 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100433 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100441 "powerpc.tcc"
				>
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100445 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100449 "powerpc.tcc"
				>::resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100453 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100456 "powerpc.tcc"
				,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100460 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100463 "powerpc.tcc"
				)
				{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						Operation<CONFIG>::num_uops = (n + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

					}
#line 100491 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100499 "powerpc.tcc"
				>
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100503 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100507 "powerpc.tcc"
				>::uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100511 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100514 "powerpc.tcc"
				,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100518 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100521 "powerpc.tcc"
				)
				{
#line 613 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
						unsigned int r = (rd + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntLoadMSBFirst(r, ea, sz);
					}
#line 100541 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100549 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100556 "powerpc.tcc"
				>::initialize_function()
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadString; }
#line 100561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100569 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100576 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100589 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100596 "powerpc.tcc"
				>::initialize_operands()
				{
#line 935 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 100605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100613 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100617 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100621 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100625 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100628 "powerpc.tcc"
				)
				{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 100633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100641 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100645 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100649 "powerpc.tcc"
				>::memory_access_size()
				{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 100654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100662 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100666 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100670 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100674 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100677 "powerpc.tcc"
				)
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 100682 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100691 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100696 "powerpc.tcc"
				> *DecodeOpLswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 100702 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100712 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 100716 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100720 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 100724 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 100727 "powerpc.tcc"
				)
				{
#line 674 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = nb ? nb : 32;
						unsigned int r = rs;
						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 100747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100755 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 100759 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100763 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 100767 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 100770 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 100774 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 100777 "powerpc.tcc"
				)
				{
#line 690 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswi r" << rs << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 100789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100797 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100804 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 100809 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100817 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100824 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 100831 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100839 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100846 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100856 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100864 "powerpc.tcc"
				>
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100868 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100872 "powerpc.tcc"
				>::resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100876 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100879 "powerpc.tcc"
				,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100883 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100886 "powerpc.tcc"
				)
				{
#line 554 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

					}
#line 100908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100916 "powerpc.tcc"
				>
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100920 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100924 "powerpc.tcc"
				>::uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100928 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100931 "powerpc.tcc"
				,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100935 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100938 "powerpc.tcc"
				)
				{
#line 630 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = (nb ? nb : 32) - (uop_num * 4);
						unsigned int r = (rs + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntStoreMSBFirst(r, ea, sz);
					}
#line 100953 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100958 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100961 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100968 "powerpc.tcc"
				>::initialize_function()
				{
#line 336 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreStringImm; }
#line 100973 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100981 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100988 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100993 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101001 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101008 "powerpc.tcc"
				>::initialize_operands()
				{
#line 929 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(IMM_T, nb);
					}
#line 101017 "powerpc.tcc"
				}
				//Store string
				template <
#line 38 "ppc.isa"
				class
#line 101023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101026 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101030 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101034 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101038 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101041 "powerpc.tcc"
				)
				{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 101046 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101054 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101058 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101062 "powerpc.tcc"
				>::memory_access_size()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101075 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101079 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101083 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101087 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101090 "powerpc.tcc"
				)
				{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 101095 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101104 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101109 "powerpc.tcc"
				> *DecodeOpStswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 101115 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101125 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101129 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101133 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101137 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101140 "powerpc.tcc"
				)
				{
#line 700 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						unsigned int r = rs;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 101162 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101170 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101174 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101178 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101182 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101185 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101189 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101192 "powerpc.tcc"
				)
				{
#line 718 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101212 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101219 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 101224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101232 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101239 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 101246 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101254 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101261 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101279 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101286 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101296 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101304 "powerpc.tcc"
				>
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101308 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101312 "powerpc.tcc"
				>::resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101316 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101319 "powerpc.tcc"
				,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101323 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101326 "powerpc.tcc"
				)
				{
#line 573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						Operation<CONFIG>::num_uops = (n + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

					}
#line 101354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101362 "powerpc.tcc"
				>
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101366 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101370 "powerpc.tcc"
				>::uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101374 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101377 "powerpc.tcc"
				,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101381 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101384 "powerpc.tcc"
				)
				{
#line 642 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
						unsigned int r = (rs + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntStoreMSBFirst(r, ea, sz);
					}
#line 101400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101408 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101415 "powerpc.tcc"
				>::initialize_function()
				{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreString; }
#line 101420 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101428 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101435 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 101440 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101448 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101455 "powerpc.tcc"
				>::initialize_operands()
				{
#line 941 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 101464 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101472 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101476 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101480 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101484 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101487 "powerpc.tcc"
				)
				{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 101492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101500 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101504 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101508 "powerpc.tcc"
				>::memory_access_size()
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101521 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101525 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101529 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101533 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101536 "powerpc.tcc"
				)
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 101541 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101550 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101555 "powerpc.tcc"
				> *DecodeOpStswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 101561 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE MULTIPLE INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 101573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101576 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101580 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101584 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101588 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101591 "powerpc.tcc"
				)
				{
#line 734 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;
						for(r = rd; r < 32; r++)
						{
							cpu->Int32Load(r, ea);
							ea = ea + 4;
						}
					}
#line 101608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101616 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101620 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101624 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101628 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101631 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101635 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101638 "powerpc.tcc"
				)
				{
#line 747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lmw r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101650 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101658 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101665 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 101670 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101678 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101685 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101695 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101703 "powerpc.tcc"
				>
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101707 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101711 "powerpc.tcc"
				>::resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101715 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101718 "powerpc.tcc"
				,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101722 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101725 "powerpc.tcc"
				)
				{
#line 474 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = 32 - rd;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

					}
#line 101747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101755 "powerpc.tcc"
				>
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101759 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101763 "powerpc.tcc"
				>::uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101767 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101770 "powerpc.tcc"
				,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101774 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101777 "powerpc.tcc"
				)
				{
#line 655 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r = rd + uop_num;
						cpu->Int32Load(r, ea);
					}
#line 101790 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101798 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101805 "powerpc.tcc"
				>::initialize_function()
				{
#line 333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadMultiple; }
#line 101810 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101815 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101818 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101825 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 101830 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101838 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101845 "powerpc.tcc"
				>::initialize_operands()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rd; i<32; i++)
						{ OUTPUT(GPR_T, i);
						}
					}
#line 101855 "powerpc.tcc"
				}
				//Load multiple
				template <
#line 38 "ppc.isa"
				class
#line 101861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101864 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101868 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101872 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101876 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101879 "powerpc.tcc"
				)
				{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 101884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101892 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101896 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101900 "powerpc.tcc"
				>::memory_access_size()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101905 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101914 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101919 "powerpc.tcc"
				> *DecodeOpLmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 101925 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101935 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101939 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 101943 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101947 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101950 "powerpc.tcc"
				)
				{
#line 757 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;

						for(r = rs; r < 32; r++)
						{
							cpu->Int32Store(r, ea);
							ea = ea + 4;
						}
					}
#line 101967 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101975 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101979 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 101983 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101987 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101990 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101994 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101997 "powerpc.tcc"
				)
				{
#line 770 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stmw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102009 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102017 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102024 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102029 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102037 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102044 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 102051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102059 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102066 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102084 "powerpc.tcc"
				>
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 102088 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102092 "powerpc.tcc"
				>::resolve(
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 102096 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 102099 "powerpc.tcc"
				,
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 102103 "powerpc.tcc"
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 102106 "powerpc.tcc"
				)
				{
#line 493 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = 32 - rs;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;
					}
#line 102127 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102135 "powerpc.tcc"
				>
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 102139 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102143 "powerpc.tcc"
				>::uop_execute(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 102147 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 102150 "powerpc.tcc"
				,
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 102154 "powerpc.tcc"
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 102157 "powerpc.tcc"
				)
				{
#line 665 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r = rs + uop_num;
						cpu->Int32Store(r, ea);
					}
#line 102169 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102177 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102184 "powerpc.tcc"
				>::initialize_function()
				{
#line 338 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreMultiple; }
#line 102189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102197 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102204 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 102209 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102217 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102224 "powerpc.tcc"
				>::initialize_operands()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rs; i<32; i++)
						{ INPUT(GPR_T, i);
						}
					}
#line 102234 "powerpc.tcc"
				}
				//Store multiple
				template <
#line 38 "ppc.isa"
				class
#line 102240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102243 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102247 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102251 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102255 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102258 "powerpc.tcc"
				)
				{
#line 121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 102263 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102271 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102275 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102279 "powerpc.tcc"
				>::memory_access_size()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 102284 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102293 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102298 "powerpc.tcc"
				> *DecodeOpStmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 102304 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************

				FLOATING POINT LOAD INSTRUCTIONS

				**********************************/
				template <
#line 38 "ppc.isa"
				class
#line 102316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102319 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 102323 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102327 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 102331 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 102334 "powerpc.tcc"
				)
				{
#line 786 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// check if FPU is available
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 102356 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102364 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 102368 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102372 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 102376 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 102379 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 102383 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 102386 "powerpc.tcc"
				)
				{
#line 804 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfd f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102398 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102406 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102413 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102418 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102426 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102433 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102443 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102451 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102458 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102476 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102483 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102500 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102507 "powerpc.tcc"
				>::initialize_function()
				{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 102512 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102520 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102527 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 102532 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102540 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102547 "powerpc.tcc"
				>::initialize_operands()
				{
#line 289 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 102555 "powerpc.tcc"
				}
				//Load float
				template <
#line 38 "ppc.isa"
				class
#line 102561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102564 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102568 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102572 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102576 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102579 "powerpc.tcc"
				)
				{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 102584 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102592 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102596 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102600 "powerpc.tcc"
				>::memory_access_size()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 102605 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102614 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102619 "powerpc.tcc"
				> *DecodeOpLfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 102625 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102635 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 102639 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102643 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 102647 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 102650 "powerpc.tcc"
				)
				{
#line 814 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 102674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102682 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 102686 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102690 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 102694 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 102697 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 102701 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 102704 "powerpc.tcc"
				)
				{
#line 834 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102716 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102724 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102731 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102744 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102751 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102769 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102776 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102786 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102794 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102801 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102811 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102819 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102826 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102835 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102840 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102843 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102850 "powerpc.tcc"
				>::initialize_function()
				{
#line 340 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 102855 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102860 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102863 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102870 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 102875 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102883 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102890 "powerpc.tcc"
				>::initialize_operands()
				{
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 102898 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102906 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102910 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102914 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102918 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102921 "powerpc.tcc"
				)
				{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 102926 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102934 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102938 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102942 "powerpc.tcc"
				>::memory_access_size()
				{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 102947 "powerpc.tcc"
				}
				// Floating point LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 102953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102956 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 102960 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102964 "powerpc.tcc"
				>::is_splitted()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 102971 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102979 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 102983 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102987 "powerpc.tcc"
				>::split_into()
				{
#line 552 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfd_ctype=0;
						lfd_ctype = 50 << 26;
						lfd_ctype = lfd_ctype | (fd << 21);
						lfd_ctype = lfd_ctype | (ra << 16);
						lfd_ctype = lfd_ctype | (d & 0xffff);
						l.push_back( new OpLfd<CONFIG>(lfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 103008 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103017 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103022 "powerpc.tcc"
				> *DecodeOpLfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 103028 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103038 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103042 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103046 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103050 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103053 "powerpc.tcc"
				)
				{
#line 844 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 103076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103084 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103088 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103092 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103096 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103099 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103103 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103106 "powerpc.tcc"
				)
				{
#line 863 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103126 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103133 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103138 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103146 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103153 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103163 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103168 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103171 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103178 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103196 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103203 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103213 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103218 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103221 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103228 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103246 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103253 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103270 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103277 "powerpc.tcc"
				>::initialize_function()
				{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103290 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103297 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 103302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103310 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103317 "powerpc.tcc"
				>::initialize_operands()
				{
#line 515 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 103326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103334 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103338 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103342 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 103346 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 103349 "powerpc.tcc"
				)
				{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 103354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103362 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103366 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103370 "powerpc.tcc"
				>::memory_access_size()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 103375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103383 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 103387 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103391 "powerpc.tcc"
				>::is_splitted()
				{
#line 570 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 103398 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103406 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 103410 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103414 "powerpc.tcc"
				>::split_into()
				{
#line 573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfdx_ctype=0;
						lfdx_ctype = 50 << 26;
						lfdx_ctype = lfdx_ctype | (fd << 21);
						lfdx_ctype = lfdx_ctype | (ra << 16);
						lfdx_ctype = lfdx_ctype | (rb << 11);
						lfdx_ctype = lfdx_ctype | (599 << 1);
						l.push_back( new OpLfdx<CONFIG>(lfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 103437 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103446 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103451 "powerpc.tcc"
				> *DecodeOpLfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 103457 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103467 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103471 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103475 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103479 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103482 "powerpc.tcc"
				)
				{
#line 873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 103504 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103512 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103516 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103520 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103524 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103527 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103531 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103534 "powerpc.tcc"
				)
				{
#line 891 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103546 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103554 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103561 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103566 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103574 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103581 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103591 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103599 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103606 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103616 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103624 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103631 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103641 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103649 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103656 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103665 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103673 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103680 "powerpc.tcc"
				>::initialize_function()
				{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103685 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103693 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103700 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 103705 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103713 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103720 "powerpc.tcc"
				>::initialize_operands()
				{
#line 508 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 103729 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103737 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103741 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103745 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 103749 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 103752 "powerpc.tcc"
				)
				{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 103757 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103765 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103769 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103773 "powerpc.tcc"
				>::memory_access_size()
				{
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 103778 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103787 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103792 "powerpc.tcc"
				> *DecodeOpLfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 103798 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103808 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103812 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103816 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103820 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103823 "powerpc.tcc"
				)
				{
#line 901 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 103845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103853 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103857 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103861 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103865 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103868 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103872 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103875 "powerpc.tcc"
				)
				{
#line 919 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfs f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103887 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103895 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103902 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103907 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103912 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103915 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103922 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103932 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103940 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103947 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103957 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103962 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103965 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103972 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103981 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103989 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103996 "powerpc.tcc"
				>::initialize_function()
				{
#line 343 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104009 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104016 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104021 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104029 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104036 "powerpc.tcc"
				>::initialize_operands()
				{
#line 289 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 104044 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104052 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104056 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104060 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104064 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104067 "powerpc.tcc"
				)
				{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104072 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104080 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104084 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104088 "powerpc.tcc"
				>::memory_access_size()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104101 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104105 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104109 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 775 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104114 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104120 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104123 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104128 "powerpc.tcc"
				> *DecodeOpLfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 104134 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104144 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104148 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104152 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104156 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104159 "powerpc.tcc"
				)
				{
#line 929 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}
						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 104183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104191 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 104195 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104199 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 104203 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 104206 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 104210 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 104213 "powerpc.tcc"
				)
				{
#line 949 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 104225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104233 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104240 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 104245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104253 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104260 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104270 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104278 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104285 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104303 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104310 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104328 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104335 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104344 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104352 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104359 "powerpc.tcc"
				>::initialize_function()
				{
#line 344 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104372 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104379 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104384 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104389 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104392 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104399 "powerpc.tcc"
				>::initialize_operands()
				{
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 104407 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104415 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104419 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104423 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104427 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104430 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104443 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104447 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104451 "powerpc.tcc"
				>::memory_access_size()
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104456 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104464 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104468 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104472 "powerpc.tcc"
				>::is_splitted()
				{
#line 593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 104479 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104487 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 104491 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104495 "powerpc.tcc"
				>::split_into()
				{
#line 596 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfs_ctype=0;
						lfs_ctype = 50 << 26;
						lfs_ctype = lfs_ctype | (fd << 21);
						lfs_ctype = lfs_ctype | (ra << 16);
						lfs_ctype = lfs_ctype | (d & 0xffff);
						l.push_back( new OpLfs<CONFIG>(lfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 104516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104524 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104528 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104532 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 776 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104537 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104546 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104551 "powerpc.tcc"
				> *DecodeOpLfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 104557 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104567 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104571 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104575 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104579 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104582 "powerpc.tcc"
				)
				{
#line 959 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 104606 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104614 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 104618 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104622 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 104626 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 104629 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 104633 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 104636 "powerpc.tcc"
				)
				{
#line 979 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 104648 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104656 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104663 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 104668 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104676 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104683 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104693 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104701 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104708 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104726 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104733 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104743 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104748 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104751 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104758 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104768 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104776 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104783 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104800 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104807 "powerpc.tcc"
				>::initialize_function()
				{
#line 345 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104812 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104820 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104827 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104832 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104840 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104844 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104848 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104852 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104855 "powerpc.tcc"
				)
				{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104868 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104872 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104876 "powerpc.tcc"
				>::memory_access_size()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104881 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104889 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104893 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104897 "powerpc.tcc"
				>::is_splitted()
				{
#line 614 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 104904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104912 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 104916 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104920 "powerpc.tcc"
				>::split_into()
				{
#line 617 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfsx_ctype=0;
						lfsx_ctype = 50 << 26;
						lfsx_ctype = lfsx_ctype | (fd << 21);
						lfsx_ctype = lfsx_ctype | (ra << 16);
						lfsx_ctype = lfsx_ctype | (rb << 11);
						lfsx_ctype = lfsx_ctype | (535 << 1);
						l.push_back( new OpLfsx<CONFIG>(lfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 104943 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104951 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104955 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104959 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 777 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104964 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104973 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104978 "powerpc.tcc"
				> *DecodeOpLfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 104984 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104994 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104998 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105002 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105006 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105009 "powerpc.tcc"
				)
				{
#line 989 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 105031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105039 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105043 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105047 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105051 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105054 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105058 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105061 "powerpc.tcc"
				)
				{
#line 1007 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105073 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105081 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105088 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105101 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105108 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105126 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105133 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105143 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105151 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105158 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105176 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105183 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105200 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105207 "powerpc.tcc"
				>::initialize_function()
				{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 105212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105220 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105227 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105232 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105240 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105247 "powerpc.tcc"
				>::initialize_operands()
				{
#line 508 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 105256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105264 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105268 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105272 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105276 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105279 "powerpc.tcc"
				)
				{
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 105284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105292 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105296 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105300 "powerpc.tcc"
				>::memory_access_size()
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 105305 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105313 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 105317 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105321 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 778 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 105326 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 105332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105335 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105340 "powerpc.tcc"
				> *DecodeOpLfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 105346 "powerpc.tcc"
					>(code, addr);
				}

				/***********************************

				FLOATING POINT STORE INSTRUCTIONS

				***********************************/
				template <
#line 38 "ppc.isa"
				class
#line 105358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105361 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 105365 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105369 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105373 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105376 "powerpc.tcc"
				)
				{
#line 1023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 105397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105405 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105409 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105413 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105417 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105420 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105424 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105427 "powerpc.tcc"
				)
				{
#line 1040 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfd f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105439 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105447 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105454 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105459 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105467 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105474 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 105481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105489 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105496 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105514 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105521 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105531 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105536 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105539 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105546 "powerpc.tcc"
				>::initialize_function()
				{
#line 347 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 105551 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105559 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105566 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105571 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105579 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105586 "powerpc.tcc"
				>::initialize_operands()
				{
#line 360 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 105594 "powerpc.tcc"
				}
				//Store float
				template <
#line 38 "ppc.isa"
				class
#line 105600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105603 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105607 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105611 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105615 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105618 "powerpc.tcc"
				)
				{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 105623 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105631 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105635 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105639 "powerpc.tcc"
				>::memory_access_size()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 105644 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 105650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105653 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105658 "powerpc.tcc"
				> *DecodeOpStfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 105664 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105674 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 105678 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105682 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105686 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105689 "powerpc.tcc"
				)
				{
#line 1050 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 105713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105721 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105725 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105729 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105733 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105736 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105740 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105743 "powerpc.tcc"
				)
				{
#line 1070 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105755 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105763 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105770 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105775 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105783 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105790 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 105797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105805 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105812 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105822 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105827 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105830 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105837 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105855 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105862 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105880 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105887 "powerpc.tcc"
				>::initialize_function()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 105892 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105900 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105907 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105912 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105920 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105927 "powerpc.tcc"
				>::initialize_operands()
				{
#line 366 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 105935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105943 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105947 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105951 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105955 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105958 "powerpc.tcc"
				)
				{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 105963 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105971 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105975 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105979 "powerpc.tcc"
				>::memory_access_size()
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 105984 "powerpc.tcc"
				}
				// Floating point stores with update
				template <
#line 38 "ppc.isa"
				class
#line 105990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105993 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 105997 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 106001 "powerpc.tcc"
				>::is_splitted()
				{
#line 638 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 106008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106016 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 106020 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 106024 "powerpc.tcc"
				>::split_into()
				{
#line 641 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfd_ctype=0;
						stfd_ctype = 54 << 26;
						stfd_ctype = stfd_ctype | (fs << 21);
						stfd_ctype = stfd_ctype | (ra << 16);
						stfd_ctype = stfd_ctype | (d & 0xffff);
						l.push_back( new OpStfd<CONFIG>(stfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 106045 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106054 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106059 "powerpc.tcc"
				> *DecodeOpStfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 106065 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106075 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106079 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106083 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106087 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106090 "powerpc.tcc"
				)
				{
#line 1080 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 106114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106122 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106126 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106130 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106134 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106137 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106141 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106144 "powerpc.tcc"
				)
				{
#line 1100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106164 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106171 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106184 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106191 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106198 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106203 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106206 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106213 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106223 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106231 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106238 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106248 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106256 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106263 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106281 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106288 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106298 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106306 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106313 "powerpc.tcc"
				>::initialize_function()
				{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 106318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106326 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106333 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 106338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106346 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106353 "powerpc.tcc"
				>::initialize_operands()
				{
#line 435 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 106362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106370 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106374 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106378 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 106382 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 106385 "powerpc.tcc"
				)
				{
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 106390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106398 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106402 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106406 "powerpc.tcc"
				>::memory_access_size()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 106411 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106419 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 106423 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106427 "powerpc.tcc"
				>::is_splitted()
				{
#line 659 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 106434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106442 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 106446 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106450 "powerpc.tcc"
				>::split_into()
				{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfdx_ctype=0;
						stfdx_ctype = 31 << 26;
						stfdx_ctype = stfdx_ctype | (fs << 21);
						stfdx_ctype = stfdx_ctype | (ra << 16);
						stfdx_ctype = stfdx_ctype | (rb << 11);
						stfdx_ctype = stfdx_ctype | (727 << 1);
						l.push_back( new OpStfdx<CONFIG>(stfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 106473 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106482 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106487 "powerpc.tcc"
				> *DecodeOpStfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 106493 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106503 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106507 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106511 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106515 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106518 "powerpc.tcc"
				)
				{
#line 1110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 106538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106546 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106550 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106554 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106558 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106561 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106565 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106568 "powerpc.tcc"
				)
				{
#line 1126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106580 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106588 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106595 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106608 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106615 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106622 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106627 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106630 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106637 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106647 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106655 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106662 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106672 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106680 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106687 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106705 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106712 "powerpc.tcc"
				>::initialize_function()
				{
#line 350 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 106717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106725 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106732 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 106737 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106745 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106752 "powerpc.tcc"
				>::initialize_operands()
				{
#line 428 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 106761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106769 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106773 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106777 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 106781 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 106784 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 106789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106797 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106801 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106805 "powerpc.tcc"
				>::memory_access_size()
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 106810 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106819 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106824 "powerpc.tcc"
				> *DecodeOpStfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 106830 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106840 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106844 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106848 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106852 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106855 "powerpc.tcc"
				)
				{
#line 1136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->FpStoreLSW(fs, ea);
					}
#line 106875 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106883 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106887 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106891 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106895 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106898 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106902 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106905 "powerpc.tcc"
				)
				{
#line 1152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfiwx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106925 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106932 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106937 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106945 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106952 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106959 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106967 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106974 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106984 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106992 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106999 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107009 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107017 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107024 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107042 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107049 "powerpc.tcc"
				>::initialize_function()
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107062 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107069 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107082 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107089 "powerpc.tcc"
				>::initialize_operands()
				{
#line 428 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 107098 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107106 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107110 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107114 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107118 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107121 "powerpc.tcc"
				)
				{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107126 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107131 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107134 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107138 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107142 "powerpc.tcc"
				>::memory_access_size()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107147 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107156 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107161 "powerpc.tcc"
				> *DecodeOpStfiwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 107167 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107177 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107181 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107185 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107189 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107192 "powerpc.tcc"
				)
				{
#line 1162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 107211 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107219 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 107223 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107227 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 107231 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 107234 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 107238 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 107241 "powerpc.tcc"
				)
				{
#line 1177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfs f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 107253 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107261 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107268 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 107273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107281 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107288 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 107295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107303 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107310 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107328 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107335 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107353 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107360 "powerpc.tcc"
				>::initialize_function()
				{
#line 352 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107373 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107380 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107385 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107393 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107400 "powerpc.tcc"
				>::initialize_operands()
				{
#line 360 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 107408 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107416 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107420 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107424 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107428 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107431 "powerpc.tcc"
				)
				{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107436 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107444 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107448 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107452 "powerpc.tcc"
				>::memory_access_size()
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107465 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 107469 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107473 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107477 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107480 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 107490 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107498 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107502 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107506 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 763 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 107511 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107520 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107525 "powerpc.tcc"
				> *DecodeOpStfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 107531 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107538 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107541 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107545 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107549 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107553 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107556 "powerpc.tcc"
				)
				{
#line 1187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 107579 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107587 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 107591 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107595 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 107599 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 107602 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 107606 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 107609 "powerpc.tcc"
				)
				{
#line 1206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 107621 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107629 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107636 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 107641 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107649 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107656 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 107663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107671 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107678 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107688 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107696 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107703 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107721 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107728 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107746 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107753 "powerpc.tcc"
				>::initialize_function()
				{
#line 353 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107758 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107766 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107773 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107778 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107786 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107793 "powerpc.tcc"
				>::initialize_operands()
				{
#line 366 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 107801 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107809 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107813 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107817 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107821 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107824 "powerpc.tcc"
				)
				{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107837 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107841 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107845 "powerpc.tcc"
				>::memory_access_size()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107858 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107862 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107866 "powerpc.tcc"
				>::is_splitted()
				{
#line 682 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 107873 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107881 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 107885 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107889 "powerpc.tcc"
				>::split_into()
				{
#line 685 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfs_ctype=0;
						stfs_ctype = 52 << 26;
						stfs_ctype = stfs_ctype | (fs << 21);
						stfs_ctype = stfs_ctype | (ra << 16);
						stfs_ctype = stfs_ctype | (d & 0xffff);
						l.push_back( new OpStfs<CONFIG>(stfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 107910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107918 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 107922 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107926 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107930 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107933 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 107943 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107951 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107955 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107959 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 764 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 107964 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107973 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107978 "powerpc.tcc"
				> *DecodeOpStfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 107984 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107994 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107998 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108002 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108006 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108009 "powerpc.tcc"
				)
				{
#line 1216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 108032 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108040 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108044 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108048 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108052 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108055 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108059 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108062 "powerpc.tcc"
				)
				{
#line 1235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 108074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108082 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108089 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108102 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108109 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108124 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108131 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108149 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108156 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108166 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108174 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108181 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108191 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108199 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108206 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108224 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108231 "powerpc.tcc"
				>::initialize_function()
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 108236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108244 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108251 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 228 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 108256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108264 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108271 "powerpc.tcc"
				>::initialize_operands()
				{
#line 435 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 108280 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108288 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108292 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108296 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108300 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108303 "powerpc.tcc"
				)
				{
#line 133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 108308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108316 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108320 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108324 "powerpc.tcc"
				>::memory_access_size()
				{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 108329 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108337 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108341 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108345 "powerpc.tcc"
				>::is_splitted()
				{
#line 703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 108352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108360 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 108364 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108368 "powerpc.tcc"
				>::split_into()
				{
#line 706 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfsx_ctype=0;
						stfsx_ctype = 31 << 26;
						stfsx_ctype = stfsx_ctype | (fs << 21);
						stfsx_ctype = stfsx_ctype | (ra << 16);
						stfsx_ctype = stfsx_ctype | (rb << 11);
						stfsx_ctype = stfsx_ctype | (663 << 1);
						l.push_back( new OpStfsx<CONFIG>(stfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 108391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108399 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 108403 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108407 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108411 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108414 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 108424 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108432 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108436 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108440 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 765 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 108445 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 108451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108454 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108459 "powerpc.tcc"
				> *DecodeOpStfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 108465 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108475 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 108479 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108483 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108487 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108490 "powerpc.tcc"
				)
				{
#line 1245 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 108510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108518 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108522 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108526 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108530 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108533 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108537 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108540 "powerpc.tcc"
				)
				{
#line 1261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 108552 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108560 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108567 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108572 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108580 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108587 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108594 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108602 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108609 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108627 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108634 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108644 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108652 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108659 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108677 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108684 "powerpc.tcc"
				>::initialize_function()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 108689 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108697 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108704 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 108709 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108717 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108724 "powerpc.tcc"
				>::initialize_operands()
				{
#line 428 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 108733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108741 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108745 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108749 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108753 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108756 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 108761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108769 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108773 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108777 "powerpc.tcc"
				>::memory_access_size()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 108782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108790 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 108794 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108798 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108802 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108805 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 108815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108823 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108827 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108831 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 766 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 108836 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 108842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108845 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108850 "powerpc.tcc"
				> *DecodeOpStfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 108856 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************

				CACHE MANAGEMENT INSTRUCTIONS

				*********************************/
				template <
#line 38 "ppc.isa"
				class
#line 108868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108871 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 108875 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108879 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108883 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108886 "powerpc.tcc"
				)
				{
#line 1277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcba(ea);
					}
#line 108895 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108903 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108907 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108911 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108915 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108918 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108922 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108925 "powerpc.tcc"
				)
				{
#line 1282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcba r" << ra << ", r" << rb;
					}
#line 108932 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108940 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108947 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108952 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108960 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108967 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108982 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108989 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109007 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109014 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109024 "powerpc.tcc"
				}
				/** Load Store (FnLoad | FnLoadFloat | FnLoadMultiple | FnLoadSerial | FnStore | FnStoreFloat | FnStoreMultiple | FnStoreSerial | FnCache | FnCacheSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 109030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109033 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109040 "powerpc.tcc"
				>::initialize_function()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBA; }
#line 109045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109053 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109060 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 109065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109073 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109080 "powerpc.tcc"
				>::initialize_operands()
				{
#line 782 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109088 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109096 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109100 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109104 "powerpc.tcc"
				>::memory_access_size()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109109 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109118 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109123 "powerpc.tcc"
				> *DecodeOpDcba(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 109129 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109139 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109143 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109147 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109151 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109154 "powerpc.tcc"
				)
				{
#line 1288 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbf(ea);
					}
#line 109163 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109168 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109171 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109175 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109179 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109183 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109186 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109190 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109193 "powerpc.tcc"
				)
				{
#line 1293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbf r" << ra << ", r" << rb;
					}
#line 109200 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109208 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109215 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109220 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109228 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109235 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 109242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109250 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109257 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109267 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109275 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109282 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109292 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109297 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109300 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109307 "powerpc.tcc"
				>::initialize_function()
				{
#line 292 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBF; }
#line 109312 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109317 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109320 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109327 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(8); }
#line 109332 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109340 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109347 "powerpc.tcc"
				>::initialize_operands()
				{
#line 782 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109363 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109367 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109371 "powerpc.tcc"
				>::memory_access_size()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109376 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109385 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109390 "powerpc.tcc"
				> *DecodeOpDcbf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 109396 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109406 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109410 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109414 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109418 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109421 "powerpc.tcc"
				)
				{
#line 1298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						cpu->Dcbi(ea);
					}
#line 109429 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109437 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109441 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109445 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109449 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109452 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109456 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109459 "powerpc.tcc"
				)
				{
#line 1302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbi r" << ra << ", r" << rb;
					}
#line 109466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109474 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109481 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109494 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109501 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109511 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109519 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109526 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109544 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109551 "powerpc.tcc"
				>::initialize_function()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBI; }
#line 109556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109564 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109571 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 232 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(6); }
#line 109576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109584 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109591 "powerpc.tcc"
				>::initialize_operands()
				{
#line 782 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109599 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109607 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109611 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109615 "powerpc.tcc"
				>::memory_access_size()
				{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109620 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109629 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109634 "powerpc.tcc"
				> *DecodeOpDcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 109640 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109650 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109654 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109658 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109662 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109665 "powerpc.tcc"
				)
				{
#line 1307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbst(ea);
					}
#line 109674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109682 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109686 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109690 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109694 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109697 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109701 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109704 "powerpc.tcc"
				)
				{
#line 1312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbst r" << ra << ", r" << rb;
					}
#line 109711 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109719 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109726 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109739 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109746 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 109753 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109761 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109768 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109778 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109786 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109793 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109811 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109818 "powerpc.tcc"
				>::initialize_function()
				{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 109823 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109831 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109838 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 109843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109851 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109858 "powerpc.tcc"
				>::initialize_operands()
				{
#line 782 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109866 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109874 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109878 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109882 "powerpc.tcc"
				>::memory_access_size()
				{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109887 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109896 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109901 "powerpc.tcc"
				> *DecodeOpDcbst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 109907 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109917 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109921 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109925 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109929 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109932 "powerpc.tcc"
				)
				{
#line 1317 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 109939 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109947 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109951 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109955 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109959 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109962 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109966 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109969 "powerpc.tcc"
				)
				{
#line 1320 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbt r" << ra << ", r" << rb;
					}
#line 109976 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109984 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109991 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110004 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110011 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110021 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110029 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110036 "powerpc.tcc"
				>::initialize_function()
				{
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 110041 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110049 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110056 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110069 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110076 "powerpc.tcc"
				>::initialize_operands()
				{
#line 782 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110084 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110092 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110096 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110100 "powerpc.tcc"
				>::memory_access_size()
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110105 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110114 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110119 "powerpc.tcc"
				> *DecodeOpDcbt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 110125 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110135 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110139 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110143 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110147 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110150 "powerpc.tcc"
				)
				{
#line 1325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 110157 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110165 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110169 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110173 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110177 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110180 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110184 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110187 "powerpc.tcc"
				)
				{
#line 1328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbtst r" << ra << ", r" << rb;
					}
#line 110194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110202 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110209 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110222 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110229 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110239 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110247 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110254 "powerpc.tcc"
				>::initialize_function()
				{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 110259 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110267 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110274 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110279 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110284 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110287 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110294 "powerpc.tcc"
				>::initialize_operands()
				{
#line 782 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110310 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110314 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110318 "powerpc.tcc"
				>::memory_access_size()
				{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110323 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110332 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110337 "powerpc.tcc"
				> *DecodeOpDcbtst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 110343 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110353 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110357 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110361 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110365 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110368 "powerpc.tcc"
				)
				{
#line 1333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbz(ea);
					}
#line 110378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110386 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110390 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110394 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110398 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110401 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110405 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110408 "powerpc.tcc"
				)
				{
#line 1339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbz r" << ra << ", r" << rb;
					}
#line 110415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110423 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110430 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110443 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110450 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 110457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110465 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110472 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110490 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110497 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110507 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110515 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110522 "powerpc.tcc"
				>::initialize_function()
				{
#line 297 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 110527 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110535 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110542 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 236 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110547 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110555 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110562 "powerpc.tcc"
				>::initialize_operands()
				{
#line 782 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110578 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110582 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110586 "powerpc.tcc"
				>::memory_access_size()
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110591 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110600 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110605 "powerpc.tcc"
				> *DecodeOpDcbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 110611 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110621 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110625 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110629 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110633 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110636 "powerpc.tcc"
				)
				{
#line 1344 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Icbi(ea);
					}
#line 110645 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110653 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110657 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110661 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110665 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110668 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110672 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110675 "powerpc.tcc"
				)
				{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "icbi r" << ra << ", r" << rb;
					}
#line 110682 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110690 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110697 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110710 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110717 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 110724 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110732 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110739 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110757 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110764 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110774 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110782 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110789 "powerpc.tcc"
				>::initialize_function()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 110794 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110799 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110802 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110809 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110822 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110829 "powerpc.tcc"
				>::initialize_operands()
				{
#line 782 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110837 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110845 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110849 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110853 "powerpc.tcc"
				>::memory_access_size()
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110858 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110867 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110872 "powerpc.tcc"
				> *DecodeOpIcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 110878 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************************

				LOOKASIDE BUFFER MANAGEMENT INSTRUCTIONS

				*********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 110890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110893 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110897 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110901 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110905 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110908 "powerpc.tcc"
				)
				{
#line 1360 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						cpu->Tlbia();
					}
#line 110915 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110923 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110927 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110931 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110935 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110938 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110942 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110945 "powerpc.tcc"
				)
				{
#line 1363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbia"; }
#line 110950 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110958 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110965 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110970 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110978 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110985 "powerpc.tcc"
				>::initialize_function()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 110990 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110998 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111005 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111018 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111025 "powerpc.tcc"
				>::initialize_operands()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 111037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111045 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111049 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111053 "powerpc.tcc"
				>::memory_access_size()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111058 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111067 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111072 "powerpc.tcc"
				> *DecodeOpTlbia(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 111078 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111088 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111092 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111096 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111100 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111103 "powerpc.tcc"
				)
				{
#line 1366 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbie(ea);
					}
#line 111111 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111116 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111119 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111123 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111127 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111131 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111134 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111138 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111141 "powerpc.tcc"
				)
				{
#line 1370 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbie r" << rb;
					}
#line 111148 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111156 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111163 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111176 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111183 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 111190 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111198 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111205 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111223 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111230 "powerpc.tcc"
				>::initialize_function()
				{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 111235 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111243 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111250 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111255 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111263 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111270 "powerpc.tcc"
				>::initialize_operands()
				{
#line 864 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rb);
					}
#line 111277 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111285 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111289 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111293 "powerpc.tcc"
				>::memory_access_size()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111298 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111307 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111312 "powerpc.tcc"
				> *DecodeOpTlbie(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 111318 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111328 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111332 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111336 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111340 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111343 "powerpc.tcc"
				)
				{
#line 1375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* nothing to do */ }
#line 111348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111356 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111360 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111364 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111368 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111371 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111375 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111378 "powerpc.tcc"
				)
				{
#line 1376 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbsync"; }
#line 111383 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111391 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111398 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111403 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111411 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111418 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 111425 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111433 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111440 "powerpc.tcc"
				>::initialize_function()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 111445 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111453 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111460 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111465 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111473 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111480 "powerpc.tcc"
				>::initialize_operands()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 111492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111500 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111504 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111508 "powerpc.tcc"
				>::memory_access_size()
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111513 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111522 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111527 "powerpc.tcc"
				> *DecodeOpTlbsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 111533 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111543 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111547 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111551 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111555 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111558 "powerpc.tcc"
				)
				{
#line 1379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbld(ea);
					}
#line 111566 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111574 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111578 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111582 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111586 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111589 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111593 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111596 "powerpc.tcc"
				)
				{
#line 1383 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbld r" << rb;
					}
#line 111603 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111611 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111618 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111623 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111631 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111638 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 111645 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111653 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111660 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111670 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111679 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111684 "powerpc.tcc"
				> *DecodeOpTlbld(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 111690 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111700 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111704 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111708 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111712 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111715 "powerpc.tcc"
				)
				{
#line 1388 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbli(ea);
					}
#line 111723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111731 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111735 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111739 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111743 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111746 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111750 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111753 "powerpc.tcc"
				)
				{
#line 1392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbli r" << rb;
					}
#line 111760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111768 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111775 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111788 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111795 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 111802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111810 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111817 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111827 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111833 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111836 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111841 "powerpc.tcc"
				> *DecodeOpTlbli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 111847 "powerpc.tcc"
					>(code, addr);
				}

				/********************************

				EXTERNAL CONTROL INSTRUCTIONS

				********************************/
				template <
#line 38 "ppc.isa"
				class
#line 111859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111862 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111866 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111870 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111874 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111877 "powerpc.tcc"
				)
				{
#line 1403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 111884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111892 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111896 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111900 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111904 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111907 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111911 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111914 "powerpc.tcc"
				)
				{
#line 1406 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "eciwx r" << rd << ", r" << ra << ", r" << rb;
					}
#line 111921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111929 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111936 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111949 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111956 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111966 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111974 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111981 "powerpc.tcc"
				>::initialize_function()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 111986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111994 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112001 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112006 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 112013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112016 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112023 "powerpc.tcc"
				>::initialize_operands()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 112032 "powerpc.tcc"
				}
				//Load & Load byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 112038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112041 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112045 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112049 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 112053 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 112056 "powerpc.tcc"
				)
				{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 112061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112069 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112073 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112077 "powerpc.tcc"
				>::memory_access_size()
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112082 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112091 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112096 "powerpc.tcc"
				> *DecodeOpEciwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 112102 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112112 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112116 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112120 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112124 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112127 "powerpc.tcc"
				)
				{
#line 1411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 112134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112142 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112146 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112150 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112154 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112157 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112161 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112164 "powerpc.tcc"
				)
				{
#line 1414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "ecowx r" << rs << ", r" << ra << ", r" << rb;
					}
#line 112171 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112179 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112186 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112191 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112199 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112206 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112224 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112231 "powerpc.tcc"
				>::initialize_function()
				{
#line 299 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 112236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112244 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112251 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112256 "powerpc.tcc"
				}
				//Store & Store byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 112262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112265 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112269 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112273 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 112277 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 112280 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 112285 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112293 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112297 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112301 "powerpc.tcc"
				>::memory_access_size()
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112306 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112315 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112320 "powerpc.tcc"
				> *DecodeOpEcowx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 112326 "powerpc.tcc"
					>(code, addr);
				}

				/***************************************

				MEMORY SYNCHRONIZATION INSTRUCTIONS

				***************************************/
				template <
#line 38 "ppc.isa"
				class
#line 112338 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112341 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112345 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112349 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112353 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112356 "powerpc.tcc"
				)
				{
#line 1425 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* order is always enforced in functional simulation */ }
#line 112361 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112369 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112373 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112377 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112381 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112384 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112388 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112391 "powerpc.tcc"
				)
				{
#line 1426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "eieio"; }
#line 112396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112404 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112411 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112416 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112424 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112431 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 112438 "powerpc.tcc"
				}
				/** System Register (FnSysRegister | FnSysRegisterSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 112444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112447 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112454 "powerpc.tcc"
				>::initialize_function()
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 112459 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112467 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112474 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112479 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112487 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112494 "powerpc.tcc"
				>::initialize_operands()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 112506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112514 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112518 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112522 "powerpc.tcc"
				>::memory_access_size()
				{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112527 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112536 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112541 "powerpc.tcc"
				> *DecodeOpEieio(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 112547 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112557 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112561 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112565 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112569 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112572 "powerpc.tcc"
				)
				{
#line 1429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* order is always enforced in functional simulation */
						/* but we still must flush subsequent instruction in the prefetch buffer, forcing refetch */
						cpu->FlushSubsequentInstructions();
					}
#line 112581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112589 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112593 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112597 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112601 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112604 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112608 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112611 "powerpc.tcc"
				)
				{
#line 1434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "isync"; }
#line 112616 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112624 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112631 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::REFETCH_SERIALIZATION;
					}
#line 112638 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112646 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112653 "powerpc.tcc"
				>::initialize_function()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 112658 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112666 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112673 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 244 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112678 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112683 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112686 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112693 "powerpc.tcc"
				>::initialize_operands()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 112705 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112713 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112717 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112721 "powerpc.tcc"
				>::memory_access_size()
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112726 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112735 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112740 "powerpc.tcc"
				> *DecodeOpIsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 112746 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112756 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112760 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112764 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112768 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112771 "powerpc.tcc"
				)
				{
#line 1437 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Lwarx(rd, ea);
					}
#line 112780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112788 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112792 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112796 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112800 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112803 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112807 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112810 "powerpc.tcc"
				)
				{
#line 1442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwarx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 112822 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112827 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112830 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112837 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112842 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112850 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112857 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 112864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112872 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112879 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112889 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112897 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112904 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112914 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112922 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112929 "powerpc.tcc"
				>::initialize_function()
				{
#line 356 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 112934 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112942 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112949 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 245 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 112954 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 112961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112964 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112971 "powerpc.tcc"
				>::initialize_operands()
				{
#line 444 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 112980 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112985 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112988 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112992 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112996 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 113000 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 113003 "powerpc.tcc"
				)
				{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 113008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113016 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113020 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 113024 "powerpc.tcc"
				>::memory_access_size()
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113029 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113038 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113043 "powerpc.tcc"
				> *DecodeOpLwarx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 113049 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113059 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113063 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113067 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113071 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113074 "powerpc.tcc"
				)
				{
#line 1452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Stwcx(rs, ea);
					}
#line 113083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113091 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113095 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113099 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113103 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113106 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113110 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113113 "powerpc.tcc"
				)
				{
#line 1458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwcx. r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 113125 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113133 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113140 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 113145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113153 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113160 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 113167 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113175 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113182 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113200 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113207 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113217 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113225 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113232 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113250 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113257 "powerpc.tcc"
				>::initialize_function()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreSerial; }
#line 113262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113270 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113277 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 246 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(16); }
#line 113282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113290 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113297 "powerpc.tcc"
				>::initialize_operands()
				{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 113306 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113314 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113318 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113322 "powerpc.tcc"
				>::memory_access_size()
				{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113327 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113336 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113341 "powerpc.tcc"
				> *DecodeOpStwcx_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 113347 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113357 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113361 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113365 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113369 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113372 "powerpc.tcc"
				)
				{
#line 1468 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ cpu->Synchronize(); }
#line 113377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113385 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113389 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113393 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113397 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113400 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113404 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113407 "powerpc.tcc"
				)
				{
#line 1469 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "sync"; }
#line 113412 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113420 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113427 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 113432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113440 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113447 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::STORE_SERIALIZATION);
					}
#line 113454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113462 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113469 "powerpc.tcc"
				>::initialize_function()
				{
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 113474 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113482 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113489 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 113494 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113502 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113509 "powerpc.tcc"
				>::initialize_operands()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113521 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113529 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113533 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113537 "powerpc.tcc"
				>::memory_access_size()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113542 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113551 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113556 "powerpc.tcc"
				> *DecodeOpSync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSync<
#line 38 "ppc.isa"
					CONFIG
#line 113562 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/*************************************

				SYSTEM LINKAGE INSTRUCTIONS

				*************************************/
				template <
#line 38 "ppc.isa"
				class
#line 113607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113610 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113614 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113618 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113622 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113625 "powerpc.tcc"
				)
				{
#line 42 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						throw SystemCallException<CONFIG>();
					}
#line 113633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113641 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113645 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113649 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113653 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113656 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113660 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113663 "powerpc.tcc"
				)
				{
#line 46 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "sc";
					}
#line 113670 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113678 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113685 "powerpc.tcc"
				>::initialize_function()
				{
#line 174 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 113690 "powerpc.tcc"
				}
				/** Misc **/
				template <
#line 38 "ppc.isa"
				class
#line 113696 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113699 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113706 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 250 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 113711 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113719 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113726 "powerpc.tcc"
				>::initialize_operands()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113738 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113747 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113752 "powerpc.tcc"
				> *DecodeOpSc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSc<
#line 38 "ppc.isa"
					CONFIG
#line 113758 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113768 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113772 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113776 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113780 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113783 "powerpc.tcc"
				)
				{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetNIA(cpu->GetSRR0() & 0xfffffffcUL);
						cpu->SetMSR((msr & 0xffff008cUL) | (cpu->GetSRR1() & 0x0000ff73UL));
					}
#line 113795 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113803 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113807 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113811 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113815 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113818 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113822 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113825 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "rfi" << endl;
					}
#line 113832 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113840 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113847 "powerpc.tcc"
				>::initialize_function()
				{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 113852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113860 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113867 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 113872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113880 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113887 "powerpc.tcc"
				>::initialize_operands()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113899 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113908 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113913 "powerpc.tcc"
				> *DecodeOpRfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 113919 "powerpc.tcc"
					>(code, addr);
				}

				/***************************

				TRAP INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 113931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113934 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113938 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 113942 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113946 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113949 "powerpc.tcc"
				)
				{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a, b;
						int trap;
						a = cpu->GetGPR(ra);
						b = cpu->GetGPR(rb);
						trap = 0;
						if(a < b && (to & 16)) trap = 1;
						if(a > b && (to & 8)) trap = 1;
						if(a == b && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) b && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) b && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 113966 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113974 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113978 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 113982 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113986 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113989 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113993 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113996 "powerpc.tcc"
				)
				{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "tw " << to << ", r" << ra << ", r" << rb;
					}
#line 114003 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114011 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114018 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 114023 "powerpc.tcc"
				}
				/*
				tw.initialize_function =      { Operation<CONFIG>::function = FnIntBasicSerial; }
				twi.initialize_function =     { Operation<CONFIG>::function = FnIntBasicSerial; }
				*/
				template <
#line 38 "ppc.isa"
				class
#line 114032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114035 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114042 "powerpc.tcc"
				>::initialize_function()
				{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 114047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114055 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114062 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 114067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114075 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114082 "powerpc.tcc"
				>::initialize_operands()
				{
#line 377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 114090 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114099 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114104 "powerpc.tcc"
				> *DecodeOpTw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTw<
#line 38 "ppc.isa"
					CONFIG
#line 114110 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114120 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114124 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114128 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114132 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114135 "powerpc.tcc"
				)
				{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a;
						int trap;
						a = (int32_t) cpu->GetGPR(ra);
						trap = 0;
						if(a < simm && (to & 16)) trap = 1;
						if(a > simm && (to & 8)) trap = 1;
						if(a == simm && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) simm && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) simm && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 114151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114159 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114163 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114167 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114171 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114174 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114178 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114181 "powerpc.tcc"
				)
				{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "twi " << to << ", r" << ra << ", " << simm;
					}
#line 114188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114196 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114203 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 114208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114216 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114223 "powerpc.tcc"
				>::initialize_function()
				{
#line 250 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 114228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114236 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114243 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 114248 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114256 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114263 "powerpc.tcc"
				>::initialize_operands()
				{
#line 372 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
					}
#line 114270 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114279 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114284 "powerpc.tcc"
				> *DecodeOpTwi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 114290 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************

				PROCESSOR CONTROL INSTRUCTIONS

				******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 114302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114305 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114309 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114313 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114317 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114320 "powerpc.tcc"
				)
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Read XER
						uint32_t xer = cpu->GetXER();

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR[crfD]: CR[crfD]=XER[0-3]
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | ((xer & 0xf0000000UL) >> (4 * crfD));

						// Reset XER[0-3]
						xer = xer & 0x0fffffffUL;

						// Update CR
						cpu->SetCR(cr);

						// Update XER
						cpu->SetXER(xer);
					}
#line 114343 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114351 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114355 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114359 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114363 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114366 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114370 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114373 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mcrxr cr" << crfD;
					}
#line 114380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114388 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114395 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114408 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114415 "powerpc.tcc"
				>::initialize_function()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 114420 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114428 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114435 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114440 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114448 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114455 "powerpc.tcc"
				>::initialize_operands()
				{
#line 788 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(XER_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 114464 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114473 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114478 "powerpc.tcc"
				> *DecodeOpMcrxr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 114484 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114494 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114498 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114502 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114506 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114509 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Move CR to destination GPR
						cpu->SetGPR(rd, cpu->GetCR());
					}
#line 114517 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114525 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114529 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114533 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114537 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114540 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114544 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114547 "powerpc.tcc"
				)
				{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfcr r" << rd;
					}
#line 114554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114562 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114569 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114574 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114582 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114589 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 114596 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114601 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114604 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114611 "powerpc.tcc"
				>::initialize_function()
				{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 114616 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114624 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114631 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114636 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114644 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114651 "powerpc.tcc"
				>::initialize_operands()
				{
#line 619 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);
						OUTPUT(GPR_T, rd);
					}
#line 114666 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114675 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114680 "powerpc.tcc"
				> *DecodeOpMfcr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 114686 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114696 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114700 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114704 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114708 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114711 "powerpc.tcc"
				)
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						// Move MSR to destination GPR
						cpu->SetGPR(rd, msr);
					}
#line 114722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114730 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114734 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114738 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114742 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114745 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114749 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114752 "powerpc.tcc"
				)
				{
#line 150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfmsr r" << rd;
					}
#line 114759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114767 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114774 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114787 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114794 "powerpc.tcc"
				>::initialize_function()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 114799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114807 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114814 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114827 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114834 "powerpc.tcc"
				>::initialize_operands()
				{
#line 614 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 114841 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114850 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114855 "powerpc.tcc"
				> *DecodeOpMfmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 114861 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114871 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114875 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114879 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114883 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114886 "powerpc.tcc"
				)
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetSPR(n);
						cpu->SetGPR(rd, result);
					}
#line 114895 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114903 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114907 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114911 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114915 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114918 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114922 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114925 "powerpc.tcc"
				)
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mfxer r" << rd;
							case 8: os << "mflr r" << rd; return;
							case 9: os << "mfctr r" << rd; return;
							case 22: os << "mfdec r" << rd; return;
							case 528: os << "mfibatu r" << rd << ", 0"; return;
							case 529: os << "mfibatl r" << rd << ", 0"; return;
							case 530: os << "mfibatu r" << rd << ", 1"; return;
							case 531: os << "mfibatl r" << rd << ", 1"; return;
							case 532: os << "mfibatu r" << rd << ", 2"; return;
							case 533: os << "mfibatl r" << rd << ", 2"; return;
							case 534: os << "mfibatu r" << rd << ", 3"; return;
							case 535: os << "mfibatl r" << rd << ", 3"; return;
							case 536: os << "mfdbatu r" << rd << ", 0"; return;
							case 537: os << "mfdbatl r" << rd << ", 0"; return;
							case 538: os << "mfdbatu r" << rd << ", 1"; return;
							case 539: os << "mfdbatl r" << rd << ", 1"; return;
							case 540: os << "mfdbatu r" << rd << ", 2"; return;
							case 541: os << "mfdbatl r" << rd << ", 2"; return;
							case 542: os << "mfdbatu r" << rd << ", 3"; return;
							case 543: os << "mfdbatl r" << rd << ", 3"; return;
							case 560: os << "mfibatu r" << rd << ", 4"; return;
							case 561: os << "mfibatl r" << rd << ", 4"; return;
							case 562: os << "mfibatu r" << rd << ", 5"; return;
							case 563: os << "mfibatl r" << rd << ", 5"; return;
							case 564: os << "mfibatu r" << rd << ", 6"; return;
							case 565: os << "mfibatl r" << rd << ", 6"; return;
							case 566: os << "mfibatu r" << rd << ", 7"; return;
							case 567: os << "mfibatl r" << rd << ", 7"; return;
							case 568: os << "mfdbatu r" << rd << ", 4"; return;
							case 569: os << "mfdbatl r" << rd << ", 4"; return;
							case 570: os << "mfdbatu r" << rd << ", 5"; return;
							case 571: os << "mfdbatl r" << rd << ", 5"; return;
							case 572: os << "mfdbatu r" << rd << ", 6"; return;
							case 573: os << "mfdbatl r" << rd << ", 6"; return;
							case 574: os << "mfdbatu r" << rd << ", 7"; return;
							case 575: os << "mfdbatl r" << rd << ", 7"; return;
						}

						os << "mfspr r" << rd << ", " << n;
					}
#line 114973 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114981 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114988 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114993 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115001 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115008 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 528: // IBAT0U
							case 529: // IBAT0L
							case 530: // IBAT1U
							case 531: // IBAT1L
							case 532: // IBAT2U
							case 533: // IBAT2L
							case 534: // IBAT3U
							case 535: // IBAT3L
							case 560: // IBAT4U
							case 561: // IBAT4L
							case 562: // IBAT5U
							case 563: // IBAT5L
							case 564: // IBAT6U
							case 565: // IBAT6L
							case 566: // IBAT7U
							case 567: // IBAT7L
							Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
							return;
							case 256: // VRSAVE
							Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
							return;
						}

						// mtspr (DBAT, MSS, Time Base, other)
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115042 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115050 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115057 "powerpc.tcc"
				>::initialize_function()
				{
#line 161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 115062 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115070 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115077 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 115082 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115090 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115097 "powerpc.tcc"
				>::initialize_operands()
				{
#line 632 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							INPUT(XER_T,0);
							INPUT(XER_T,1);
							INPUT(XER_T,2);
							INPUT(XER_T,3);
							break;
						case 8:
							INPUT(LR_T,0);
							break;
						case 9:
							INPUT(CTR_T,0);
							/*
							INPUT(CR_T,1);
							INPUT(CR_T,2);
							INPUT(CR_T,3);
							INPUT(CR_T,4);
							INPUT(CR_T,5);
							INPUT(CR_T,6);
							INPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
						OUTPUT(GPR_T, rd);
					}
#line 115131 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115137 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115140 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115145 "powerpc.tcc"
				> *DecodeOpMfspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 115151 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115161 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115165 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115169 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115173 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115176 "powerpc.tcc"
				)
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetGPR(rs);
						cpu->SetSPR(n, result);
					}
#line 115185 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115193 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115197 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115201 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115205 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115208 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115212 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115215 "powerpc.tcc"
				)
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mtxer r" << rs; return;
							case 8: os << "mtlr r" << rs; return;
							case 9: os << "mtctr r" << rs; return;
							case 22: os << "mtdec r" << rs; return;
							case 528: os << "mtibatu 0, r" << rs; return;
							case 529: os << "mtibatl 0, r" << rs; return;
							case 530: os << "mtibatu 1, r" << rs; return;
							case 531: os << "mtibatl 1, r" << rs; return;
							case 532: os << "mtibatu 2, r" << rs; return;
							case 533: os << "mtibatl 2, r" << rs; return;
							case 534: os << "mtibatu 3, r" << rs; return;
							case 535: os << "mtibatl 3, r" << rs; return;
							case 536: os << "mtdbatu 0, r" << rs; return;
							case 537: os << "mtdbatl 0, r" << rs; return;
							case 538: os << "mtdbatu 1, r" << rs; return;
							case 539: os << "mtdbatl 1, r" << rs; return;
							case 540: os << "mtdbatu 2, r" << rs; return;
							case 541: os << "mtdbatl 2, r" << rs; return;
							case 542: os << "mtdbatu 3, r" << rs; return;
							case 543: os << "mtdbatl 3, r" << rs; return;
							case 560: os << "mtibatu 4, r" << rs; return;
							case 561: os << "mtibatl 4, r" << rs; return;
							case 562: os << "mtibatu 5, r" << rs; return;
							case 563: os << "mtibatl 5, r" << rs; return;
							case 564: os << "mtibatu 6, r" << rs; return;
							case 565: os << "mtibatl 6, r" << rs; return;
							case 566: os << "mtibatu 7, r" << rs; return;
							case 567: os << "mtibatl 7, r" << rs; return;
							case 568: os << "mtdbatu 4, r" << rs; return;
							case 569: os << "mtdbatl 4, r" << rs; return;
							case 570: os << "mtdbatu 5, r" << rs; return;
							case 571: os << "mtdbatl 5, r" << rs; return;
							case 572: os << "mtdbatu 6, r" << rs; return;
							case 573: os << "mtdbatl 6, r" << rs; return;
							case 574: os << "mtdbatu 7, r" << rs; return;
							case 575: os << "mtdbatl 7, r" << rs; return;
						}

						os << "mtspr " << n << ", r" << rs;
					}
#line 115263 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115271 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115278 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115283 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115288 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115291 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115298 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: // XER
							Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::REFETCH_SERIALIZATION);
							return;
						}
						// mtspr (DBATs, IBATs, MSS, other)
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115313 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115321 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115328 "powerpc.tcc"
				>::initialize_function()
				{
#line 166 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnSysRegisterSerial;
						//uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						//	registers_written = ((d == 8) ? RegLR : RegNone) | ((d == 9) ? RegCTR : RegNone);
					}
#line 115337 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115345 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115352 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 115357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115365 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115372 "powerpc.tcc"
				>::initialize_operands()
				{
#line 701 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							OUTPUT(XER_T,0);
							OUTPUT(XER_T,1);
							OUTPUT(XER_T,2);
							OUTPUT(XER_T,3);
							break;
						case 8:
							OUTPUT(LR_T,0);
							break;
						case 9:
							OUTPUT(CTR_T,0);
							/*
							OUTPUT(CR_T,1);
							OUTPUT(CR_T,2);
							OUTPUT(CR_T,3);
							OUTPUT(CR_T,4);
							OUTPUT(CR_T,5);
							OUTPUT(CR_T,6);
							OUTPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
					}
#line 115406 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115415 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115420 "powerpc.tcc"
				> *DecodeOpMtspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 115426 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115436 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115440 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115444 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115448 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115451 "powerpc.tcc"
				)
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t d;
						d = ((tbr & 0x1F) << 5) + ((tbr >> 5) & 0x1F);
						switch(d)
						{
							case 268: cpu->SetGPR(rd, cpu->GetTBL()); break;
							case 269: cpu->SetGPR(rd, cpu->GetTBU()); break;
						default:
							/* illegal instruction */
							throw IllegalInstructionException<CONFIG>();
						}
					}
#line 115467 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115475 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115479 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115483 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115487 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115490 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115494 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115497 "powerpc.tcc"
				)
				{
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mftb r" << rd << ", " << tbr;
					}
#line 115504 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115512 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115519 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115524 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115532 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115539 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115546 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115554 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115561 "powerpc.tcc"
				>::initialize_function()
				{
#line 164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 115566 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115574 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115581 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 258 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115594 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115601 "powerpc.tcc"
				>::initialize_operands()
				{
#line 614 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 115608 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115617 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115622 "powerpc.tcc"
				> *DecodeOpMftb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 115628 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115638 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115642 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115646 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115650 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115653 "powerpc.tcc"
				)
				{
#line 274 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t cr = cpu->GetCR();

						// Generate a bit mask of bits to move from source GPR to CR
						uint32_t m = 128;
						uint32_t mask = 0;
						unsigned int i = 8; // Hope compiler will unroll the loop !
						do
						{
							mask = (crm & m) ? (mask << 4) | 0xf : mask << 4;
						} while(m >>= 1, --i);

						// Apply the bit mask
						cr = (cr & ~mask) | (s & mask);

						// Update CR
						cpu->SetCR(cr);
					}
#line 115677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115685 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115689 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115693 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115697 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115700 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115704 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115707 "powerpc.tcc"
				)
				{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(crm == 0xff)
						os << "mtcr r" << rs;
						else
						os << "mtcrf " << crm << ", r" << rs;
					}
#line 115717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115725 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115732 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115737 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115745 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115752 "powerpc.tcc"
				>::initialize_function()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 115757 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115765 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115772 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115777 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115785 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115792 "powerpc.tcc"
				>::initialize_operands()
				{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 115816 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115825 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115830 "powerpc.tcc"
				> *DecodeOpMtcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 115836 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115846 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115850 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115854 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115858 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115861 "powerpc.tcc"
				)
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetMSR(cpu->GetGPR(rs));
					}
#line 115871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115879 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115883 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115887 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115891 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115894 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115898 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115901 "powerpc.tcc"
				)
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtmsr r" << rs;
					}
#line 115908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115916 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115923 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115928 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115936 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115943 "powerpc.tcc"
				>::initialize_function()
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 115948 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115956 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115963 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115968 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115976 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115983 "powerpc.tcc"
				>::initialize_operands()
				{
#line 674 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
					}
#line 115990 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115999 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116004 "powerpc.tcc"
				> *DecodeOpMtmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 116010 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************************

				SEGMENT REGISTER MANIPULATION INSTRUCTIONS

				**********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 116022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116025 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116029 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116033 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116037 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116040 "powerpc.tcc"
				)
				{
#line 318 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd, cpu->GetSR(sr));
					}
#line 116050 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116055 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116058 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116062 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116066 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116070 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116073 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116077 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116080 "powerpc.tcc"
				)
				{
#line 324 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsr r" << rd << ", " << sr;
					}
#line 116087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116095 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116102 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116115 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116122 "powerpc.tcc"
				>::initialize_function()
				{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 116127 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116135 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116142 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 262 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 116147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116155 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116162 "powerpc.tcc"
				>::initialize_operands()
				{
#line 739 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(SR_T, sr);
					}
#line 116170 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116179 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116184 "powerpc.tcc"
				> *DecodeOpMfsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 116190 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116200 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116204 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116208 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116212 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116215 "powerpc.tcc"
				)
				{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd, cpu->GetSR((cpu->GetGPR(rb) >> 28) & 0xf));
					}
#line 116225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116233 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116237 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116241 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116245 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116248 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116252 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116255 "powerpc.tcc"
				)
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsrin r" << rd << ", r" << rb;
					}
#line 116262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116270 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116277 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116290 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116297 "powerpc.tcc"
				>::initialize_function()
				{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116310 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116317 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 116322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116330 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116337 "powerpc.tcc"
				>::initialize_operands()
				{
#line 586 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, rb);
					}
#line 116345 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116354 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116359 "powerpc.tcc"
				> *DecodeOpMfsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 116365 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116375 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116379 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116383 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116387 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116390 "powerpc.tcc"
				)
				{
#line 340 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR(sr, cpu->GetGPR(rs));
					}
#line 116400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116408 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116412 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116416 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116420 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116423 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116427 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116430 "powerpc.tcc"
				)
				{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsr " << sr << ", r" << rs;
					}
#line 116437 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116442 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116445 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116452 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116465 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116472 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 116479 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116487 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116494 "powerpc.tcc"
				>::initialize_function()
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116499 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116507 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116514 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 116519 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116527 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116534 "powerpc.tcc"
				>::initialize_operands()
				{
#line 733 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(SR_T, sr);
					}
#line 116542 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116551 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116556 "powerpc.tcc"
				> *DecodeOpMtsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 116562 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116569 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116572 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116576 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116580 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116584 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116587 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR((cpu->GetGPR(rb) >> 28) & 0xf, cpu->GetGPR(rs));
					}
#line 116597 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116605 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116609 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116613 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116617 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116620 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116624 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116627 "powerpc.tcc"
				)
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsrin r" << rs << ", r" << rb;
					}
#line 116634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116642 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116649 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116662 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116669 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 116676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116684 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116691 "powerpc.tcc"
				>::initialize_function()
				{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116704 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116711 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 116716 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116724 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116731 "powerpc.tcc"
				>::initialize_operands()
				{
#line 745 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
					}
#line 116739 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116748 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116753 "powerpc.tcc"
				> *DecodeOpMtsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 116759 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116769 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116773 "powerpc.tcc"
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 116777 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116781 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116784 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116788 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116791 "powerpc.tcc"
				)
				{
#line 3 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dss " << strm << ", 0";
					}
#line 116798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116806 "powerpc.tcc"
				>

				void
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 116813 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116818 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116827 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116832 "powerpc.tcc"
				> *DecodeOpDss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDss<
#line 38 "ppc.isa"
					CONFIG
#line 116838 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116848 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116852 "powerpc.tcc"
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 116856 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116860 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116863 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116867 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116870 "powerpc.tcc"
				)
				{
#line 9 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dssall " << strm;
					}
#line 116877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116885 "powerpc.tcc"
				>

				void
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 116892 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116897 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116906 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116911 "powerpc.tcc"
				> *DecodeOpDssall(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 116917 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116927 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116931 "powerpc.tcc"
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 116935 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116939 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116942 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116946 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116949 "powerpc.tcc"
				)
				{
#line 15 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dst r" << ra << ", r" << rb << ", " << strm;
					}
#line 116956 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116964 "powerpc.tcc"
				>

				void
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 116971 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116976 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116985 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116990 "powerpc.tcc"
				> *DecodeOpDst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDst<
#line 38 "ppc.isa"
					CONFIG
#line 116996 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117006 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117010 "powerpc.tcc"
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 117014 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117018 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117021 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117025 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117028 "powerpc.tcc"
				)
				{
#line 21 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstst r" << ra << ", r" << rb << ", " << strm;
					}
#line 117035 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117043 "powerpc.tcc"
				>

				void
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 117050 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117055 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117064 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117069 "powerpc.tcc"
				> *DecodeOpDstst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 117075 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117085 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117089 "powerpc.tcc"
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 117093 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117097 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117100 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117104 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117107 "powerpc.tcc"
				)
				{
#line 27 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 117114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117122 "powerpc.tcc"
				>

				void
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 117129 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117134 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117143 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117148 "powerpc.tcc"
				> *DecodeOpDststt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 117154 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117164 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117168 "powerpc.tcc"
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 117172 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117176 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117179 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117183 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117186 "powerpc.tcc"
				)
				{
#line 33 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 117193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117201 "powerpc.tcc"
				>

				void
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 117208 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117213 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117222 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117227 "powerpc.tcc"
				> *DecodeOpDstt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 117233 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117243 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117247 "powerpc.tcc"
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 117251 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117255 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117258 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117262 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117265 "powerpc.tcc"
				)
				{
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvebx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117272 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117280 "powerpc.tcc"
				>

				void
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 117287 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117292 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117301 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117306 "powerpc.tcc"
				> *DecodeOpLvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 117312 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117322 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117326 "powerpc.tcc"
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 117330 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117334 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117337 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117341 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117344 "powerpc.tcc"
				)
				{
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvehx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117351 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117359 "powerpc.tcc"
				>

				void
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 117366 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117371 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117380 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117385 "powerpc.tcc"
				> *DecodeOpLvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 117391 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117401 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117405 "powerpc.tcc"
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 117409 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117413 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117416 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117420 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117423 "powerpc.tcc"
				)
				{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvewx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117438 "powerpc.tcc"
				>

				void
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 117445 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117450 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117459 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117464 "powerpc.tcc"
				> *DecodeOpLvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 117470 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117480 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117484 "powerpc.tcc"
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 117488 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117492 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117495 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117499 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117502 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117509 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117517 "powerpc.tcc"
				>

				void
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 117524 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117529 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117538 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117543 "powerpc.tcc"
				> *DecodeOpLvsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 117549 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117559 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117563 "powerpc.tcc"
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 117567 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117571 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117574 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117578 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117581 "powerpc.tcc"
				)
				{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsr v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117596 "powerpc.tcc"
				>

				void
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 117603 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117608 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117617 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117622 "powerpc.tcc"
				> *DecodeOpLvsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 117628 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117638 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117642 "powerpc.tcc"
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 117646 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117650 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117653 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117657 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117660 "powerpc.tcc"
				)
				{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117667 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117675 "powerpc.tcc"
				>

				void
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 117682 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117687 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117696 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117701 "powerpc.tcc"
				> *DecodeOpLvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 117707 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117717 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117721 "powerpc.tcc"
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 117725 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117729 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117732 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117736 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117739 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvxl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117746 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117754 "powerpc.tcc"
				>

				void
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 117761 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117766 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117775 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117780 "powerpc.tcc"
				> *DecodeOpLvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 117786 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117796 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117800 "powerpc.tcc"
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117804 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117808 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117811 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117815 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117818 "powerpc.tcc"
				)
				{
#line 81 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mfvscr v" << vd;
					}
#line 117825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117833 "powerpc.tcc"
				>

				void
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117840 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 117845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117853 "powerpc.tcc"
				>

				void
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117860 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 117867 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117876 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117881 "powerpc.tcc"
				> *DecodeOpMfvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 117887 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117897 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117901 "powerpc.tcc"
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117905 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117909 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117912 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117916 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117919 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mtvscr v" << vb;
					}
#line 117926 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117934 "powerpc.tcc"
				>

				void
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117941 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 117946 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117954 "powerpc.tcc"
				>

				void
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117961 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 117968 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117974 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117977 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117982 "powerpc.tcc"
				> *DecodeOpMtvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 117988 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117998 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118002 "powerpc.tcc"
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118006 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118010 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118013 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118017 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118020 "powerpc.tcc"
				)
				{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvebx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118027 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118035 "powerpc.tcc"
				>

				void
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118042 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118047 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118055 "powerpc.tcc"
				>

				void
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118062 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118069 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118075 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118078 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118083 "powerpc.tcc"
				> *DecodeOpStvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 118089 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118099 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118103 "powerpc.tcc"
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118107 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118111 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118114 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118118 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118121 "powerpc.tcc"
				)
				{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvehx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118128 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118136 "powerpc.tcc"
				>

				void
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118143 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118148 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118156 "powerpc.tcc"
				>

				void
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118163 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118170 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118179 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118184 "powerpc.tcc"
				> *DecodeOpStvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 118190 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118200 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118204 "powerpc.tcc"
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118208 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118212 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118215 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118219 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118222 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvewx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118229 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118237 "powerpc.tcc"
				>

				void
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118244 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118257 "powerpc.tcc"
				>

				void
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118264 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118271 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118280 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118285 "powerpc.tcc"
				> *DecodeOpStvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 118291 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118301 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118305 "powerpc.tcc"
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118309 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118313 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118316 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118320 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118323 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118330 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118338 "powerpc.tcc"
				>

				void
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118345 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118350 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118358 "powerpc.tcc"
				>

				void
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118365 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118372 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118381 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118386 "powerpc.tcc"
				> *DecodeOpStvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 118392 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118402 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118406 "powerpc.tcc"
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118410 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118414 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118417 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118421 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118424 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvxl v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118431 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118439 "powerpc.tcc"
				>

				void
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118446 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118451 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118459 "powerpc.tcc"
				>

				void
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118466 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118473 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118482 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118487 "powerpc.tcc"
				> *DecodeOpStvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 118493 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118503 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118507 "powerpc.tcc"
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 118511 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118515 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118518 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118522 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118525 "powerpc.tcc"
				)
				{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 118532 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118540 "powerpc.tcc"
				>

				void
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 118547 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118552 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118561 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118566 "powerpc.tcc"
				> *DecodeOpVaddcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 118572 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118582 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118586 "powerpc.tcc"
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 118590 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118594 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118597 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118601 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118604 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 118611 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118619 "powerpc.tcc"
				>

				void
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 118626 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 118631 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118640 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118645 "powerpc.tcc"
				> *DecodeOpVaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 118651 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118661 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118665 "powerpc.tcc"
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 118669 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118673 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118676 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118680 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118683 "powerpc.tcc"
				)
				{
#line 135 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 118690 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118698 "powerpc.tcc"
				>

				void
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 118705 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118710 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118719 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118724 "powerpc.tcc"
				> *DecodeOpVaddsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 118730 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118740 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118744 "powerpc.tcc"
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 118748 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118752 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118755 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118759 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118762 "powerpc.tcc"
				)
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 118769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118777 "powerpc.tcc"
				>

				void
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 118784 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118789 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118798 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118803 "powerpc.tcc"
				> *DecodeOpVaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 118809 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118819 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118823 "powerpc.tcc"
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 118827 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118831 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118834 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118838 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118841 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 118848 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118856 "powerpc.tcc"
				>

				void
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 118863 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118868 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118877 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118882 "powerpc.tcc"
				> *DecodeOpVaddsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 118888 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118898 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118902 "powerpc.tcc"
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 118906 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118910 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118913 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118917 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118920 "powerpc.tcc"
				)
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubm v" << vd << ", v" << va << ", v" << vb;
					}
#line 118927 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118935 "powerpc.tcc"
				>

				void
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 118942 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118947 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118956 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118961 "powerpc.tcc"
				> *DecodeOpVaddubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 118967 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118974 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118977 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118981 "powerpc.tcc"
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 118985 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118989 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118992 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118996 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118999 "powerpc.tcc"
				)
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 119006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119014 "powerpc.tcc"
				>

				void
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 119021 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119026 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119035 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119040 "powerpc.tcc"
				> *DecodeOpVaddubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 119046 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119056 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119060 "powerpc.tcc"
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 119064 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119068 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119071 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119075 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119078 "powerpc.tcc"
				)
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 119085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119093 "powerpc.tcc"
				>

				void
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 119100 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119105 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119114 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119119 "powerpc.tcc"
				> *DecodeOpVadduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 119125 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119135 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119139 "powerpc.tcc"
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 119143 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119147 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119150 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119154 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119157 "powerpc.tcc"
				)
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 119164 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119172 "powerpc.tcc"
				>

				void
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 119179 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119184 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119193 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119198 "powerpc.tcc"
				> *DecodeOpVadduhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 119204 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119214 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119218 "powerpc.tcc"
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 119222 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119226 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119229 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119233 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119236 "powerpc.tcc"
				)
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 119243 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119251 "powerpc.tcc"
				>

				void
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 119258 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119263 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119272 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119277 "powerpc.tcc"
				> *DecodeOpVadduwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 119283 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119293 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119297 "powerpc.tcc"
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 119301 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119305 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119308 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119312 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119315 "powerpc.tcc"
				)
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduws v" << vd << ", v" << va << ", v" << vb;
					}
#line 119322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119330 "powerpc.tcc"
				>

				void
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 119337 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119342 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119351 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119356 "powerpc.tcc"
				> *DecodeOpVadduws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 119362 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119372 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119376 "powerpc.tcc"
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 119380 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119384 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119387 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119391 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119394 "powerpc.tcc"
				)
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vand v" << vd << ", v" << va << ", v" << vb;
					}
#line 119401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119409 "powerpc.tcc"
				>

				void
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 119416 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119421 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119430 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119435 "powerpc.tcc"
				> *DecodeOpVand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVand<
#line 38 "ppc.isa"
					CONFIG
#line 119441 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119451 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119455 "powerpc.tcc"
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 119459 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119463 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119466 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119470 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119473 "powerpc.tcc"
				)
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vandc v" << vd << ", v" << va << ", v" << vb;
					}
#line 119480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119488 "powerpc.tcc"
				>

				void
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 119495 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119500 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119509 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119514 "powerpc.tcc"
				> *DecodeOpVandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 119520 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119530 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119534 "powerpc.tcc"
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 119538 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119542 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119545 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119549 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119552 "powerpc.tcc"
				)
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 119559 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119567 "powerpc.tcc"
				>

				void
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 119574 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119579 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119588 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119593 "powerpc.tcc"
				> *DecodeOpVavgsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 119599 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119609 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119613 "powerpc.tcc"
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 119617 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119621 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119624 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119628 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119631 "powerpc.tcc"
				)
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 119638 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119646 "powerpc.tcc"
				>

				void
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 119653 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119658 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119667 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119672 "powerpc.tcc"
				> *DecodeOpVavgsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 119678 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119688 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119692 "powerpc.tcc"
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 119696 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119700 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119703 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119707 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119710 "powerpc.tcc"
				)
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 119717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119725 "powerpc.tcc"
				>

				void
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 119732 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119737 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119746 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119751 "powerpc.tcc"
				> *DecodeOpVavgsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 119757 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119767 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119771 "powerpc.tcc"
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 119775 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119779 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119782 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119786 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119789 "powerpc.tcc"
				)
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgub v" << vd << ", v" << va << ", v" << vb;
					}
#line 119796 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119804 "powerpc.tcc"
				>

				void
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 119811 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119816 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119825 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119830 "powerpc.tcc"
				> *DecodeOpVavgub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 119836 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119846 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119850 "powerpc.tcc"
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 119854 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119858 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119861 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119865 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119868 "powerpc.tcc"
				)
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguh v" << vd << ", v" << va << ", v" << vb;
					}
#line 119875 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119883 "powerpc.tcc"
				>

				void
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 119890 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119895 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119904 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119909 "powerpc.tcc"
				> *DecodeOpVavguh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 119915 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119925 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119929 "powerpc.tcc"
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 119933 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119937 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119940 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119944 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119947 "powerpc.tcc"
				)
				{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguw v" << vd << ", v" << va << ", v" << vb;
					}
#line 119954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119962 "powerpc.tcc"
				>

				void
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 119969 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119974 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119983 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119988 "powerpc.tcc"
				> *DecodeOpVavguw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 119994 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120004 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120008 "powerpc.tcc"
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 120012 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120016 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120019 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120023 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120026 "powerpc.tcc"
				)
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfsx v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 120033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120041 "powerpc.tcc"
				>

				void
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 120048 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120053 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120062 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120067 "powerpc.tcc"
				> *DecodeOpVcfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 120073 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120083 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120087 "powerpc.tcc"
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 120091 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120095 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120098 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120102 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120105 "powerpc.tcc"
				)
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfux v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 120112 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120120 "powerpc.tcc"
				>

				void
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 120127 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120132 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120141 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120146 "powerpc.tcc"
				> *DecodeOpVcfux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 120152 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120162 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120166 "powerpc.tcc"
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 120170 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120174 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120177 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120181 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120184 "powerpc.tcc"
				)
				{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpbfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120191 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120199 "powerpc.tcc"
				>

				void
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 120206 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120211 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120220 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120225 "powerpc.tcc"
				> *DecodeOpVcmpbfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 120231 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120241 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120245 "powerpc.tcc"
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 120249 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120253 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120256 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120260 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120263 "powerpc.tcc"
				)
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpeqfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120270 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120278 "powerpc.tcc"
				>

				void
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 120285 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120290 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120296 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120299 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120304 "powerpc.tcc"
				> *DecodeOpVcmpeqfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 120310 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120317 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120320 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120324 "powerpc.tcc"
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 120328 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120332 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120335 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120339 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120342 "powerpc.tcc"
				)
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120349 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120357 "powerpc.tcc"
				>

				void
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 120364 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120369 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120378 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120383 "powerpc.tcc"
				> *DecodeOpVcmpequb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 120389 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120399 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120403 "powerpc.tcc"
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 120407 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120411 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120414 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120418 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120421 "powerpc.tcc"
				)
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120428 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120436 "powerpc.tcc"
				>

				void
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 120443 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120448 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120454 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120457 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120462 "powerpc.tcc"
				> *DecodeOpVcmpequh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 120468 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120478 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120482 "powerpc.tcc"
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 120486 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120490 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120493 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120497 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120500 "powerpc.tcc"
				)
				{
#line 273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120507 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120515 "powerpc.tcc"
				>

				void
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 120522 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120527 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120536 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120541 "powerpc.tcc"
				> *DecodeOpVcmpequw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 120547 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120557 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120561 "powerpc.tcc"
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 120565 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120569 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120572 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120576 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120579 "powerpc.tcc"
				)
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgefp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120594 "powerpc.tcc"
				>

				void
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 120601 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120606 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120615 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120620 "powerpc.tcc"
				> *DecodeOpVcmpgefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 120626 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120633 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120636 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120640 "powerpc.tcc"
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 120644 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120648 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120651 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120655 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120658 "powerpc.tcc"
				)
				{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120665 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120673 "powerpc.tcc"
				>

				void
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 120680 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120685 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120694 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120699 "powerpc.tcc"
				> *DecodeOpVcmpgtfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 120705 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120715 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120719 "powerpc.tcc"
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 120723 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120727 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120730 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120734 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120737 "powerpc.tcc"
				)
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120744 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120752 "powerpc.tcc"
				>

				void
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 120759 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120764 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120773 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120778 "powerpc.tcc"
				> *DecodeOpVcmpgtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 120784 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120794 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120798 "powerpc.tcc"
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 120802 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120806 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120809 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120813 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120816 "powerpc.tcc"
				)
				{
#line 297 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120823 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120831 "powerpc.tcc"
				>

				void
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 120838 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120843 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120852 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120857 "powerpc.tcc"
				> *DecodeOpVcmpgtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 120863 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120873 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120877 "powerpc.tcc"
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 120881 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120885 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120888 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120892 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120895 "powerpc.tcc"
				)
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120902 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120910 "powerpc.tcc"
				>

				void
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 120917 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120922 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120931 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120936 "powerpc.tcc"
				> *DecodeOpVcmpgtsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 120942 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120952 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120956 "powerpc.tcc"
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 120960 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120964 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120967 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120971 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120974 "powerpc.tcc"
				)
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtub" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120981 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120989 "powerpc.tcc"
				>

				void
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 120996 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121001 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121010 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121015 "powerpc.tcc"
				> *DecodeOpVcmpgtub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 121021 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121031 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121035 "powerpc.tcc"
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 121039 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121043 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121046 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121050 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121053 "powerpc.tcc"
				)
				{
#line 315 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 121060 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121068 "powerpc.tcc"
				>

				void
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 121075 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121080 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121089 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121094 "powerpc.tcc"
				> *DecodeOpVcmpgtuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 121100 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121107 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121110 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121114 "powerpc.tcc"
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 121118 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121122 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121125 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121129 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121132 "powerpc.tcc"
				)
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 121139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121147 "powerpc.tcc"
				>

				void
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 121154 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121159 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121168 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121173 "powerpc.tcc"
				> *DecodeOpVcmpgtuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 121179 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121189 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121193 "powerpc.tcc"
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 121197 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121201 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121204 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121208 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121211 "powerpc.tcc"
				)
				{
#line 327 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctsxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 121218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121226 "powerpc.tcc"
				>

				void
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 121233 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121238 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121247 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121252 "powerpc.tcc"
				> *DecodeOpVctsxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 121258 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121268 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121272 "powerpc.tcc"
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 121276 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121280 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121283 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121287 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121290 "powerpc.tcc"
				)
				{
#line 333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctuxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 121297 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121305 "powerpc.tcc"
				>

				void
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 121312 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121317 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121326 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121331 "powerpc.tcc"
				> *DecodeOpVctuxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 121337 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121347 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121351 "powerpc.tcc"
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 121355 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121359 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121362 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121366 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121369 "powerpc.tcc"
				)
				{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vexptefp v" << vd << ", v" << vb;
					}
#line 121376 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121384 "powerpc.tcc"
				>

				void
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 121391 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121396 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121405 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121410 "powerpc.tcc"
				> *DecodeOpVexptefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 121416 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121426 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121430 "powerpc.tcc"
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 121434 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121438 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121441 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121445 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121448 "powerpc.tcc"
				)
				{
#line 345 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vlogefp v" << vd << ", v" << vb;
					}
#line 121455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121463 "powerpc.tcc"
				>

				void
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 121470 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121475 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121484 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121489 "powerpc.tcc"
				> *DecodeOpVlogefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 121495 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121505 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121509 "powerpc.tcc"
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 121513 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121517 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121520 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121524 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121527 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaddfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 121534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121542 "powerpc.tcc"
				>

				void
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 121549 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121554 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121563 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121568 "powerpc.tcc"
				> *DecodeOpVmaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 121574 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121584 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121588 "powerpc.tcc"
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 121592 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121596 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121599 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121603 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121606 "powerpc.tcc"
				)
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 121613 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121621 "powerpc.tcc"
				>

				void
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 121628 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121633 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121642 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121647 "powerpc.tcc"
				> *DecodeOpVmaxfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 121653 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121663 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121667 "powerpc.tcc"
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 121671 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121675 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121678 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121682 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121685 "powerpc.tcc"
				)
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 121692 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121700 "powerpc.tcc"
				>

				void
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 121707 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121712 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121721 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121726 "powerpc.tcc"
				> *DecodeOpVmaxsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 121732 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121742 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121746 "powerpc.tcc"
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 121750 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121754 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121757 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121761 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121764 "powerpc.tcc"
				)
				{
#line 369 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 121771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121779 "powerpc.tcc"
				>

				void
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 121786 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121791 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121800 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121805 "powerpc.tcc"
				> *DecodeOpVmaxsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 121811 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121821 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121825 "powerpc.tcc"
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 121829 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121833 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121836 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121840 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121843 "powerpc.tcc"
				)
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 121850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121858 "powerpc.tcc"
				>

				void
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 121865 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121870 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121879 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121884 "powerpc.tcc"
				> *DecodeOpVmaxsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 121890 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121900 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121904 "powerpc.tcc"
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 121908 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121912 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121915 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121919 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121922 "powerpc.tcc"
				)
				{
#line 381 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxub v" << vd << ", v" << va << ", v" << vb;
					}
#line 121929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121937 "powerpc.tcc"
				>

				void
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 121944 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121949 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121958 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121963 "powerpc.tcc"
				> *DecodeOpVmaxub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 121969 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121979 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121983 "powerpc.tcc"
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 121987 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121991 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121994 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121998 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122001 "powerpc.tcc"
				)
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122016 "powerpc.tcc"
				>

				void
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 122023 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122028 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122037 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122042 "powerpc.tcc"
				> *DecodeOpVmaxuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 122048 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122055 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122058 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122062 "powerpc.tcc"
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 122066 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122070 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122073 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122077 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122080 "powerpc.tcc"
				)
				{
#line 393 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122095 "powerpc.tcc"
				>

				void
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 122102 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122107 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122116 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122121 "powerpc.tcc"
				> *DecodeOpVmaxuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 122127 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122137 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122141 "powerpc.tcc"
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122145 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122149 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122152 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122156 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122159 "powerpc.tcc"
				)
				{
#line 399 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhaddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122166 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122174 "powerpc.tcc"
				>

				void
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122181 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122186 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122195 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122200 "powerpc.tcc"
				> *DecodeOpVmhaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 122206 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122216 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122220 "powerpc.tcc"
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122224 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122228 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122231 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122235 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122238 "powerpc.tcc"
				)
				{
#line 405 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhraddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122253 "powerpc.tcc"
				>

				void
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122260 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122265 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122274 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122279 "powerpc.tcc"
				> *DecodeOpVmhraddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 122285 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122295 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122299 "powerpc.tcc"
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 122303 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122307 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122310 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122314 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122317 "powerpc.tcc"
				)
				{
#line 411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 122324 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122332 "powerpc.tcc"
				>

				void
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 122339 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 122344 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122353 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122358 "powerpc.tcc"
				> *DecodeOpVminfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 122364 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122374 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122378 "powerpc.tcc"
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 122382 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122386 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122389 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122393 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122396 "powerpc.tcc"
				)
				{
#line 417 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 122403 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122411 "powerpc.tcc"
				>

				void
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 122418 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122423 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122432 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122437 "powerpc.tcc"
				> *DecodeOpVminsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 122443 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122453 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122457 "powerpc.tcc"
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 122461 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122465 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122468 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122472 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122475 "powerpc.tcc"
				)
				{
#line 423 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122490 "powerpc.tcc"
				>

				void
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 122497 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122502 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122511 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122516 "powerpc.tcc"
				> *DecodeOpVminsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 122522 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122532 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122536 "powerpc.tcc"
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 122540 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122544 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122547 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122551 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122554 "powerpc.tcc"
				)
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122569 "powerpc.tcc"
				>

				void
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 122576 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122581 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122590 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122595 "powerpc.tcc"
				> *DecodeOpVminsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 122601 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122611 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122615 "powerpc.tcc"
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 122619 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122623 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122626 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122630 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122633 "powerpc.tcc"
				)
				{
#line 435 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminub v" << vd << ", v" << va << ", v" << vb;
					}
#line 122640 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122648 "powerpc.tcc"
				>

				void
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 122655 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122660 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122669 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122674 "powerpc.tcc"
				> *DecodeOpVminub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 122680 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122690 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122694 "powerpc.tcc"
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 122698 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122702 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122705 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122709 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122712 "powerpc.tcc"
				)
				{
#line 441 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122727 "powerpc.tcc"
				>

				void
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 122734 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122739 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122748 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122753 "powerpc.tcc"
				> *DecodeOpVminuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 122759 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122769 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122773 "powerpc.tcc"
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 122777 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122781 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122784 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122788 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122791 "powerpc.tcc"
				)
				{
#line 447 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122806 "powerpc.tcc"
				>

				void
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 122813 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122818 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122827 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122832 "powerpc.tcc"
				> *DecodeOpVminuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 122838 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122848 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122852 "powerpc.tcc"
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 122856 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122860 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122863 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122867 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122870 "powerpc.tcc"
				)
				{
#line 453 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmladduhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122885 "powerpc.tcc"
				>

				void
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 122892 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122897 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122906 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122911 "powerpc.tcc"
				> *DecodeOpVmladduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 122917 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122927 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122931 "powerpc.tcc"
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 122935 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122939 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122942 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122946 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122949 "powerpc.tcc"
				)
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghb v" << vd << ", v" << va << ", v" << vb;
					}
#line 122956 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122964 "powerpc.tcc"
				>

				void
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 122971 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 122976 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122985 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122990 "powerpc.tcc"
				> *DecodeOpVmrghb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 122996 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123006 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123010 "powerpc.tcc"
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 123014 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123018 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123021 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123025 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123028 "powerpc.tcc"
				)
				{
#line 465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123035 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123043 "powerpc.tcc"
				>

				void
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 123050 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123055 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123064 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123069 "powerpc.tcc"
				> *DecodeOpVmrghh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 123075 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123085 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123089 "powerpc.tcc"
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 123093 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123097 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123100 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123104 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123107 "powerpc.tcc"
				)
				{
#line 471 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghw v" << vd << ", v" << va << ", v" << vb;
					}
#line 123114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123122 "powerpc.tcc"
				>

				void
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 123129 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123134 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123143 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123148 "powerpc.tcc"
				> *DecodeOpVmrghw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 123154 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123164 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123168 "powerpc.tcc"
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 123172 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123176 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123179 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123183 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123186 "powerpc.tcc"
				)
				{
#line 477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglb v" << vd << ", v" << va << ", v" << vb;
					}
#line 123193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123201 "powerpc.tcc"
				>

				void
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 123208 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123213 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123222 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123227 "powerpc.tcc"
				> *DecodeOpVmrglb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 123233 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123243 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123247 "powerpc.tcc"
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 123251 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123255 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123258 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123262 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123265 "powerpc.tcc"
				)
				{
#line 483 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123272 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123280 "powerpc.tcc"
				>

				void
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 123287 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123292 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123301 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123306 "powerpc.tcc"
				> *DecodeOpVmrglh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 123312 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123322 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123326 "powerpc.tcc"
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 123330 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123334 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123337 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123341 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123344 "powerpc.tcc"
				)
				{
#line 489 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglw v" << vd << ", v" << va << ", v" << vb;
					}
#line 123351 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123359 "powerpc.tcc"
				>

				void
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 123366 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123371 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123380 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123385 "powerpc.tcc"
				> *DecodeOpVmrglw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 123391 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123401 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123405 "powerpc.tcc"
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 123409 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123413 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123416 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123420 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123423 "powerpc.tcc"
				)
				{
#line 495 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsummbm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123438 "powerpc.tcc"
				>

				void
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 123445 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123450 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123459 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123464 "powerpc.tcc"
				> *DecodeOpVmsummbm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 123470 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123480 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123484 "powerpc.tcc"
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 123488 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123492 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123495 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123499 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123502 "powerpc.tcc"
				)
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123509 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123517 "powerpc.tcc"
				>

				void
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 123524 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123529 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123538 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123543 "powerpc.tcc"
				> *DecodeOpVmsumshm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 123549 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123559 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123563 "powerpc.tcc"
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 123567 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123571 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123574 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123578 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123581 "powerpc.tcc"
				)
				{
#line 507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123596 "powerpc.tcc"
				>

				void
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 123603 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123608 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123617 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123622 "powerpc.tcc"
				> *DecodeOpVmsumshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 123628 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123638 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123642 "powerpc.tcc"
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 123646 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123650 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123653 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123657 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123660 "powerpc.tcc"
				)
				{
#line 513 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumubm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123667 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123675 "powerpc.tcc"
				>

				void
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 123682 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123687 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123696 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123701 "powerpc.tcc"
				> *DecodeOpVmsumubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 123707 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123717 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123721 "powerpc.tcc"
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 123725 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123729 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123732 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123736 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123739 "powerpc.tcc"
				)
				{
#line 519 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123746 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123754 "powerpc.tcc"
				>

				void
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 123761 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123766 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123775 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123780 "powerpc.tcc"
				> *DecodeOpVmsumuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 123786 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123796 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123800 "powerpc.tcc"
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 123804 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123808 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123811 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123815 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123818 "powerpc.tcc"
				)
				{
#line 525 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123833 "powerpc.tcc"
				>

				void
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 123840 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123845 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123854 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123859 "powerpc.tcc"
				> *DecodeOpVmsumuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 123865 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123875 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123879 "powerpc.tcc"
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 123883 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123887 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123890 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123894 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123897 "powerpc.tcc"
				)
				{
#line 531 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesb v" << vd << ", v" << va << ", v" << vb;
					}
#line 123904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123912 "powerpc.tcc"
				>

				void
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 123919 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123924 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123933 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123938 "powerpc.tcc"
				> *DecodeOpVmulesb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 123944 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123954 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123958 "powerpc.tcc"
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 123962 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123966 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123969 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123973 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123976 "powerpc.tcc"
				)
				{
#line 537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123991 "powerpc.tcc"
				>

				void
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 123998 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124003 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124012 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124017 "powerpc.tcc"
				> *DecodeOpVmulesh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 124023 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124033 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124037 "powerpc.tcc"
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 124041 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124045 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124048 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124052 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124055 "powerpc.tcc"
				)
				{
#line 543 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleub v" << vd << ", v" << va << ", v" << vb;
					}
#line 124062 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124070 "powerpc.tcc"
				>

				void
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 124077 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124082 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124091 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124096 "powerpc.tcc"
				> *DecodeOpVmuleub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 124102 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124112 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124116 "powerpc.tcc"
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 124120 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124124 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124127 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124131 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124134 "powerpc.tcc"
				)
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124149 "powerpc.tcc"
				>

				void
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 124156 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124161 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124170 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124175 "powerpc.tcc"
				> *DecodeOpVmuleuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 124181 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124191 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124195 "powerpc.tcc"
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 124199 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124203 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124206 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124210 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124213 "powerpc.tcc"
				)
				{
#line 555 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosb v" << vd << ", v" << va << ", v" << vb;
					}
#line 124220 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124228 "powerpc.tcc"
				>

				void
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 124235 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124240 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124249 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124254 "powerpc.tcc"
				> *DecodeOpVmulosb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 124260 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124270 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124274 "powerpc.tcc"
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 124278 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124282 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124285 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124289 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124292 "powerpc.tcc"
				)
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124299 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124307 "powerpc.tcc"
				>

				void
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 124314 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124319 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124328 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124333 "powerpc.tcc"
				> *DecodeOpVmulosh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 124339 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124349 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124353 "powerpc.tcc"
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 124357 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124361 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124364 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124368 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124371 "powerpc.tcc"
				)
				{
#line 567 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuloub v" << vd << ", v" << va << ", v" << vb;
					}
#line 124378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124386 "powerpc.tcc"
				>

				void
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 124393 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124398 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124407 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124412 "powerpc.tcc"
				> *DecodeOpVmuloub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 124418 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124428 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124432 "powerpc.tcc"
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 124436 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124440 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124443 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124447 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124450 "powerpc.tcc"
				)
				{
#line 573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulouh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124465 "powerpc.tcc"
				>

				void
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 124472 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124477 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124486 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124491 "powerpc.tcc"
				> *DecodeOpVmulouh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 124497 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124507 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124511 "powerpc.tcc"
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 124515 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124519 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124522 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124526 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124529 "powerpc.tcc"
				)
				{
#line 579 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnmsubfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 124536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124544 "powerpc.tcc"
				>

				void
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 124551 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 124556 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124565 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124570 "powerpc.tcc"
				> *DecodeOpVnmsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 124576 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124586 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124590 "powerpc.tcc"
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 124594 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124598 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124601 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124605 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124608 "powerpc.tcc"
				)
				{
#line 585 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnor v" << vd << ", v" << va << ", v" << vb;
					}
#line 124615 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124623 "powerpc.tcc"
				>

				void
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 124630 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 124635 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124644 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124649 "powerpc.tcc"
				> *DecodeOpVnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 124655 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124665 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124669 "powerpc.tcc"
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 124673 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124677 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124680 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124684 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124687 "powerpc.tcc"
				)
				{
#line 591 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vor v" << vd << ", v" << va << ", v" << vb;
					}
#line 124694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124702 "powerpc.tcc"
				>

				void
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 124709 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 124714 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124723 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124728 "powerpc.tcc"
				> *DecodeOpVor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVor<
#line 38 "ppc.isa"
					CONFIG
#line 124734 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124744 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124748 "powerpc.tcc"
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 124752 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124756 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124759 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124763 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124766 "powerpc.tcc"
				)
				{
#line 597 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vperm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 124773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124781 "powerpc.tcc"
				>

				void
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 124788 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124793 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124799 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124802 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124807 "powerpc.tcc"
				> *DecodeOpVperm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 124813 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124823 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124827 "powerpc.tcc"
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 124831 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124835 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124838 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124842 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124845 "powerpc.tcc"
				)
				{
#line 603 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkpx v" << vd << ", v" << va << ", v" << vb;
					}
#line 124852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124860 "powerpc.tcc"
				>

				void
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 124867 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124872 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124881 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124886 "powerpc.tcc"
				> *DecodeOpVpkpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 124892 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124902 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124906 "powerpc.tcc"
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 124910 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124914 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124917 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124921 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124924 "powerpc.tcc"
				)
				{
#line 609 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshss v" << vd << ", v" << va << ", v" << vb;
					}
#line 124931 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124939 "powerpc.tcc"
				>

				void
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 124946 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124951 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124960 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124965 "powerpc.tcc"
				> *DecodeOpVpkshss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 124971 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124981 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124985 "powerpc.tcc"
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 124989 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124993 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124996 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125000 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125003 "powerpc.tcc"
				)
				{
#line 615 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125018 "powerpc.tcc"
				>

				void
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 125025 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125030 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125039 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125044 "powerpc.tcc"
				> *DecodeOpVpkshus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 125050 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125060 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125064 "powerpc.tcc"
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 125068 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125072 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125075 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125079 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125082 "powerpc.tcc"
				)
				{
#line 621 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswss v" << vd << ", v" << va << ", v" << vb;
					}
#line 125089 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125094 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125097 "powerpc.tcc"
				>

				void
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 125104 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125109 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125118 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125123 "powerpc.tcc"
				> *DecodeOpVpkswss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 125129 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125139 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125143 "powerpc.tcc"
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 125147 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125151 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125154 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125158 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125161 "powerpc.tcc"
				)
				{
#line 627 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125176 "powerpc.tcc"
				>

				void
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 125183 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125188 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125197 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125202 "powerpc.tcc"
				> *DecodeOpVpkswus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 125208 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125218 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125222 "powerpc.tcc"
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 125226 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125230 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125233 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125237 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125240 "powerpc.tcc"
				)
				{
#line 633 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhum v" << vd << ", v" << va << ", v" << vb;
					}
#line 125247 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125255 "powerpc.tcc"
				>

				void
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 125262 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125267 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125273 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125276 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125281 "powerpc.tcc"
				> *DecodeOpVpkuhum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 125287 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125294 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125297 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125301 "powerpc.tcc"
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 125305 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125309 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125312 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125316 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125319 "powerpc.tcc"
				)
				{
#line 639 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125334 "powerpc.tcc"
				>

				void
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 125341 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125346 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125355 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125360 "powerpc.tcc"
				> *DecodeOpVpkuhus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 125366 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125376 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125380 "powerpc.tcc"
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 125384 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125388 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125391 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125395 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125398 "powerpc.tcc"
				)
				{
#line 645 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwum v" << vd << ", v" << va << ", v" << vb;
					}
#line 125405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125413 "powerpc.tcc"
				>

				void
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 125420 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125425 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125434 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125439 "powerpc.tcc"
				> *DecodeOpVpkuwum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 125445 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125455 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125459 "powerpc.tcc"
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 125463 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125467 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125470 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125474 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125477 "powerpc.tcc"
				)
				{
#line 651 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125484 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125492 "powerpc.tcc"
				>

				void
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 125499 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125504 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125513 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125518 "powerpc.tcc"
				> *DecodeOpVpkuwus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 125524 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125534 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125538 "powerpc.tcc"
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 125542 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125546 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125549 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125553 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125556 "powerpc.tcc"
				)
				{
#line 657 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrefp v" << vd << ", v" << vb;
					}
#line 125563 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125571 "powerpc.tcc"
				>

				void
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 125578 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125583 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125592 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125597 "powerpc.tcc"
				> *DecodeOpVrefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 125603 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125613 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125617 "powerpc.tcc"
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 125621 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125625 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125628 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125632 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125635 "powerpc.tcc"
				)
				{
#line 663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfim v" << vd << ", v" << vb;
					}
#line 125642 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125650 "powerpc.tcc"
				>

				void
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 125657 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125662 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125671 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125676 "powerpc.tcc"
				> *DecodeOpVrfim(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 125682 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125692 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125696 "powerpc.tcc"
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 125700 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125704 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125707 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125711 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125714 "powerpc.tcc"
				)
				{
#line 669 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfin v" << vd << ", v" << vb;
					}
#line 125721 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125729 "powerpc.tcc"
				>

				void
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 125736 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125741 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125750 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125755 "powerpc.tcc"
				> *DecodeOpVrfin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 125761 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125771 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125775 "powerpc.tcc"
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 125779 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125783 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125786 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125790 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125793 "powerpc.tcc"
				)
				{
#line 675 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfip v" << vd << ", v" << vb;
					}
#line 125800 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125808 "powerpc.tcc"
				>

				void
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 125815 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125820 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125829 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125834 "powerpc.tcc"
				> *DecodeOpVrfip(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 125840 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125850 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125854 "powerpc.tcc"
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 125858 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125862 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125865 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125869 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125872 "powerpc.tcc"
				)
				{
#line 681 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfiz v" << vd << ", v" << vb;
					}
#line 125879 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125887 "powerpc.tcc"
				>

				void
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 125894 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125899 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125908 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125913 "powerpc.tcc"
				> *DecodeOpVrfiz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 125919 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125929 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125933 "powerpc.tcc"
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 125937 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125941 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125944 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125948 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125951 "powerpc.tcc"
				)
				{
#line 687 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlb v" << vd << ", v" << va << ", v" << vb;
					}
#line 125958 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125966 "powerpc.tcc"
				>

				void
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 125973 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 125978 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125987 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125992 "powerpc.tcc"
				> *DecodeOpVrlb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 125998 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126008 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126012 "powerpc.tcc"
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 126016 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126020 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126023 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126027 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126030 "powerpc.tcc"
				)
				{
#line 693 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlh v" << vd << ", v" << va << ", v" << vb;
					}
#line 126037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126045 "powerpc.tcc"
				>

				void
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 126052 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126057 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126066 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126071 "powerpc.tcc"
				> *DecodeOpVrlh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 126077 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126087 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126091 "powerpc.tcc"
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 126095 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126099 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126102 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126106 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126109 "powerpc.tcc"
				)
				{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlw v" << vd << ", v" << va << ", v" << vb;
					}
#line 126116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126124 "powerpc.tcc"
				>

				void
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 126131 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126136 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126145 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126150 "powerpc.tcc"
				> *DecodeOpVrlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 126156 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126166 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126170 "powerpc.tcc"
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 126174 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126178 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126181 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126185 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126188 "powerpc.tcc"
				)
				{
#line 705 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrsqrtefp v" << vd << ", v" << vb;
					}
#line 126195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126203 "powerpc.tcc"
				>

				void
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 126210 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 126215 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126224 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126229 "powerpc.tcc"
				> *DecodeOpVrsqrtefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 126235 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126245 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126249 "powerpc.tcc"
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 126253 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126257 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126260 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126264 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126267 "powerpc.tcc"
				)
				{
#line 711 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsel v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 126274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126282 "powerpc.tcc"
				>

				void
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 126289 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126294 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126303 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126308 "powerpc.tcc"
				> *DecodeOpVsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 126314 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126324 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126328 "powerpc.tcc"
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 126332 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126336 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126339 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126343 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126346 "powerpc.tcc"
				)
				{
#line 717 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsl v" << vd << ", v" << va << ", v" << vb;
					}
#line 126353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126361 "powerpc.tcc"
				>

				void
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 126368 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126373 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126382 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126387 "powerpc.tcc"
				> *DecodeOpVsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 126393 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126403 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126407 "powerpc.tcc"
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 126411 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126415 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126418 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126422 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126425 "powerpc.tcc"
				)
				{
#line 723 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslb v" << vd << ", v" << va << ", v" << vb;
					}
#line 126432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126440 "powerpc.tcc"
				>

				void
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 126447 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126452 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126461 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126466 "powerpc.tcc"
				> *DecodeOpVslb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 126472 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126482 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126486 "powerpc.tcc"
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 126490 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126494 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126497 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126501 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126504 "powerpc.tcc"
				)
				{
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsldoi v" << vd << ", v" << va << ", v" << vb;
					}
#line 126511 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126519 "powerpc.tcc"
				>

				void
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 126526 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126531 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126540 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126545 "powerpc.tcc"
				> *DecodeOpVsldoi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 126551 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126561 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126565 "powerpc.tcc"
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 126569 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126573 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126576 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126580 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126583 "powerpc.tcc"
				)
				{
#line 735 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslh v" << vd << ", v" << va << ", v" << vb;
					}
#line 126590 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126598 "powerpc.tcc"
				>

				void
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 126605 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126610 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126619 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126624 "powerpc.tcc"
				> *DecodeOpVslh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 126630 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126640 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126644 "powerpc.tcc"
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 126648 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126652 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126655 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126659 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126662 "powerpc.tcc"
				)
				{
#line 741 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslo v" << vd << ", v" << va << ", v" << vb;
					}
#line 126669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126677 "powerpc.tcc"
				>

				void
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 126684 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126689 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126698 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126703 "powerpc.tcc"
				> *DecodeOpVslo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 126709 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126719 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126723 "powerpc.tcc"
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 126727 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126731 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126734 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126738 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126741 "powerpc.tcc"
				)
				{
#line 747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslw v" << vd << ", v" << va << ", v" << vb;
					}
#line 126748 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126756 "powerpc.tcc"
				>

				void
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 126763 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126768 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126777 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126782 "powerpc.tcc"
				> *DecodeOpVslw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 126788 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126798 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126802 "powerpc.tcc"
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 126806 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126810 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126813 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126817 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126820 "powerpc.tcc"
				)
				{
#line 753 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltb v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 126827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126835 "powerpc.tcc"
				>

				void
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 126842 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126847 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126856 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126861 "powerpc.tcc"
				> *DecodeOpVspltb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 126867 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126877 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126881 "powerpc.tcc"
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 126885 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126889 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126892 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126896 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126899 "powerpc.tcc"
				)
				{
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsplth v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 126906 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126914 "powerpc.tcc"
				>

				void
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 126921 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126926 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126935 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126940 "powerpc.tcc"
				> *DecodeOpVsplth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 126946 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126956 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126960 "powerpc.tcc"
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 126964 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126968 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126971 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126975 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126978 "powerpc.tcc"
				)
				{
#line 765 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisb v" << vd << ", v" << vb << ", " << (int) simm;
					}
#line 126985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126993 "powerpc.tcc"
				>

				void
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 127000 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127005 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127014 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127019 "powerpc.tcc"
				> *DecodeOpVspltisb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 127025 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127032 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127035 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127039 "powerpc.tcc"
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 127043 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127047 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127050 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127054 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127057 "powerpc.tcc"
				)
				{
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltish v" << vd << ", v" << vb << ", " << simm;
					}
#line 127064 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127072 "powerpc.tcc"
				>

				void
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 127079 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127084 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127093 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127098 "powerpc.tcc"
				> *DecodeOpVspltish(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 127104 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127114 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127118 "powerpc.tcc"
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 127122 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127126 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127129 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127133 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127136 "powerpc.tcc"
				)
				{
#line 777 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisw v" << vd << ", v" << vb << ", " << simm;
					}
#line 127143 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127151 "powerpc.tcc"
				>

				void
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 127158 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127163 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127172 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127177 "powerpc.tcc"
				> *DecodeOpVspltisw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 127183 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127193 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127197 "powerpc.tcc"
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 127201 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127205 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127208 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127212 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127215 "powerpc.tcc"
				)
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltiw v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 127222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127230 "powerpc.tcc"
				>

				void
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 127237 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127242 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127251 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127256 "powerpc.tcc"
				> *DecodeOpVspltw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 127262 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127272 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127276 "powerpc.tcc"
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 127280 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127284 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127287 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127291 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127294 "powerpc.tcc"
				)
				{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsr v" << vd << ", v" << va << ", v" << vb;
					}
#line 127301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127309 "powerpc.tcc"
				>

				void
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 127316 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127321 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127330 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127335 "powerpc.tcc"
				> *DecodeOpVsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 127341 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127351 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127355 "powerpc.tcc"
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 127359 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127363 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127366 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127370 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127373 "powerpc.tcc"
				)
				{
#line 795 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrab v" << vd << ", v" << va << ", v" << vb;
					}
#line 127380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127388 "powerpc.tcc"
				>

				void
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 127395 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127400 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127409 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127414 "powerpc.tcc"
				> *DecodeOpVsrab(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 127420 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127430 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127434 "powerpc.tcc"
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 127438 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127442 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127445 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127449 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127452 "powerpc.tcc"
				)
				{
#line 801 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrah v" << vd << ", v" << va << ", v" << vb;
					}
#line 127459 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127467 "powerpc.tcc"
				>

				void
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 127474 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127479 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127488 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127493 "powerpc.tcc"
				> *DecodeOpVsrah(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 127499 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127509 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127513 "powerpc.tcc"
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 127517 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127521 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127524 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127528 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127531 "powerpc.tcc"
				)
				{
#line 807 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsraw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127546 "powerpc.tcc"
				>

				void
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 127553 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127558 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127567 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127572 "powerpc.tcc"
				> *DecodeOpVsraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 127578 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127588 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127592 "powerpc.tcc"
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 127596 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127600 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127603 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127607 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127610 "powerpc.tcc"
				)
				{
#line 813 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrb v" << vd << ", v" << va << ", v" << vb;
					}
#line 127617 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127622 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127625 "powerpc.tcc"
				>

				void
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 127632 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127637 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127646 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127651 "powerpc.tcc"
				> *DecodeOpVsrb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 127657 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127667 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127671 "powerpc.tcc"
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 127675 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127679 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127682 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127686 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127689 "powerpc.tcc"
				)
				{
#line 819 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrh v" << vd << ", v" << va << ", v" << vb;
					}
#line 127696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127704 "powerpc.tcc"
				>

				void
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 127711 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127716 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127725 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127730 "powerpc.tcc"
				> *DecodeOpVsrh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 127736 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127746 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127750 "powerpc.tcc"
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 127754 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127758 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127761 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127765 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127768 "powerpc.tcc"
				)
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsro v" << vd << ", v" << va << ", v" << vb;
					}
#line 127775 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127783 "powerpc.tcc"
				>

				void
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 127790 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127795 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127801 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127804 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127809 "powerpc.tcc"
				> *DecodeOpVsro(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 127815 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127825 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127829 "powerpc.tcc"
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 127833 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127837 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127840 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127844 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127847 "powerpc.tcc"
				)
				{
#line 831 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127854 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127862 "powerpc.tcc"
				>

				void
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 127869 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127874 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127883 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127888 "powerpc.tcc"
				> *DecodeOpVsrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 127894 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127904 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127908 "powerpc.tcc"
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 127912 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127916 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127919 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127923 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127926 "powerpc.tcc"
				)
				{
#line 837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127933 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127941 "powerpc.tcc"
				>

				void
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 127948 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127953 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127962 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127967 "powerpc.tcc"
				> *DecodeOpVsubcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 127973 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127983 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127987 "powerpc.tcc"
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 127991 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127995 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127998 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128002 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128005 "powerpc.tcc"
				)
				{
#line 843 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 128012 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128020 "powerpc.tcc"
				>

				void
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 128027 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 128032 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128041 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128046 "powerpc.tcc"
				> *DecodeOpVsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 128052 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128062 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128066 "powerpc.tcc"
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 128070 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128074 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128077 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128081 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128084 "powerpc.tcc"
				)
				{
#line 849 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128091 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128099 "powerpc.tcc"
				>

				void
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 128106 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128111 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128120 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128125 "powerpc.tcc"
				> *DecodeOpVsubsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 128131 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128141 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128145 "powerpc.tcc"
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 128149 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128153 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128156 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128160 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128163 "powerpc.tcc"
				)
				{
#line 855 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128170 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128178 "powerpc.tcc"
				>

				void
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 128185 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128190 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128199 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128204 "powerpc.tcc"
				> *DecodeOpVsubshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 128210 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128220 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128224 "powerpc.tcc"
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 128228 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128232 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128235 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128239 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128242 "powerpc.tcc"
				)
				{
#line 861 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128257 "powerpc.tcc"
				>

				void
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 128264 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128269 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128278 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128283 "powerpc.tcc"
				> *DecodeOpVsubsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 128289 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128296 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128299 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128303 "powerpc.tcc"
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 128307 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128311 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128314 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128318 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128321 "powerpc.tcc"
				)
				{
#line 867 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128336 "powerpc.tcc"
				>

				void
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 128343 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128348 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128357 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128362 "powerpc.tcc"
				> *DecodeOpVsububm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 128368 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128378 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128382 "powerpc.tcc"
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 128386 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128390 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128393 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128397 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128400 "powerpc.tcc"
				)
				{
#line 873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128407 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128415 "powerpc.tcc"
				>

				void
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 128422 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128427 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128436 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128441 "powerpc.tcc"
				> *DecodeOpVsububs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 128447 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128454 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128457 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128461 "powerpc.tcc"
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 128465 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128469 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128472 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128476 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128479 "powerpc.tcc"
				)
				{
#line 879 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128494 "powerpc.tcc"
				>

				void
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 128501 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128506 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128515 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128520 "powerpc.tcc"
				> *DecodeOpVsubuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 128526 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128536 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128540 "powerpc.tcc"
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 128544 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128548 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128551 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128555 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128558 "powerpc.tcc"
				)
				{
#line 885 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128565 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128573 "powerpc.tcc"
				>

				void
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 128580 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128585 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128594 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128599 "powerpc.tcc"
				> *DecodeOpVsubuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 128605 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128615 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128619 "powerpc.tcc"
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 128623 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128627 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128630 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128634 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128637 "powerpc.tcc"
				)
				{
#line 891 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128644 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128652 "powerpc.tcc"
				>

				void
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 128659 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128664 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128673 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128678 "powerpc.tcc"
				> *DecodeOpVsubuwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 128684 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128694 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128698 "powerpc.tcc"
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 128702 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128706 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128709 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128713 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128716 "powerpc.tcc"
				)
				{
#line 897 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128731 "powerpc.tcc"
				>

				void
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 128738 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128743 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128752 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128757 "powerpc.tcc"
				> *DecodeOpVsubuws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 128763 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128773 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128777 "powerpc.tcc"
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 128781 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128785 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128788 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128792 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128795 "powerpc.tcc"
				)
				{
#line 903 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsumsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128810 "powerpc.tcc"
				>

				void
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 128817 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128822 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128831 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128836 "powerpc.tcc"
				> *DecodeOpVsumsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 128842 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128852 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128856 "powerpc.tcc"
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 128860 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128864 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128867 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128871 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128874 "powerpc.tcc"
				)
				{
#line 909 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum2sws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128881 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128889 "powerpc.tcc"
				>

				void
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 128896 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128901 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128910 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128915 "powerpc.tcc"
				> *DecodeOpVsum2sws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 128921 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128931 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128935 "powerpc.tcc"
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 128939 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128943 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128946 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128950 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128953 "powerpc.tcc"
				)
				{
#line 915 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4sbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128960 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128968 "powerpc.tcc"
				>

				void
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 128975 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128980 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128989 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128994 "powerpc.tcc"
				> *DecodeOpVsum4sbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 129000 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129010 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129014 "powerpc.tcc"
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 129018 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129022 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129025 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129029 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129032 "powerpc.tcc"
				)
				{
#line 921 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4shs v" << vd << ", v" << va << ", v" << vb;
					}
#line 129039 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129047 "powerpc.tcc"
				>

				void
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 129054 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 129059 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129068 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129073 "powerpc.tcc"
				> *DecodeOpVsum4shs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 129079 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129089 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129093 "powerpc.tcc"
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 129097 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129101 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129104 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129108 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129111 "powerpc.tcc"
				)
				{
#line 927 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4ubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 129118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129126 "powerpc.tcc"
				>

				void
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 129133 "powerpc.tcc"
				>::initialize_unit()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 129138 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129147 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129152 "powerpc.tcc"
				> *DecodeOpVsum4ubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 129158 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129168 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129172 "powerpc.tcc"
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 129176 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129180 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129183 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129187 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129190 "powerpc.tcc"
				)
				{
#line 933 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhpx v" << vd << ", v" << vb;
					}
#line 129197 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129205 "powerpc.tcc"
				>

				void
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 129212 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129217 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129226 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129231 "powerpc.tcc"
				> *DecodeOpVupkhpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 129237 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129247 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129251 "powerpc.tcc"
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 129255 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129259 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129262 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129266 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129269 "powerpc.tcc"
				)
				{
#line 939 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsb v" << vd << ", v" << vb;
					}
#line 129276 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129281 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129284 "powerpc.tcc"
				>

				void
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 129291 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129296 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129305 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129310 "powerpc.tcc"
				> *DecodeOpVupkhsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 129316 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129326 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129330 "powerpc.tcc"
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 129334 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129338 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129341 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129345 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129348 "powerpc.tcc"
				)
				{
#line 945 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsh v" << vd << ", v" << vb;
					}
#line 129355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129363 "powerpc.tcc"
				>

				void
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 129370 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129375 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129384 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129389 "powerpc.tcc"
				> *DecodeOpVupkhsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 129395 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129405 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129409 "powerpc.tcc"
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 129413 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129417 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129420 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129424 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129427 "powerpc.tcc"
				)
				{
#line 951 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklpx v" << vd << ", v" << vb;
					}
#line 129434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129442 "powerpc.tcc"
				>

				void
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 129449 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129454 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129463 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129468 "powerpc.tcc"
				> *DecodeOpVupklpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 129474 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129484 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129488 "powerpc.tcc"
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 129492 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129496 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129499 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129503 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129506 "powerpc.tcc"
				)
				{
#line 957 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsb v" << vd << ", v" << vb;
					}
#line 129513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129521 "powerpc.tcc"
				>

				void
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 129528 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129533 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129542 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129547 "powerpc.tcc"
				> *DecodeOpVupklsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 129553 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129563 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129567 "powerpc.tcc"
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 129571 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129575 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129578 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129582 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129585 "powerpc.tcc"
				)
				{
#line 963 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsh v" << vd << ", v" << vb;
					}
#line 129592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129600 "powerpc.tcc"
				>

				void
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 129607 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129612 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129621 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129626 "powerpc.tcc"
				> *DecodeOpVupklsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 129632 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129642 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129646 "powerpc.tcc"
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 129650 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129654 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129657 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129661 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129664 "powerpc.tcc"
				)
				{
#line 969 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vxor v" << vd << ", v" << va << ", v" << vb;
					}
#line 129671 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129679 "powerpc.tcc"
				>

				void
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 129686 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 129691 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129700 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129705 "powerpc.tcc"
				> *DecodeOpVxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 129711 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129721 "powerpc.tcc"
				>
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 129726 "powerpc.tcc"
				>::OpAdd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129730 "powerpc.tcc"
				>(code, addr, "add")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129746 "powerpc.tcc"
				>
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 129751 "powerpc.tcc"
				>::OpAddc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129755 "powerpc.tcc"
				>(code, addr, "addc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129771 "powerpc.tcc"
				>
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 129776 "powerpc.tcc"
				>::OpAdde(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129780 "powerpc.tcc"
				>(code, addr, "adde")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129796 "powerpc.tcc"
				>
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 129801 "powerpc.tcc"
				>::OpAddi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129805 "powerpc.tcc"
				>(code, addr, "addi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129819 "powerpc.tcc"
				>
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 129824 "powerpc.tcc"
				>::OpAddic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129828 "powerpc.tcc"
				>(code, addr, "addic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129842 "powerpc.tcc"
				>
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 129847 "powerpc.tcc"
				>::OpAddic_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129851 "powerpc.tcc"
				>(code, addr, "addic_")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129865 "powerpc.tcc"
				>
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 129870 "powerpc.tcc"
				>::OpAddis(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129874 "powerpc.tcc"
				>(code, addr, "addis")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 129885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129888 "powerpc.tcc"
				>
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 129893 "powerpc.tcc"
				>::OpAddme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129897 "powerpc.tcc"
				>(code, addr, "addme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129912 "powerpc.tcc"
				>
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 129917 "powerpc.tcc"
				>::OpAddze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129921 "powerpc.tcc"
				>(code, addr, "addze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129936 "powerpc.tcc"
				>
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 129941 "powerpc.tcc"
				>::OpDivw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129945 "powerpc.tcc"
				>(code, addr, "divw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129958 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129961 "powerpc.tcc"
				>
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 129966 "powerpc.tcc"
				>::OpDivwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129970 "powerpc.tcc"
				>(code, addr, "divwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129986 "powerpc.tcc"
				>
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 129991 "powerpc.tcc"
				>::OpMulhw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129995 "powerpc.tcc"
				>(code, addr, "mulhw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130010 "powerpc.tcc"
				>
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 130015 "powerpc.tcc"
				>::OpMulhwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130019 "powerpc.tcc"
				>(code, addr, "mulhwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130034 "powerpc.tcc"
				>
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 130039 "powerpc.tcc"
				>::OpMulli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130043 "powerpc.tcc"
				>(code, addr, "mulli")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130057 "powerpc.tcc"
				>
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 130062 "powerpc.tcc"
				>::OpMullw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130066 "powerpc.tcc"
				>(code, addr, "mullw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130082 "powerpc.tcc"
				>
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 130087 "powerpc.tcc"
				>::OpNeg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130091 "powerpc.tcc"
				>(code, addr, "neg")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130106 "powerpc.tcc"
				>
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 130111 "powerpc.tcc"
				>::OpSubf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130115 "powerpc.tcc"
				>(code, addr, "subf")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130131 "powerpc.tcc"
				>
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 130136 "powerpc.tcc"
				>::OpSubfc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130140 "powerpc.tcc"
				>(code, addr, "subfc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130156 "powerpc.tcc"
				>
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 130161 "powerpc.tcc"
				>::OpSubfe(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130165 "powerpc.tcc"
				>(code, addr, "subfe")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130181 "powerpc.tcc"
				>
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 130186 "powerpc.tcc"
				>::OpSubfic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130190 "powerpc.tcc"
				>(code, addr, "subfic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130204 "powerpc.tcc"
				>
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 130209 "powerpc.tcc"
				>::OpSubfme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130213 "powerpc.tcc"
				>(code, addr, "subfme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130228 "powerpc.tcc"
				>
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 130233 "powerpc.tcc"
				>::OpSubfze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130237 "powerpc.tcc"
				>(code, addr, "subfze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130252 "powerpc.tcc"
				>
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 130257 "powerpc.tcc"
				>::OpCmp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130261 "powerpc.tcc"
				>(code, addr, "cmp")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130273 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130276 "powerpc.tcc"
				>
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 130281 "powerpc.tcc"
				>::OpCmpi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130285 "powerpc.tcc"
				>(code, addr, "cmpi")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130297 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130300 "powerpc.tcc"
				>
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 130305 "powerpc.tcc"
				>::OpCmpl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130309 "powerpc.tcc"
				>(code, addr, "cmpl")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130324 "powerpc.tcc"
				>
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 130329 "powerpc.tcc"
				>::OpCmpli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130333 "powerpc.tcc"
				>(code, addr, "cmpli")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130348 "powerpc.tcc"
				>
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 130353 "powerpc.tcc"
				>::OpAnd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130357 "powerpc.tcc"
				>(code, addr, "and")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130372 "powerpc.tcc"
				>
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 130377 "powerpc.tcc"
				>::OpAndc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130381 "powerpc.tcc"
				>(code, addr, "andc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130393 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130396 "powerpc.tcc"
				>
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 130401 "powerpc.tcc"
				>::OpAndi_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130405 "powerpc.tcc"
				>(code, addr, "andi_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130419 "powerpc.tcc"
				>
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 130424 "powerpc.tcc"
				>::OpAndis_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130428 "powerpc.tcc"
				>(code, addr, "andis_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130442 "powerpc.tcc"
				>
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 130447 "powerpc.tcc"
				>::OpCntlzw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130451 "powerpc.tcc"
				>(code, addr, "cntlzw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130465 "powerpc.tcc"
				>
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 130470 "powerpc.tcc"
				>::OpEqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130474 "powerpc.tcc"
				>(code, addr, "eqv")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130489 "powerpc.tcc"
				>
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 130494 "powerpc.tcc"
				>::OpExtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130498 "powerpc.tcc"
				>(code, addr, "extsb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130512 "powerpc.tcc"
				>
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 130517 "powerpc.tcc"
				>::OpExtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130521 "powerpc.tcc"
				>(code, addr, "extsh")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130535 "powerpc.tcc"
				>
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 130540 "powerpc.tcc"
				>::OpNand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130544 "powerpc.tcc"
				>(code, addr, "nand")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130559 "powerpc.tcc"
				>
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 130564 "powerpc.tcc"
				>::OpNor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130568 "powerpc.tcc"
				>(code, addr, "nor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130583 "powerpc.tcc"
				>
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 130588 "powerpc.tcc"
				>::OpOr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130592 "powerpc.tcc"
				>(code, addr, "or")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130607 "powerpc.tcc"
				>
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 130612 "powerpc.tcc"
				>::OpOrc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130616 "powerpc.tcc"
				>(code, addr, "orc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130631 "powerpc.tcc"
				>
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 130636 "powerpc.tcc"
				>::OpOri(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130640 "powerpc.tcc"
				>(code, addr, "ori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130654 "powerpc.tcc"
				>
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 130659 "powerpc.tcc"
				>::OpOris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130663 "powerpc.tcc"
				>(code, addr, "oris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130677 "powerpc.tcc"
				>
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 130682 "powerpc.tcc"
				>::OpXor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130686 "powerpc.tcc"
				>(code, addr, "xor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130701 "powerpc.tcc"
				>
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 130706 "powerpc.tcc"
				>::OpXori(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130710 "powerpc.tcc"
				>(code, addr, "xori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130724 "powerpc.tcc"
				>
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 130729 "powerpc.tcc"
				>::OpXoris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130733 "powerpc.tcc"
				>(code, addr, "xoris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130747 "powerpc.tcc"
				>
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 130752 "powerpc.tcc"
				>::OpRlwimi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130756 "powerpc.tcc"
				>(code, addr, "rlwimi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130773 "powerpc.tcc"
				>
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 130778 "powerpc.tcc"
				>::OpRlwinm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130782 "powerpc.tcc"
				>(code, addr, "rlwinm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130799 "powerpc.tcc"
				>
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 130804 "powerpc.tcc"
				>::OpRlwnm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130808 "powerpc.tcc"
				>(code, addr, "rlwnm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130825 "powerpc.tcc"
				>
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 130830 "powerpc.tcc"
				>::OpSlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130834 "powerpc.tcc"
				>(code, addr, "slw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130849 "powerpc.tcc"
				>
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 130854 "powerpc.tcc"
				>::OpSraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130858 "powerpc.tcc"
				>(code, addr, "sraw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130873 "powerpc.tcc"
				>
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 130878 "powerpc.tcc"
				>::OpSrawi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130882 "powerpc.tcc"
				>(code, addr, "srawi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130897 "powerpc.tcc"
				>
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 130902 "powerpc.tcc"
				>::OpSrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130906 "powerpc.tcc"
				>(code, addr, "srw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130921 "powerpc.tcc"
				>
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 130926 "powerpc.tcc"
				>::OpFadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130930 "powerpc.tcc"
				>(code, addr, "fadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130945 "powerpc.tcc"
				>
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 130950 "powerpc.tcc"
				>::OpFadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130954 "powerpc.tcc"
				>(code, addr, "fadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130969 "powerpc.tcc"
				>
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 130974 "powerpc.tcc"
				>::OpFdiv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130978 "powerpc.tcc"
				>(code, addr, "fdiv")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130993 "powerpc.tcc"
				>
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 130998 "powerpc.tcc"
				>::OpFdivs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131002 "powerpc.tcc"
				>(code, addr, "fdivs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131017 "powerpc.tcc"
				>
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 131022 "powerpc.tcc"
				>::OpFmul(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131026 "powerpc.tcc"
				>(code, addr, "fmul")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131041 "powerpc.tcc"
				>
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 131046 "powerpc.tcc"
				>::OpFmuls(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131050 "powerpc.tcc"
				>(code, addr, "fmuls")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131065 "powerpc.tcc"
				>
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 131070 "powerpc.tcc"
				>::OpFres(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131074 "powerpc.tcc"
				>(code, addr, "fres")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131088 "powerpc.tcc"
				>
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 131093 "powerpc.tcc"
				>::OpFrsqrte(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131097 "powerpc.tcc"
				>(code, addr, "frsqrte")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131111 "powerpc.tcc"
				>
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 131116 "powerpc.tcc"
				>::OpFsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131120 "powerpc.tcc"
				>(code, addr, "fsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131135 "powerpc.tcc"
				>
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131140 "powerpc.tcc"
				>::OpFsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131144 "powerpc.tcc"
				>(code, addr, "fsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131159 "powerpc.tcc"
				>
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 131164 "powerpc.tcc"
				>::OpFsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131168 "powerpc.tcc"
				>(code, addr, "fsel")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131184 "powerpc.tcc"
				>
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 131189 "powerpc.tcc"
				>::OpFsqrt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131193 "powerpc.tcc"
				>(code, addr, "fsqrt")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131207 "powerpc.tcc"
				>
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 131212 "powerpc.tcc"
				>::OpFsqrts(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131216 "powerpc.tcc"
				>(code, addr, "fsqrts")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131230 "powerpc.tcc"
				>
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 131235 "powerpc.tcc"
				>::OpFmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131239 "powerpc.tcc"
				>(code, addr, "fmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131255 "powerpc.tcc"
				>
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 131260 "powerpc.tcc"
				>::OpFmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131264 "powerpc.tcc"
				>(code, addr, "fmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131280 "powerpc.tcc"
				>
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 131285 "powerpc.tcc"
				>::OpFmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131289 "powerpc.tcc"
				>(code, addr, "fmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131305 "powerpc.tcc"
				>
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131310 "powerpc.tcc"
				>::OpFmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131314 "powerpc.tcc"
				>(code, addr, "fmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131330 "powerpc.tcc"
				>
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 131335 "powerpc.tcc"
				>::OpFnmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131339 "powerpc.tcc"
				>(code, addr, "fnmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131355 "powerpc.tcc"
				>
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 131360 "powerpc.tcc"
				>::OpFnmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131364 "powerpc.tcc"
				>(code, addr, "fnmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131380 "powerpc.tcc"
				>
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 131385 "powerpc.tcc"
				>::OpFnmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131389 "powerpc.tcc"
				>(code, addr, "fnmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131405 "powerpc.tcc"
				>
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131410 "powerpc.tcc"
				>::OpFnmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131414 "powerpc.tcc"
				>(code, addr, "fnmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131430 "powerpc.tcc"
				>
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 131435 "powerpc.tcc"
				>::OpFcmpo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131439 "powerpc.tcc"
				>(code, addr, "fcmpo")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131453 "powerpc.tcc"
				>
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 131458 "powerpc.tcc"
				>::OpFcmpu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131462 "powerpc.tcc"
				>(code, addr, "fcmpu")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131476 "powerpc.tcc"
				>
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 131481 "powerpc.tcc"
				>::OpFctiw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131485 "powerpc.tcc"
				>(code, addr, "fctiw")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131499 "powerpc.tcc"
				>
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 131504 "powerpc.tcc"
				>::OpFctiwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131508 "powerpc.tcc"
				>(code, addr, "fctiwz")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131522 "powerpc.tcc"
				>
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 131527 "powerpc.tcc"
				>::OpFrsp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131531 "powerpc.tcc"
				>(code, addr, "frsp")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131545 "powerpc.tcc"
				>
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 131550 "powerpc.tcc"
				>::OpFabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131554 "powerpc.tcc"
				>(code, addr, "fabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131568 "powerpc.tcc"
				>
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 131573 "powerpc.tcc"
				>::OpFmr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131577 "powerpc.tcc"
				>(code, addr, "fmr")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131591 "powerpc.tcc"
				>
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 131596 "powerpc.tcc"
				>::OpFnabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131600 "powerpc.tcc"
				>(code, addr, "fnabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131614 "powerpc.tcc"
				>
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 131619 "powerpc.tcc"
				>::OpFneg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131623 "powerpc.tcc"
				>(code, addr, "fneg")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131637 "powerpc.tcc"
				>
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 131642 "powerpc.tcc"
				>::OpMcrfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131646 "powerpc.tcc"
				>(code, addr, "mcrfs")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131659 "powerpc.tcc"
				>
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 131664 "powerpc.tcc"
				>::OpMffs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131668 "powerpc.tcc"
				>(code, addr, "mffs")
				{
					fd = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131681 "powerpc.tcc"
				>
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 131686 "powerpc.tcc"
				>::OpMtfsb0(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131690 "powerpc.tcc"
				>(code, addr, "mtfsb0")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131703 "powerpc.tcc"
				>
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 131708 "powerpc.tcc"
				>::OpMtfsb1(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131712 "powerpc.tcc"
				>(code, addr, "mtfsb1")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131725 "powerpc.tcc"
				>
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 131730 "powerpc.tcc"
				>::OpMtfsf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131734 "powerpc.tcc"
				>(code, addr, "mtfsf")
				{
					fm = ((code >> 17) & 0xff);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131748 "powerpc.tcc"
				>
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 131753 "powerpc.tcc"
				>::OpMtfsfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131757 "powerpc.tcc"
				>(code, addr, "mtfsfi")
				{
					crfD = ((code >> 23) & 0x7);
					imm = ((code >> 12) & 0xf);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131771 "powerpc.tcc"
				>
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 131776 "powerpc.tcc"
				>::OpB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131780 "powerpc.tcc"
				>(code, addr, "b")
				{
					li = (((((int32_t)(code >> 2)) & 0xffffff) << 8) >> 8) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131794 "powerpc.tcc"
				>
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 131799 "powerpc.tcc"
				>::OpBc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131803 "powerpc.tcc"
				>(code, addr, "bc")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					bd = (((((int32_t)(code >> 2)) & 0x3fff) << 18) >> 18) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131819 "powerpc.tcc"
				>
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 131824 "powerpc.tcc"
				>::OpBcctr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131828 "powerpc.tcc"
				>(code, addr, "bcctr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131842 "powerpc.tcc"
				>
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 131847 "powerpc.tcc"
				>::OpBclr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131851 "powerpc.tcc"
				>(code, addr, "bclr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131865 "powerpc.tcc"
				>
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 131870 "powerpc.tcc"
				>::OpCrand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131874 "powerpc.tcc"
				>(code, addr, "crand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131888 "powerpc.tcc"
				>
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 131893 "powerpc.tcc"
				>::OpCrandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131897 "powerpc.tcc"
				>(code, addr, "crandc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131908 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131911 "powerpc.tcc"
				>
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 131916 "powerpc.tcc"
				>::OpCreqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131920 "powerpc.tcc"
				>(code, addr, "creqv")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131934 "powerpc.tcc"
				>
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 131939 "powerpc.tcc"
				>::OpCrnand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131943 "powerpc.tcc"
				>(code, addr, "crnand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131957 "powerpc.tcc"
				>
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 131962 "powerpc.tcc"
				>::OpCrnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131966 "powerpc.tcc"
				>(code, addr, "crnor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131980 "powerpc.tcc"
				>
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 131985 "powerpc.tcc"
				>::OpCror(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131989 "powerpc.tcc"
				>(code, addr, "cror")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132003 "powerpc.tcc"
				>
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 132008 "powerpc.tcc"
				>::OpCrorc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132012 "powerpc.tcc"
				>(code, addr, "crorc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132026 "powerpc.tcc"
				>
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 132031 "powerpc.tcc"
				>::OpCrxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132035 "powerpc.tcc"
				>(code, addr, "crxor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132049 "powerpc.tcc"
				>
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 132054 "powerpc.tcc"
				>::OpMcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132058 "powerpc.tcc"
				>(code, addr, "mcrf")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132071 "powerpc.tcc"
				>
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 132076 "powerpc.tcc"
				>::OpLbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132080 "powerpc.tcc"
				>(code, addr, "lbz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132091 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132094 "powerpc.tcc"
				>
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 132099 "powerpc.tcc"
				>::OpLbzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132103 "powerpc.tcc"
				>(code, addr, "lbzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132117 "powerpc.tcc"
				>
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 132122 "powerpc.tcc"
				>::OpLbzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132126 "powerpc.tcc"
				>(code, addr, "lbzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132137 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132140 "powerpc.tcc"
				>
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 132145 "powerpc.tcc"
				>::OpLbzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132149 "powerpc.tcc"
				>(code, addr, "lbzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132163 "powerpc.tcc"
				>
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 132168 "powerpc.tcc"
				>::OpLha(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132172 "powerpc.tcc"
				>(code, addr, "lha")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132186 "powerpc.tcc"
				>
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 132191 "powerpc.tcc"
				>::OpLhau(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132195 "powerpc.tcc"
				>(code, addr, "lhau")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132209 "powerpc.tcc"
				>
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 132214 "powerpc.tcc"
				>::OpLhaux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132218 "powerpc.tcc"
				>(code, addr, "lhaux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132232 "powerpc.tcc"
				>
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 132237 "powerpc.tcc"
				>::OpLhax(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132241 "powerpc.tcc"
				>(code, addr, "lhax")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132255 "powerpc.tcc"
				>
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 132260 "powerpc.tcc"
				>::OpLhz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132264 "powerpc.tcc"
				>(code, addr, "lhz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132278 "powerpc.tcc"
				>
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 132283 "powerpc.tcc"
				>::OpLhzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132287 "powerpc.tcc"
				>(code, addr, "lhzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132301 "powerpc.tcc"
				>
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 132306 "powerpc.tcc"
				>::OpLhzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132310 "powerpc.tcc"
				>(code, addr, "lhzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132324 "powerpc.tcc"
				>
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 132329 "powerpc.tcc"
				>::OpLhzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132333 "powerpc.tcc"
				>(code, addr, "lhzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132347 "powerpc.tcc"
				>
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 132352 "powerpc.tcc"
				>::OpLwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132356 "powerpc.tcc"
				>(code, addr, "lwz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132370 "powerpc.tcc"
				>
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 132375 "powerpc.tcc"
				>::OpLwzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132379 "powerpc.tcc"
				>(code, addr, "lwzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132393 "powerpc.tcc"
				>
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 132398 "powerpc.tcc"
				>::OpLwzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132402 "powerpc.tcc"
				>(code, addr, "lwzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132416 "powerpc.tcc"
				>
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 132421 "powerpc.tcc"
				>::OpLwzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132425 "powerpc.tcc"
				>(code, addr, "lwzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132439 "powerpc.tcc"
				>
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 132444 "powerpc.tcc"
				>::OpStb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132448 "powerpc.tcc"
				>(code, addr, "stb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132462 "powerpc.tcc"
				>
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 132467 "powerpc.tcc"
				>::OpStbu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132471 "powerpc.tcc"
				>(code, addr, "stbu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132482 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132485 "powerpc.tcc"
				>
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 132490 "powerpc.tcc"
				>::OpStbux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132494 "powerpc.tcc"
				>(code, addr, "stbux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132508 "powerpc.tcc"
				>
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 132513 "powerpc.tcc"
				>::OpStbx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132517 "powerpc.tcc"
				>(code, addr, "stbx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132531 "powerpc.tcc"
				>
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 132536 "powerpc.tcc"
				>::OpSth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132540 "powerpc.tcc"
				>(code, addr, "sth")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132554 "powerpc.tcc"
				>
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 132559 "powerpc.tcc"
				>::OpSthu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132563 "powerpc.tcc"
				>(code, addr, "sthu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132577 "powerpc.tcc"
				>
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 132582 "powerpc.tcc"
				>::OpSthux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132586 "powerpc.tcc"
				>(code, addr, "sthux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132600 "powerpc.tcc"
				>
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 132605 "powerpc.tcc"
				>::OpSthx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132609 "powerpc.tcc"
				>(code, addr, "sthx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132623 "powerpc.tcc"
				>
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 132628 "powerpc.tcc"
				>::OpStw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132632 "powerpc.tcc"
				>(code, addr, "stw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132646 "powerpc.tcc"
				>
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 132651 "powerpc.tcc"
				>::OpStwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132655 "powerpc.tcc"
				>(code, addr, "stwu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132669 "powerpc.tcc"
				>
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 132674 "powerpc.tcc"
				>::OpStwux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132678 "powerpc.tcc"
				>(code, addr, "stwux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132692 "powerpc.tcc"
				>
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 132697 "powerpc.tcc"
				>::OpStwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132701 "powerpc.tcc"
				>(code, addr, "stwx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132715 "powerpc.tcc"
				>
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132720 "powerpc.tcc"
				>::OpLhbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132724 "powerpc.tcc"
				>(code, addr, "lhbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132735 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132738 "powerpc.tcc"
				>
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132743 "powerpc.tcc"
				>::OpLwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132747 "powerpc.tcc"
				>(code, addr, "lwbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132761 "powerpc.tcc"
				>
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132766 "powerpc.tcc"
				>::OpSthbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132770 "powerpc.tcc"
				>(code, addr, "sthbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132784 "powerpc.tcc"
				>
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132789 "powerpc.tcc"
				>::OpStwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132793 "powerpc.tcc"
				>(code, addr, "stwbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132807 "powerpc.tcc"
				>
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 132812 "powerpc.tcc"
				>::OpLswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132816 "powerpc.tcc"
				>(code, addr, "lswi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132827 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132830 "powerpc.tcc"
				>
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 132835 "powerpc.tcc"
				>::OpLswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132839 "powerpc.tcc"
				>(code, addr, "lswx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132853 "powerpc.tcc"
				>
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 132858 "powerpc.tcc"
				>::OpStswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132862 "powerpc.tcc"
				>(code, addr, "stswi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132876 "powerpc.tcc"
				>
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 132881 "powerpc.tcc"
				>::OpStswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132885 "powerpc.tcc"
				>(code, addr, "stswx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132899 "powerpc.tcc"
				>
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 132904 "powerpc.tcc"
				>::OpLmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132908 "powerpc.tcc"
				>(code, addr, "lmw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132922 "powerpc.tcc"
				>
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 132927 "powerpc.tcc"
				>::OpStmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132931 "powerpc.tcc"
				>(code, addr, "stmw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132945 "powerpc.tcc"
				>
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 132950 "powerpc.tcc"
				>::OpLfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132954 "powerpc.tcc"
				>(code, addr, "lfd")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132968 "powerpc.tcc"
				>
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 132973 "powerpc.tcc"
				>::OpLfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132977 "powerpc.tcc"
				>(code, addr, "lfdu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132991 "powerpc.tcc"
				>
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 132996 "powerpc.tcc"
				>::OpLfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133000 "powerpc.tcc"
				>(code, addr, "lfdux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133014 "powerpc.tcc"
				>
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 133019 "powerpc.tcc"
				>::OpLfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133023 "powerpc.tcc"
				>(code, addr, "lfdx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133037 "powerpc.tcc"
				>
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 133042 "powerpc.tcc"
				>::OpLfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133046 "powerpc.tcc"
				>(code, addr, "lfs")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133060 "powerpc.tcc"
				>
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 133065 "powerpc.tcc"
				>::OpLfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133069 "powerpc.tcc"
				>(code, addr, "lfsu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133083 "powerpc.tcc"
				>
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 133088 "powerpc.tcc"
				>::OpLfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133092 "powerpc.tcc"
				>(code, addr, "lfsux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133106 "powerpc.tcc"
				>
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 133111 "powerpc.tcc"
				>::OpLfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133115 "powerpc.tcc"
				>(code, addr, "lfsx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133129 "powerpc.tcc"
				>
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 133134 "powerpc.tcc"
				>::OpStfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133138 "powerpc.tcc"
				>(code, addr, "stfd")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133152 "powerpc.tcc"
				>
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 133157 "powerpc.tcc"
				>::OpStfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133161 "powerpc.tcc"
				>(code, addr, "stfdu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133175 "powerpc.tcc"
				>
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 133180 "powerpc.tcc"
				>::OpStfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133184 "powerpc.tcc"
				>(code, addr, "stfdux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133198 "powerpc.tcc"
				>
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 133203 "powerpc.tcc"
				>::OpStfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133207 "powerpc.tcc"
				>(code, addr, "stfdx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133218 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133221 "powerpc.tcc"
				>
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 133226 "powerpc.tcc"
				>::OpStfiwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133230 "powerpc.tcc"
				>(code, addr, "stfiwx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133244 "powerpc.tcc"
				>
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 133249 "powerpc.tcc"
				>::OpStfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133253 "powerpc.tcc"
				>(code, addr, "stfs")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133267 "powerpc.tcc"
				>
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 133272 "powerpc.tcc"
				>::OpStfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133276 "powerpc.tcc"
				>(code, addr, "stfsu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133290 "powerpc.tcc"
				>
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 133295 "powerpc.tcc"
				>::OpStfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133299 "powerpc.tcc"
				>(code, addr, "stfsux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133313 "powerpc.tcc"
				>
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 133318 "powerpc.tcc"
				>::OpStfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133322 "powerpc.tcc"
				>(code, addr, "stfsx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133336 "powerpc.tcc"
				>
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 133341 "powerpc.tcc"
				>::OpDcba(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133345 "powerpc.tcc"
				>(code, addr, "dcba")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133358 "powerpc.tcc"
				>
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 133363 "powerpc.tcc"
				>::OpDcbf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133367 "powerpc.tcc"
				>(code, addr, "dcbf")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133380 "powerpc.tcc"
				>
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 133385 "powerpc.tcc"
				>::OpDcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133389 "powerpc.tcc"
				>(code, addr, "dcbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133402 "powerpc.tcc"
				>
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 133407 "powerpc.tcc"
				>::OpDcbst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133411 "powerpc.tcc"
				>(code, addr, "dcbst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133424 "powerpc.tcc"
				>
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 133429 "powerpc.tcc"
				>::OpDcbt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133433 "powerpc.tcc"
				>(code, addr, "dcbt")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133446 "powerpc.tcc"
				>
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 133451 "powerpc.tcc"
				>::OpDcbtst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133455 "powerpc.tcc"
				>(code, addr, "dcbtst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133468 "powerpc.tcc"
				>
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 133473 "powerpc.tcc"
				>::OpDcbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133477 "powerpc.tcc"
				>(code, addr, "dcbz")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133490 "powerpc.tcc"
				>
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 133495 "powerpc.tcc"
				>::OpIcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133499 "powerpc.tcc"
				>(code, addr, "icbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133512 "powerpc.tcc"
				>
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 133517 "powerpc.tcc"
				>::OpTlbia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133521 "powerpc.tcc"
				>(code, addr, "tlbia")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133532 "powerpc.tcc"
				>
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 133537 "powerpc.tcc"
				>::OpTlbie(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133541 "powerpc.tcc"
				>(code, addr, "tlbie")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133553 "powerpc.tcc"
				>
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 133558 "powerpc.tcc"
				>::OpTlbsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133562 "powerpc.tcc"
				>(code, addr, "tlbsync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133573 "powerpc.tcc"
				>
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 133578 "powerpc.tcc"
				>::OpTlbld(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133582 "powerpc.tcc"
				>(code, addr, "tlbld")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133594 "powerpc.tcc"
				>
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 133599 "powerpc.tcc"
				>::OpTlbli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133603 "powerpc.tcc"
				>(code, addr, "tlbli")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133615 "powerpc.tcc"
				>
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 133620 "powerpc.tcc"
				>::OpEciwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133624 "powerpc.tcc"
				>(code, addr, "eciwx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133638 "powerpc.tcc"
				>
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 133643 "powerpc.tcc"
				>::OpEcowx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133647 "powerpc.tcc"
				>(code, addr, "ecowx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133661 "powerpc.tcc"
				>
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 133666 "powerpc.tcc"
				>::OpEieio(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133670 "powerpc.tcc"
				>(code, addr, "eieio")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133681 "powerpc.tcc"
				>
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 133686 "powerpc.tcc"
				>::OpIsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133690 "powerpc.tcc"
				>(code, addr, "isync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133701 "powerpc.tcc"
				>
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 133706 "powerpc.tcc"
				>::OpLwarx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133710 "powerpc.tcc"
				>(code, addr, "lwarx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133724 "powerpc.tcc"
				>
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 133729 "powerpc.tcc"
				>::OpStwcx_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133733 "powerpc.tcc"
				>(code, addr, "stwcx_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133747 "powerpc.tcc"
				>
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 133752 "powerpc.tcc"
				>::OpSync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133756 "powerpc.tcc"
				>(code, addr, "sync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133767 "powerpc.tcc"
				>
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 133772 "powerpc.tcc"
				>::OpSc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133776 "powerpc.tcc"
				>(code, addr, "sc")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133787 "powerpc.tcc"
				>
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 133792 "powerpc.tcc"
				>::OpRfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133796 "powerpc.tcc"
				>(code, addr, "rfi")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133807 "powerpc.tcc"
				>
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 133812 "powerpc.tcc"
				>::OpTw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133816 "powerpc.tcc"
				>(code, addr, "tw")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133827 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133830 "powerpc.tcc"
				>
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 133835 "powerpc.tcc"
				>::OpTwi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133839 "powerpc.tcc"
				>(code, addr, "twi")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133853 "powerpc.tcc"
				>
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 133858 "powerpc.tcc"
				>::OpMcrxr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133862 "powerpc.tcc"
				>(code, addr, "mcrxr")
				{
					crfD = ((code >> 23) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133874 "powerpc.tcc"
				>
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 133879 "powerpc.tcc"
				>::OpMfcr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133883 "powerpc.tcc"
				>(code, addr, "mfcr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133895 "powerpc.tcc"
				>
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 133900 "powerpc.tcc"
				>::OpMfmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133904 "powerpc.tcc"
				>(code, addr, "mfmsr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133916 "powerpc.tcc"
				>
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 133921 "powerpc.tcc"
				>::OpMfspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133925 "powerpc.tcc"
				>(code, addr, "mfspr")
				{
					rd = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133938 "powerpc.tcc"
				>
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 133943 "powerpc.tcc"
				>::OpMtspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133947 "powerpc.tcc"
				>(code, addr, "mtspr")
				{
					rs = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133960 "powerpc.tcc"
				>
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 133965 "powerpc.tcc"
				>::OpMftb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133969 "powerpc.tcc"
				>(code, addr, "mftb")
				{
					rd = ((code >> 21) & 0x1f);
					tbr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133982 "powerpc.tcc"
				>
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 133987 "powerpc.tcc"
				>::OpMtcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133991 "powerpc.tcc"
				>(code, addr, "mtcrf")
				{
					rs = ((code >> 21) & 0x1f);
					crm = ((code >> 12) & 0xff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134004 "powerpc.tcc"
				>
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 134009 "powerpc.tcc"
				>::OpMtmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134013 "powerpc.tcc"
				>(code, addr, "mtmsr")
				{
					rs = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134025 "powerpc.tcc"
				>
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 134030 "powerpc.tcc"
				>::OpMfsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134034 "powerpc.tcc"
				>(code, addr, "mfsr")
				{
					rd = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134047 "powerpc.tcc"
				>
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 134052 "powerpc.tcc"
				>::OpMfsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134056 "powerpc.tcc"
				>(code, addr, "mfsrin")
				{
					rd = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134069 "powerpc.tcc"
				>
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 134074 "powerpc.tcc"
				>::OpMtsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134078 "powerpc.tcc"
				>(code, addr, "mtsr")
				{
					rs = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134091 "powerpc.tcc"
				>
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 134096 "powerpc.tcc"
				>::OpMtsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134100 "powerpc.tcc"
				>(code, addr, "mtsrin")
				{
					rs = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134113 "powerpc.tcc"
				>
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 134118 "powerpc.tcc"
				>::OpDss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134122 "powerpc.tcc"
				>(code, addr, "dss")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134131 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134134 "powerpc.tcc"
				>
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 134139 "powerpc.tcc"
				>::OpDssall(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134143 "powerpc.tcc"
				>(code, addr, "dssall")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134155 "powerpc.tcc"
				>
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 134160 "powerpc.tcc"
				>::OpDst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134164 "powerpc.tcc"
				>(code, addr, "dst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134178 "powerpc.tcc"
				>
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 134183 "powerpc.tcc"
				>::OpDstst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134187 "powerpc.tcc"
				>(code, addr, "dstst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134201 "powerpc.tcc"
				>
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 134206 "powerpc.tcc"
				>::OpDststt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134210 "powerpc.tcc"
				>(code, addr, "dststt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134224 "powerpc.tcc"
				>
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 134229 "powerpc.tcc"
				>::OpDstt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134233 "powerpc.tcc"
				>(code, addr, "dstt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134247 "powerpc.tcc"
				>
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 134252 "powerpc.tcc"
				>::OpLvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134256 "powerpc.tcc"
				>(code, addr, "lvebx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134270 "powerpc.tcc"
				>
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 134275 "powerpc.tcc"
				>::OpLvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134279 "powerpc.tcc"
				>(code, addr, "lvehx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134293 "powerpc.tcc"
				>
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 134298 "powerpc.tcc"
				>::OpLvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134302 "powerpc.tcc"
				>(code, addr, "lvewx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134316 "powerpc.tcc"
				>
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 134321 "powerpc.tcc"
				>::OpLvsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134325 "powerpc.tcc"
				>(code, addr, "lvsl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134336 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134339 "powerpc.tcc"
				>
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 134344 "powerpc.tcc"
				>::OpLvsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134348 "powerpc.tcc"
				>(code, addr, "lvsr")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134362 "powerpc.tcc"
				>
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 134367 "powerpc.tcc"
				>::OpLvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134371 "powerpc.tcc"
				>(code, addr, "lvx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134385 "powerpc.tcc"
				>
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 134390 "powerpc.tcc"
				>::OpLvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134394 "powerpc.tcc"
				>(code, addr, "lvxl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134408 "powerpc.tcc"
				>
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 134413 "powerpc.tcc"
				>::OpMfvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134417 "powerpc.tcc"
				>(code, addr, "mfvscr")
				{
					vd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134429 "powerpc.tcc"
				>
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 134434 "powerpc.tcc"
				>::OpMtvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134438 "powerpc.tcc"
				>(code, addr, "mtvscr")
				{
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134450 "powerpc.tcc"
				>
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 134455 "powerpc.tcc"
				>::OpStvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134459 "powerpc.tcc"
				>(code, addr, "stvebx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134473 "powerpc.tcc"
				>
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 134478 "powerpc.tcc"
				>::OpStvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134482 "powerpc.tcc"
				>(code, addr, "stvehx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134496 "powerpc.tcc"
				>
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 134501 "powerpc.tcc"
				>::OpStvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134505 "powerpc.tcc"
				>(code, addr, "stvewx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134519 "powerpc.tcc"
				>
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 134524 "powerpc.tcc"
				>::OpStvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134528 "powerpc.tcc"
				>(code, addr, "stvx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134542 "powerpc.tcc"
				>
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 134547 "powerpc.tcc"
				>::OpStvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134551 "powerpc.tcc"
				>(code, addr, "stvxl")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134565 "powerpc.tcc"
				>
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 134570 "powerpc.tcc"
				>::OpVaddcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134574 "powerpc.tcc"
				>(code, addr, "vaddcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134588 "powerpc.tcc"
				>
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 134593 "powerpc.tcc"
				>::OpVaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134597 "powerpc.tcc"
				>(code, addr, "vaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134611 "powerpc.tcc"
				>
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 134616 "powerpc.tcc"
				>::OpVaddsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134620 "powerpc.tcc"
				>(code, addr, "vaddsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134634 "powerpc.tcc"
				>
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 134639 "powerpc.tcc"
				>::OpVaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134643 "powerpc.tcc"
				>(code, addr, "vaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134657 "powerpc.tcc"
				>
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 134662 "powerpc.tcc"
				>::OpVaddsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134666 "powerpc.tcc"
				>(code, addr, "vaddsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134680 "powerpc.tcc"
				>
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 134685 "powerpc.tcc"
				>::OpVaddubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134689 "powerpc.tcc"
				>(code, addr, "vaddubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134703 "powerpc.tcc"
				>
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 134708 "powerpc.tcc"
				>::OpVaddubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134712 "powerpc.tcc"
				>(code, addr, "vaddubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134726 "powerpc.tcc"
				>
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 134731 "powerpc.tcc"
				>::OpVadduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134735 "powerpc.tcc"
				>(code, addr, "vadduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134749 "powerpc.tcc"
				>
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 134754 "powerpc.tcc"
				>::OpVadduhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134758 "powerpc.tcc"
				>(code, addr, "vadduhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134772 "powerpc.tcc"
				>
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 134777 "powerpc.tcc"
				>::OpVadduwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134781 "powerpc.tcc"
				>(code, addr, "vadduwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134795 "powerpc.tcc"
				>
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 134800 "powerpc.tcc"
				>::OpVadduws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134804 "powerpc.tcc"
				>(code, addr, "vadduws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134815 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134818 "powerpc.tcc"
				>
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 134823 "powerpc.tcc"
				>::OpVand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134827 "powerpc.tcc"
				>(code, addr, "vand")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134841 "powerpc.tcc"
				>
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 134846 "powerpc.tcc"
				>::OpVandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134850 "powerpc.tcc"
				>(code, addr, "vandc")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134864 "powerpc.tcc"
				>
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 134869 "powerpc.tcc"
				>::OpVavgsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134873 "powerpc.tcc"
				>(code, addr, "vavgsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134887 "powerpc.tcc"
				>
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 134892 "powerpc.tcc"
				>::OpVavgsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134896 "powerpc.tcc"
				>(code, addr, "vavgsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134910 "powerpc.tcc"
				>
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 134915 "powerpc.tcc"
				>::OpVavgsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134919 "powerpc.tcc"
				>(code, addr, "vavgsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134933 "powerpc.tcc"
				>
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 134938 "powerpc.tcc"
				>::OpVavgub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134942 "powerpc.tcc"
				>(code, addr, "vavgub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134956 "powerpc.tcc"
				>
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 134961 "powerpc.tcc"
				>::OpVavguh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134965 "powerpc.tcc"
				>(code, addr, "vavguh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134979 "powerpc.tcc"
				>
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 134984 "powerpc.tcc"
				>::OpVavguw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134988 "powerpc.tcc"
				>(code, addr, "vavguw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135002 "powerpc.tcc"
				>
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 135007 "powerpc.tcc"
				>::OpVcfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135011 "powerpc.tcc"
				>(code, addr, "vcfsx")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135025 "powerpc.tcc"
				>
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 135030 "powerpc.tcc"
				>::OpVcfux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135034 "powerpc.tcc"
				>(code, addr, "vcfux")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135048 "powerpc.tcc"
				>
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 135053 "powerpc.tcc"
				>::OpVcmpbfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135057 "powerpc.tcc"
				>(code, addr, "vcmpbfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135072 "powerpc.tcc"
				>
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 135077 "powerpc.tcc"
				>::OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135081 "powerpc.tcc"
				>(code, addr, "vcmpeqfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135096 "powerpc.tcc"
				>
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 135101 "powerpc.tcc"
				>::OpVcmpequb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135105 "powerpc.tcc"
				>(code, addr, "vcmpequb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135120 "powerpc.tcc"
				>
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 135125 "powerpc.tcc"
				>::OpVcmpequh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135129 "powerpc.tcc"
				>(code, addr, "vcmpequh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135144 "powerpc.tcc"
				>
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 135149 "powerpc.tcc"
				>::OpVcmpequw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135153 "powerpc.tcc"
				>(code, addr, "vcmpequw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135168 "powerpc.tcc"
				>
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 135173 "powerpc.tcc"
				>::OpVcmpgefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135177 "powerpc.tcc"
				>(code, addr, "vcmpgefp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135192 "powerpc.tcc"
				>
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 135197 "powerpc.tcc"
				>::OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135201 "powerpc.tcc"
				>(code, addr, "vcmpgtfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135216 "powerpc.tcc"
				>
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 135221 "powerpc.tcc"
				>::OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135225 "powerpc.tcc"
				>(code, addr, "vcmpgtsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135240 "powerpc.tcc"
				>
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 135245 "powerpc.tcc"
				>::OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135249 "powerpc.tcc"
				>(code, addr, "vcmpgtsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135264 "powerpc.tcc"
				>
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 135269 "powerpc.tcc"
				>::OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135273 "powerpc.tcc"
				>(code, addr, "vcmpgtsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135288 "powerpc.tcc"
				>
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 135293 "powerpc.tcc"
				>::OpVcmpgtub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135297 "powerpc.tcc"
				>(code, addr, "vcmpgtub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135312 "powerpc.tcc"
				>
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 135317 "powerpc.tcc"
				>::OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135321 "powerpc.tcc"
				>(code, addr, "vcmpgtuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135336 "powerpc.tcc"
				>
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 135341 "powerpc.tcc"
				>::OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135345 "powerpc.tcc"
				>(code, addr, "vcmpgtuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135360 "powerpc.tcc"
				>
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 135365 "powerpc.tcc"
				>::OpVctsxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135369 "powerpc.tcc"
				>(code, addr, "vctsxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135383 "powerpc.tcc"
				>
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 135388 "powerpc.tcc"
				>::OpVctuxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135392 "powerpc.tcc"
				>(code, addr, "vctuxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135406 "powerpc.tcc"
				>
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 135411 "powerpc.tcc"
				>::OpVexptefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135415 "powerpc.tcc"
				>(code, addr, "vexptefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135428 "powerpc.tcc"
				>
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 135433 "powerpc.tcc"
				>::OpVlogefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135437 "powerpc.tcc"
				>(code, addr, "vlogefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135450 "powerpc.tcc"
				>
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 135455 "powerpc.tcc"
				>::OpVmaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135459 "powerpc.tcc"
				>(code, addr, "vmaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135474 "powerpc.tcc"
				>
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 135479 "powerpc.tcc"
				>::OpVmaxfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135483 "powerpc.tcc"
				>(code, addr, "vmaxfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135497 "powerpc.tcc"
				>
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 135502 "powerpc.tcc"
				>::OpVmaxsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135506 "powerpc.tcc"
				>(code, addr, "vmaxsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135520 "powerpc.tcc"
				>
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 135525 "powerpc.tcc"
				>::OpVmaxsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135529 "powerpc.tcc"
				>(code, addr, "vmaxsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135543 "powerpc.tcc"
				>
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 135548 "powerpc.tcc"
				>::OpVmaxsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135552 "powerpc.tcc"
				>(code, addr, "vmaxsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135566 "powerpc.tcc"
				>
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 135571 "powerpc.tcc"
				>::OpVmaxub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135575 "powerpc.tcc"
				>(code, addr, "vmaxub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135589 "powerpc.tcc"
				>
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 135594 "powerpc.tcc"
				>::OpVmaxuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135598 "powerpc.tcc"
				>(code, addr, "vmaxuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135612 "powerpc.tcc"
				>
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 135617 "powerpc.tcc"
				>::OpVmaxuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135621 "powerpc.tcc"
				>(code, addr, "vmaxuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135635 "powerpc.tcc"
				>
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 135640 "powerpc.tcc"
				>::OpVmhaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135644 "powerpc.tcc"
				>(code, addr, "vmhaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135659 "powerpc.tcc"
				>
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 135664 "powerpc.tcc"
				>::OpVmhraddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135668 "powerpc.tcc"
				>(code, addr, "vmhraddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135683 "powerpc.tcc"
				>
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 135688 "powerpc.tcc"
				>::OpVminfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135692 "powerpc.tcc"
				>(code, addr, "vminfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135706 "powerpc.tcc"
				>
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 135711 "powerpc.tcc"
				>::OpVminsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135715 "powerpc.tcc"
				>(code, addr, "vminsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135729 "powerpc.tcc"
				>
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 135734 "powerpc.tcc"
				>::OpVminsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135738 "powerpc.tcc"
				>(code, addr, "vminsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135752 "powerpc.tcc"
				>
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 135757 "powerpc.tcc"
				>::OpVminsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135761 "powerpc.tcc"
				>(code, addr, "vminsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135775 "powerpc.tcc"
				>
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 135780 "powerpc.tcc"
				>::OpVminub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135784 "powerpc.tcc"
				>(code, addr, "vminub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135798 "powerpc.tcc"
				>
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 135803 "powerpc.tcc"
				>::OpVminuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135807 "powerpc.tcc"
				>(code, addr, "vminuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135821 "powerpc.tcc"
				>
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 135826 "powerpc.tcc"
				>::OpVminuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135830 "powerpc.tcc"
				>(code, addr, "vminuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135844 "powerpc.tcc"
				>
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 135849 "powerpc.tcc"
				>::OpVmladduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135853 "powerpc.tcc"
				>(code, addr, "vmladduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135868 "powerpc.tcc"
				>
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 135873 "powerpc.tcc"
				>::OpVmrghb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135877 "powerpc.tcc"
				>(code, addr, "vmrghb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135888 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135891 "powerpc.tcc"
				>
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 135896 "powerpc.tcc"
				>::OpVmrghh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135900 "powerpc.tcc"
				>(code, addr, "vmrghh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135914 "powerpc.tcc"
				>
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 135919 "powerpc.tcc"
				>::OpVmrghw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135923 "powerpc.tcc"
				>(code, addr, "vmrghw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135937 "powerpc.tcc"
				>
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 135942 "powerpc.tcc"
				>::OpVmrglb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135946 "powerpc.tcc"
				>(code, addr, "vmrglb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135960 "powerpc.tcc"
				>
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 135965 "powerpc.tcc"
				>::OpVmrglh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135969 "powerpc.tcc"
				>(code, addr, "vmrglh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135983 "powerpc.tcc"
				>
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 135988 "powerpc.tcc"
				>::OpVmrglw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135992 "powerpc.tcc"
				>(code, addr, "vmrglw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136006 "powerpc.tcc"
				>
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 136011 "powerpc.tcc"
				>::OpVmsummbm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136015 "powerpc.tcc"
				>(code, addr, "vmsummbm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136030 "powerpc.tcc"
				>
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 136035 "powerpc.tcc"
				>::OpVmsumshm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136039 "powerpc.tcc"
				>(code, addr, "vmsumshm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136054 "powerpc.tcc"
				>
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 136059 "powerpc.tcc"
				>::OpVmsumshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136063 "powerpc.tcc"
				>(code, addr, "vmsumshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136075 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136078 "powerpc.tcc"
				>
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 136083 "powerpc.tcc"
				>::OpVmsumubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136087 "powerpc.tcc"
				>(code, addr, "vmsumubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136102 "powerpc.tcc"
				>
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 136107 "powerpc.tcc"
				>::OpVmsumuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136111 "powerpc.tcc"
				>(code, addr, "vmsumuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136126 "powerpc.tcc"
				>
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 136131 "powerpc.tcc"
				>::OpVmsumuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136135 "powerpc.tcc"
				>(code, addr, "vmsumuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136150 "powerpc.tcc"
				>
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 136155 "powerpc.tcc"
				>::OpVmulesb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136159 "powerpc.tcc"
				>(code, addr, "vmulesb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136173 "powerpc.tcc"
				>
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 136178 "powerpc.tcc"
				>::OpVmulesh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136182 "powerpc.tcc"
				>(code, addr, "vmulesh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136196 "powerpc.tcc"
				>
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 136201 "powerpc.tcc"
				>::OpVmuleub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136205 "powerpc.tcc"
				>(code, addr, "vmuleub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136219 "powerpc.tcc"
				>
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 136224 "powerpc.tcc"
				>::OpVmuleuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136228 "powerpc.tcc"
				>(code, addr, "vmuleuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136242 "powerpc.tcc"
				>
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 136247 "powerpc.tcc"
				>::OpVmulosb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136251 "powerpc.tcc"
				>(code, addr, "vmulosb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136265 "powerpc.tcc"
				>
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 136270 "powerpc.tcc"
				>::OpVmulosh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136274 "powerpc.tcc"
				>(code, addr, "vmulosh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136288 "powerpc.tcc"
				>
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 136293 "powerpc.tcc"
				>::OpVmuloub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136297 "powerpc.tcc"
				>(code, addr, "vmuloub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136311 "powerpc.tcc"
				>
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 136316 "powerpc.tcc"
				>::OpVmulouh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136320 "powerpc.tcc"
				>(code, addr, "vmulouh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136334 "powerpc.tcc"
				>
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 136339 "powerpc.tcc"
				>::OpVnmsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136343 "powerpc.tcc"
				>(code, addr, "vnmsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136358 "powerpc.tcc"
				>
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 136363 "powerpc.tcc"
				>::OpVnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136367 "powerpc.tcc"
				>(code, addr, "vnor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136381 "powerpc.tcc"
				>
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 136386 "powerpc.tcc"
				>::OpVor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136390 "powerpc.tcc"
				>(code, addr, "vor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136404 "powerpc.tcc"
				>
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 136409 "powerpc.tcc"
				>::OpVperm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136413 "powerpc.tcc"
				>(code, addr, "vperm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136428 "powerpc.tcc"
				>
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 136433 "powerpc.tcc"
				>::OpVpkpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136437 "powerpc.tcc"
				>(code, addr, "vpkpx")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136451 "powerpc.tcc"
				>
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 136456 "powerpc.tcc"
				>::OpVpkshss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136460 "powerpc.tcc"
				>(code, addr, "vpkshss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136474 "powerpc.tcc"
				>
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 136479 "powerpc.tcc"
				>::OpVpkshus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136483 "powerpc.tcc"
				>(code, addr, "vpkshus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136497 "powerpc.tcc"
				>
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 136502 "powerpc.tcc"
				>::OpVpkswss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136506 "powerpc.tcc"
				>(code, addr, "vpkswss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136520 "powerpc.tcc"
				>
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 136525 "powerpc.tcc"
				>::OpVpkswus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136529 "powerpc.tcc"
				>(code, addr, "vpkswus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136543 "powerpc.tcc"
				>
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 136548 "powerpc.tcc"
				>::OpVpkuhum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136552 "powerpc.tcc"
				>(code, addr, "vpkuhum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136566 "powerpc.tcc"
				>
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 136571 "powerpc.tcc"
				>::OpVpkuhus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136575 "powerpc.tcc"
				>(code, addr, "vpkuhus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136589 "powerpc.tcc"
				>
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 136594 "powerpc.tcc"
				>::OpVpkuwum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136598 "powerpc.tcc"
				>(code, addr, "vpkuwum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136612 "powerpc.tcc"
				>
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 136617 "powerpc.tcc"
				>::OpVpkuwus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136621 "powerpc.tcc"
				>(code, addr, "vpkuwus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136635 "powerpc.tcc"
				>
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 136640 "powerpc.tcc"
				>::OpVrefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136644 "powerpc.tcc"
				>(code, addr, "vrefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136657 "powerpc.tcc"
				>
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 136662 "powerpc.tcc"
				>::OpVrfim(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136666 "powerpc.tcc"
				>(code, addr, "vrfim")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136679 "powerpc.tcc"
				>
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 136684 "powerpc.tcc"
				>::OpVrfin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136688 "powerpc.tcc"
				>(code, addr, "vrfin")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136701 "powerpc.tcc"
				>
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 136706 "powerpc.tcc"
				>::OpVrfip(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136710 "powerpc.tcc"
				>(code, addr, "vrfip")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136723 "powerpc.tcc"
				>
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 136728 "powerpc.tcc"
				>::OpVrfiz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136732 "powerpc.tcc"
				>(code, addr, "vrfiz")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136745 "powerpc.tcc"
				>
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 136750 "powerpc.tcc"
				>::OpVrlb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136754 "powerpc.tcc"
				>(code, addr, "vrlb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136768 "powerpc.tcc"
				>
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 136773 "powerpc.tcc"
				>::OpVrlh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136777 "powerpc.tcc"
				>(code, addr, "vrlh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136791 "powerpc.tcc"
				>
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 136796 "powerpc.tcc"
				>::OpVrlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136800 "powerpc.tcc"
				>(code, addr, "vrlw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136814 "powerpc.tcc"
				>
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 136819 "powerpc.tcc"
				>::OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136823 "powerpc.tcc"
				>(code, addr, "vrsqrtefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136833 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136836 "powerpc.tcc"
				>
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 136841 "powerpc.tcc"
				>::OpVsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136845 "powerpc.tcc"
				>(code, addr, "vsel")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136860 "powerpc.tcc"
				>
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 136865 "powerpc.tcc"
				>::OpVsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136869 "powerpc.tcc"
				>(code, addr, "vsl")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136883 "powerpc.tcc"
				>
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 136888 "powerpc.tcc"
				>::OpVslb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136892 "powerpc.tcc"
				>(code, addr, "vslb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136906 "powerpc.tcc"
				>
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 136911 "powerpc.tcc"
				>::OpVsldoi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136915 "powerpc.tcc"
				>(code, addr, "vsldoi")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					sh = ((code >> 6) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136930 "powerpc.tcc"
				>
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 136935 "powerpc.tcc"
				>::OpVslh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136939 "powerpc.tcc"
				>(code, addr, "vslh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136953 "powerpc.tcc"
				>
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 136958 "powerpc.tcc"
				>::OpVslo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136962 "powerpc.tcc"
				>(code, addr, "vslo")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136976 "powerpc.tcc"
				>
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 136981 "powerpc.tcc"
				>::OpVslw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136985 "powerpc.tcc"
				>(code, addr, "vslw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136999 "powerpc.tcc"
				>
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 137004 "powerpc.tcc"
				>::OpVspltb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137008 "powerpc.tcc"
				>(code, addr, "vspltb")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137022 "powerpc.tcc"
				>
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 137027 "powerpc.tcc"
				>::OpVsplth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137031 "powerpc.tcc"
				>(code, addr, "vsplth")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137045 "powerpc.tcc"
				>
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 137050 "powerpc.tcc"
				>::OpVspltisb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137054 "powerpc.tcc"
				>(code, addr, "vspltisb")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137068 "powerpc.tcc"
				>
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 137073 "powerpc.tcc"
				>::OpVspltish(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137077 "powerpc.tcc"
				>(code, addr, "vspltish")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137091 "powerpc.tcc"
				>
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 137096 "powerpc.tcc"
				>::OpVspltisw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137100 "powerpc.tcc"
				>(code, addr, "vspltisw")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137114 "powerpc.tcc"
				>
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 137119 "powerpc.tcc"
				>::OpVspltw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137123 "powerpc.tcc"
				>(code, addr, "vspltw")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137137 "powerpc.tcc"
				>
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 137142 "powerpc.tcc"
				>::OpVsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137146 "powerpc.tcc"
				>(code, addr, "vsr")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137160 "powerpc.tcc"
				>
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 137165 "powerpc.tcc"
				>::OpVsrab(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137169 "powerpc.tcc"
				>(code, addr, "vsrab")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137183 "powerpc.tcc"
				>
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 137188 "powerpc.tcc"
				>::OpVsrah(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137192 "powerpc.tcc"
				>(code, addr, "vsrah")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137203 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137206 "powerpc.tcc"
				>
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 137211 "powerpc.tcc"
				>::OpVsraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137215 "powerpc.tcc"
				>(code, addr, "vsraw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137229 "powerpc.tcc"
				>
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 137234 "powerpc.tcc"
				>::OpVsrb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137238 "powerpc.tcc"
				>(code, addr, "vsrb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137252 "powerpc.tcc"
				>
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 137257 "powerpc.tcc"
				>::OpVsrh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137261 "powerpc.tcc"
				>(code, addr, "vsrh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137275 "powerpc.tcc"
				>
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 137280 "powerpc.tcc"
				>::OpVsro(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137284 "powerpc.tcc"
				>(code, addr, "vsro")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137298 "powerpc.tcc"
				>
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 137303 "powerpc.tcc"
				>::OpVsrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137307 "powerpc.tcc"
				>(code, addr, "vsrw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137321 "powerpc.tcc"
				>
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 137326 "powerpc.tcc"
				>::OpVsubcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137330 "powerpc.tcc"
				>(code, addr, "vsubcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137344 "powerpc.tcc"
				>
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 137349 "powerpc.tcc"
				>::OpVsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137353 "powerpc.tcc"
				>(code, addr, "vsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137367 "powerpc.tcc"
				>
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 137372 "powerpc.tcc"
				>::OpVsubsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137376 "powerpc.tcc"
				>(code, addr, "vsubsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137390 "powerpc.tcc"
				>
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 137395 "powerpc.tcc"
				>::OpVsubshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137399 "powerpc.tcc"
				>(code, addr, "vsubshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137413 "powerpc.tcc"
				>
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 137418 "powerpc.tcc"
				>::OpVsubsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137422 "powerpc.tcc"
				>(code, addr, "vsubsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137436 "powerpc.tcc"
				>
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 137441 "powerpc.tcc"
				>::OpVsububm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137445 "powerpc.tcc"
				>(code, addr, "vsububm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137459 "powerpc.tcc"
				>
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 137464 "powerpc.tcc"
				>::OpVsububs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137468 "powerpc.tcc"
				>(code, addr, "vsububs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137482 "powerpc.tcc"
				>
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 137487 "powerpc.tcc"
				>::OpVsubuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137491 "powerpc.tcc"
				>(code, addr, "vsubuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137505 "powerpc.tcc"
				>
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 137510 "powerpc.tcc"
				>::OpVsubuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137514 "powerpc.tcc"
				>(code, addr, "vsubuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137528 "powerpc.tcc"
				>
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 137533 "powerpc.tcc"
				>::OpVsubuwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137537 "powerpc.tcc"
				>(code, addr, "vsubuwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137551 "powerpc.tcc"
				>
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 137556 "powerpc.tcc"
				>::OpVsubuws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137560 "powerpc.tcc"
				>(code, addr, "vsubuws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137574 "powerpc.tcc"
				>
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 137579 "powerpc.tcc"
				>::OpVsumsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137583 "powerpc.tcc"
				>(code, addr, "vsumsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137597 "powerpc.tcc"
				>
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 137602 "powerpc.tcc"
				>::OpVsum2sws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137606 "powerpc.tcc"
				>(code, addr, "vsum2sws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137620 "powerpc.tcc"
				>
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 137625 "powerpc.tcc"
				>::OpVsum4sbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137629 "powerpc.tcc"
				>(code, addr, "vsum4sbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137640 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137643 "powerpc.tcc"
				>
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 137648 "powerpc.tcc"
				>::OpVsum4shs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137652 "powerpc.tcc"
				>(code, addr, "vsum4shs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137666 "powerpc.tcc"
				>
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 137671 "powerpc.tcc"
				>::OpVsum4ubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137675 "powerpc.tcc"
				>(code, addr, "vsum4ubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137689 "powerpc.tcc"
				>
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 137694 "powerpc.tcc"
				>::OpVupkhpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137698 "powerpc.tcc"
				>(code, addr, "vupkhpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137711 "powerpc.tcc"
				>
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 137716 "powerpc.tcc"
				>::OpVupkhsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137720 "powerpc.tcc"
				>(code, addr, "vupkhsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137733 "powerpc.tcc"
				>
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 137738 "powerpc.tcc"
				>::OpVupkhsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137742 "powerpc.tcc"
				>(code, addr, "vupkhsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137755 "powerpc.tcc"
				>
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 137760 "powerpc.tcc"
				>::OpVupklpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137764 "powerpc.tcc"
				>(code, addr, "vupklpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137777 "powerpc.tcc"
				>
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 137782 "powerpc.tcc"
				>::OpVupklsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137786 "powerpc.tcc"
				>(code, addr, "vupklsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137799 "powerpc.tcc"
				>
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 137804 "powerpc.tcc"
				>::OpVupklsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137808 "powerpc.tcc"
				>(code, addr, "vupklsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137821 "powerpc.tcc"
				>
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 137826 "powerpc.tcc"
				>::OpVxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137830 "powerpc.tcc"
				>(code, addr, "vxor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137844 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 137849 "powerpc.tcc"
				>::DecodeMapPage(typename CONFIG::address_t key)
				{
					this->key = key;
					memset(operation, 0, sizeof(operation));
					next = 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 137860 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137863 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 137868 "powerpc.tcc"
				>::~DecodeMapPage()
				{
					unsigned int idx;
					for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
					delete operation[idx];
				}

				template <
#line 38 "ppc.isa"
				class
#line 137879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137882 "powerpc.tcc"
				>
				DecodeTableEntry<
#line 38 "ppc.isa"
				CONFIG
#line 137887 "powerpc.tcc"
				>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137891 "powerpc.tcc"
				> *(*decode)(CodeType, typename CONFIG::address_t))
				{
					this->opcode = opcode;
					this->opcode_mask = opcode_mask;
					this->decode = decode;
				}

				template <
#line 38 "ppc.isa"
				class
#line 137902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137905 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 137910 "powerpc.tcc"
				>::Decoder()
				: is_little_endian( false ), mru_page( 0 )
				{
					memset(decode_hash_table, 0, sizeof(decode_hash_table));
					if(
#line 967 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137918 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137922 "powerpc.tcc"
					>(0x100004c4UL, 0xfc0007ffUL, DecodeOpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 137926 "powerpc.tcc"
					>));
					if(
#line 961 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137931 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137935 "powerpc.tcc"
					>(0x100002ceUL, 0xfc1f07ffUL, DecodeOpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 137939 "powerpc.tcc"
					>));
					if(
#line 955 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137944 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137948 "powerpc.tcc"
					>(0x1000028eUL, 0xfc1f07ffUL, DecodeOpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 137952 "powerpc.tcc"
					>));
					if(
#line 949 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137957 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137961 "powerpc.tcc"
					>(0x100003ceUL, 0xfc1f07ffUL, DecodeOpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 137965 "powerpc.tcc"
					>));
					if(
#line 943 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137970 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137974 "powerpc.tcc"
					>(0x1000024eUL, 0xfc1f07ffUL, DecodeOpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 137978 "powerpc.tcc"
					>));
					if(
#line 937 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137983 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137987 "powerpc.tcc"
					>(0x1000020eUL, 0xfc1f07ffUL, DecodeOpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 137991 "powerpc.tcc"
					>));
					if(
#line 931 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137996 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138000 "powerpc.tcc"
					>(0x1000034eUL, 0xfc1f07ffUL, DecodeOpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 138004 "powerpc.tcc"
					>));
					if(
#line 925 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138009 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138013 "powerpc.tcc"
					>(0x10000608UL, 0xfc0007ffUL, DecodeOpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 138017 "powerpc.tcc"
					>));
					if(
#line 919 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138022 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138026 "powerpc.tcc"
					>(0x10000648UL, 0xfc0007ffUL, DecodeOpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 138030 "powerpc.tcc"
					>));
					if(
#line 913 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138035 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138039 "powerpc.tcc"
					>(0x10000708UL, 0xfc0007ffUL, DecodeOpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 138043 "powerpc.tcc"
					>));
					if(
#line 907 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138048 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138052 "powerpc.tcc"
					>(0x10000688UL, 0xfc0007ffUL, DecodeOpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 138056 "powerpc.tcc"
					>));
					if(
#line 901 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138061 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138065 "powerpc.tcc"
					>(0x10000788UL, 0xfc0007ffUL, DecodeOpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 138069 "powerpc.tcc"
					>));
					if(
#line 895 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138074 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138078 "powerpc.tcc"
					>(0x10000680UL, 0xfc0007ffUL, DecodeOpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 138082 "powerpc.tcc"
					>));
					if(
#line 889 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138087 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138091 "powerpc.tcc"
					>(0x10000480UL, 0xfc0007ffUL, DecodeOpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 138095 "powerpc.tcc"
					>));
					if(
#line 883 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138100 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138104 "powerpc.tcc"
					>(0x10000640UL, 0xfc0007ffUL, DecodeOpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 138108 "powerpc.tcc"
					>));
					if(
#line 877 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138113 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138117 "powerpc.tcc"
					>(0x10000440UL, 0xfc0007ffUL, DecodeOpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 138121 "powerpc.tcc"
					>));
					if(
#line 871 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138126 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138130 "powerpc.tcc"
					>(0x10000600UL, 0xfc0007ffUL, DecodeOpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 138134 "powerpc.tcc"
					>));
					if(
#line 865 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138139 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138143 "powerpc.tcc"
					>(0x10000400UL, 0xfc0007ffUL, DecodeOpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 138147 "powerpc.tcc"
					>));
					if(
#line 859 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138152 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138156 "powerpc.tcc"
					>(0x10000780UL, 0xfc0007ffUL, DecodeOpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 138160 "powerpc.tcc"
					>));
					if(
#line 853 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138165 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138169 "powerpc.tcc"
					>(0x10000740UL, 0xfc0007ffUL, DecodeOpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 138173 "powerpc.tcc"
					>));
					if(
#line 847 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138178 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138182 "powerpc.tcc"
					>(0x10000700UL, 0xfc0007ffUL, DecodeOpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 138186 "powerpc.tcc"
					>));
					if(
#line 841 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138191 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138195 "powerpc.tcc"
					>(0x1000004aUL, 0xfc0007ffUL, DecodeOpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 138199 "powerpc.tcc"
					>));
					if(
#line 835 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138204 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138208 "powerpc.tcc"
					>(0x10000580UL, 0xfc0007ffUL, DecodeOpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 138212 "powerpc.tcc"
					>));
					if(
#line 829 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138217 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138221 "powerpc.tcc"
					>(0x10000284UL, 0xfc0007ffUL, DecodeOpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 138225 "powerpc.tcc"
					>));
					if(
#line 823 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138230 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138234 "powerpc.tcc"
					>(0x1000044cUL, 0xfc0007ffUL, DecodeOpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 138238 "powerpc.tcc"
					>));
					if(
#line 817 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138243 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138247 "powerpc.tcc"
					>(0x10000244UL, 0xfc0007ffUL, DecodeOpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 138251 "powerpc.tcc"
					>));
					if(
#line 811 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138256 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138260 "powerpc.tcc"
					>(0x10000204UL, 0xfc0007ffUL, DecodeOpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 138264 "powerpc.tcc"
					>));
					if(
#line 805 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138269 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138273 "powerpc.tcc"
					>(0x10000384UL, 0xfc0007ffUL, DecodeOpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 138277 "powerpc.tcc"
					>));
					if(
#line 799 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138282 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138286 "powerpc.tcc"
					>(0x10000344UL, 0xfc0007ffUL, DecodeOpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 138290 "powerpc.tcc"
					>));
					if(
#line 793 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138295 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138299 "powerpc.tcc"
					>(0x10000304UL, 0xfc0007ffUL, DecodeOpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 138303 "powerpc.tcc"
					>));
					if(
#line 787 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138308 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138312 "powerpc.tcc"
					>(0x100002c4UL, 0xfc0007ffUL, DecodeOpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 138316 "powerpc.tcc"
					>));
					if(
#line 781 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138321 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138325 "powerpc.tcc"
					>(0x1000028cUL, 0xfc0007ffUL, DecodeOpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 138329 "powerpc.tcc"
					>));
					if(
#line 775 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138334 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138338 "powerpc.tcc"
					>(0x1000038cUL, 0xfc0007ffUL, DecodeOpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 138342 "powerpc.tcc"
					>));
					if(
#line 769 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138347 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138351 "powerpc.tcc"
					>(0x1000034cUL, 0xfc0007ffUL, DecodeOpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 138355 "powerpc.tcc"
					>));
					if(
#line 763 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138360 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138364 "powerpc.tcc"
					>(0x1000030cUL, 0xfc0007ffUL, DecodeOpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 138368 "powerpc.tcc"
					>));
					if(
#line 757 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138373 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138377 "powerpc.tcc"
					>(0x1000024cUL, 0xfc0007ffUL, DecodeOpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 138381 "powerpc.tcc"
					>));
					if(
#line 751 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138386 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138390 "powerpc.tcc"
					>(0x1000020cUL, 0xfc0007ffUL, DecodeOpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 138394 "powerpc.tcc"
					>));
					if(
#line 745 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138399 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138403 "powerpc.tcc"
					>(0x10000184UL, 0xfc0007ffUL, DecodeOpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 138407 "powerpc.tcc"
					>));
					if(
#line 739 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138412 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138416 "powerpc.tcc"
					>(0x1000040cUL, 0xfc0007ffUL, DecodeOpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 138420 "powerpc.tcc"
					>));
					if(
#line 733 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138425 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138429 "powerpc.tcc"
					>(0x10000144UL, 0xfc0007ffUL, DecodeOpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 138433 "powerpc.tcc"
					>));
					if(
#line 727 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138438 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138442 "powerpc.tcc"
					>(0x1000002cUL, 0xfc00043fUL, DecodeOpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 138446 "powerpc.tcc"
					>));
					if(
#line 721 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138451 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138455 "powerpc.tcc"
					>(0x10000104UL, 0xfc0007ffUL, DecodeOpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 138459 "powerpc.tcc"
					>));
					if(
#line 715 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138464 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138468 "powerpc.tcc"
					>(0x100001c4UL, 0xfc0007ffUL, DecodeOpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 138472 "powerpc.tcc"
					>));
					if(
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138477 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138481 "powerpc.tcc"
					>(0x1000002aUL, 0xfc00003fUL, DecodeOpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 138485 "powerpc.tcc"
					>));
					if(
#line 703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138490 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138494 "powerpc.tcc"
					>(0x1000014aUL, 0xfc1f07ffUL, DecodeOpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 138498 "powerpc.tcc"
					>));
					if(
#line 697 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138503 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138507 "powerpc.tcc"
					>(0x10000084UL, 0xfc0007ffUL, DecodeOpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 138511 "powerpc.tcc"
					>));
					if(
#line 691 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138516 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138520 "powerpc.tcc"
					>(0x10000044UL, 0xfc0007ffUL, DecodeOpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 138524 "powerpc.tcc"
					>));
					if(
#line 685 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138529 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138533 "powerpc.tcc"
					>(0x10000004UL, 0xfc0007ffUL, DecodeOpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 138537 "powerpc.tcc"
					>));
					if(
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138542 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138546 "powerpc.tcc"
					>(0x1000024aUL, 0xfc1f07ffUL, DecodeOpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 138550 "powerpc.tcc"
					>));
					if(
#line 673 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138555 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138559 "powerpc.tcc"
					>(0x1000028aUL, 0xfc1f07ffUL, DecodeOpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 138563 "powerpc.tcc"
					>));
					if(
#line 667 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138568 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138572 "powerpc.tcc"
					>(0x1000020aUL, 0xfc1f07ffUL, DecodeOpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 138576 "powerpc.tcc"
					>));
					if(
#line 661 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138581 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138585 "powerpc.tcc"
					>(0x100002caUL, 0xfc1f07ffUL, DecodeOpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 138589 "powerpc.tcc"
					>));
					if(
#line 655 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138594 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138598 "powerpc.tcc"
					>(0x1000010aUL, 0xfc1f07ffUL, DecodeOpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 138602 "powerpc.tcc"
					>));
					if(
#line 649 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138607 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138611 "powerpc.tcc"
					>(0x100000ceUL, 0xfc0007ffUL, DecodeOpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 138615 "powerpc.tcc"
					>));
					if(
#line 643 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138620 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138624 "powerpc.tcc"
					>(0x1000004eUL, 0xfc0007ffUL, DecodeOpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 138628 "powerpc.tcc"
					>));
					if(
#line 637 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138633 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138637 "powerpc.tcc"
					>(0x1000008eUL, 0xfc0007ffUL, DecodeOpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 138641 "powerpc.tcc"
					>));
					if(
#line 631 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138646 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138650 "powerpc.tcc"
					>(0x1000000eUL, 0xfc0007ffUL, DecodeOpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 138654 "powerpc.tcc"
					>));
					if(
#line 625 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138659 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138663 "powerpc.tcc"
					>(0x1000014eUL, 0xfc0007ffUL, DecodeOpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 138667 "powerpc.tcc"
					>));
					if(
#line 619 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138672 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138676 "powerpc.tcc"
					>(0x100001ceUL, 0xfc0007ffUL, DecodeOpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 138680 "powerpc.tcc"
					>));
					if(
#line 613 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138685 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138689 "powerpc.tcc"
					>(0x1000010eUL, 0xfc0007ffUL, DecodeOpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 138693 "powerpc.tcc"
					>));
					if(
#line 607 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138698 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138702 "powerpc.tcc"
					>(0x1000018eUL, 0xfc0007ffUL, DecodeOpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 138706 "powerpc.tcc"
					>));
					if(
#line 601 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138711 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138715 "powerpc.tcc"
					>(0x1000030eUL, 0xfc0007ffUL, DecodeOpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 138719 "powerpc.tcc"
					>));
					if(
#line 595 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138724 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138728 "powerpc.tcc"
					>(0x1000002bUL, 0xfc00003fUL, DecodeOpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 138732 "powerpc.tcc"
					>));
					if(
#line 589 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138737 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138741 "powerpc.tcc"
					>(0x10000484UL, 0xfc0007ffUL, DecodeOpVor<
#line 38 "ppc.isa"
					CONFIG
#line 138745 "powerpc.tcc"
					>));
					if(
#line 583 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138750 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138754 "powerpc.tcc"
					>(0x10000504UL, 0xfc0007ffUL, DecodeOpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 138758 "powerpc.tcc"
					>));
					if(
#line 577 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138763 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138767 "powerpc.tcc"
					>(0x1000002fUL, 0xfc00003fUL, DecodeOpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 138771 "powerpc.tcc"
					>));
					if(
#line 571 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138776 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138780 "powerpc.tcc"
					>(0x10000048UL, 0xfc0007ffUL, DecodeOpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 138784 "powerpc.tcc"
					>));
					if(
#line 565 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138789 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138793 "powerpc.tcc"
					>(0x10000008UL, 0xfc0007ffUL, DecodeOpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 138797 "powerpc.tcc"
					>));
					if(
#line 559 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138802 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138806 "powerpc.tcc"
					>(0x10000148UL, 0xfc0007ffUL, DecodeOpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 138810 "powerpc.tcc"
					>));
					if(
#line 553 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138815 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138819 "powerpc.tcc"
					>(0x10000108UL, 0xfc0007ffUL, DecodeOpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 138823 "powerpc.tcc"
					>));
					if(
#line 547 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138828 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138832 "powerpc.tcc"
					>(0x10000248UL, 0xfc0007ffUL, DecodeOpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 138836 "powerpc.tcc"
					>));
					if(
#line 541 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138841 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138845 "powerpc.tcc"
					>(0x10000208UL, 0xfc0007ffUL, DecodeOpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 138849 "powerpc.tcc"
					>));
					if(
#line 535 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138854 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138858 "powerpc.tcc"
					>(0x10000348UL, 0xfc0007ffUL, DecodeOpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 138862 "powerpc.tcc"
					>));
					if(
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138867 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138871 "powerpc.tcc"
					>(0x10000308UL, 0xfc0007ffUL, DecodeOpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 138875 "powerpc.tcc"
					>));
					if(
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138880 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138884 "powerpc.tcc"
					>(0x10000027UL, 0xfc00003fUL, DecodeOpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 138888 "powerpc.tcc"
					>));
					if(
#line 517 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138893 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138897 "powerpc.tcc"
					>(0x10000026UL, 0xfc00003fUL, DecodeOpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 138901 "powerpc.tcc"
					>));
					if(
#line 511 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138906 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138910 "powerpc.tcc"
					>(0x10000024UL, 0xfc00003fUL, DecodeOpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 138914 "powerpc.tcc"
					>));
					if(
#line 505 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138919 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138923 "powerpc.tcc"
					>(0x10000029UL, 0xfc00003fUL, DecodeOpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 138927 "powerpc.tcc"
					>));
					if(
#line 499 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138932 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138936 "powerpc.tcc"
					>(0x10000028UL, 0xfc00003fUL, DecodeOpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 138940 "powerpc.tcc"
					>));
					if(
#line 493 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138945 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138949 "powerpc.tcc"
					>(0x10000025UL, 0xfc00003fUL, DecodeOpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 138953 "powerpc.tcc"
					>));
					if(
#line 487 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138958 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138962 "powerpc.tcc"
					>(0x1000018cUL, 0xfc0007ffUL, DecodeOpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 138966 "powerpc.tcc"
					>));
					if(
#line 481 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138971 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138975 "powerpc.tcc"
					>(0x1000014cUL, 0xfc0007ffUL, DecodeOpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 138979 "powerpc.tcc"
					>));
					if(
#line 475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138984 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138988 "powerpc.tcc"
					>(0x1000010cUL, 0xfc0007ffUL, DecodeOpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 138992 "powerpc.tcc"
					>));
					if(
#line 469 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138997 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139001 "powerpc.tcc"
					>(0x1000008cUL, 0xfc0007ffUL, DecodeOpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 139005 "powerpc.tcc"
					>));
					if(
#line 463 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139010 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139014 "powerpc.tcc"
					>(0x1000004cUL, 0xfc0007ffUL, DecodeOpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 139018 "powerpc.tcc"
					>));
					if(
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139023 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139027 "powerpc.tcc"
					>(0x1000000cUL, 0xfc0007ffUL, DecodeOpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 139031 "powerpc.tcc"
					>));
					if(
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139036 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139040 "powerpc.tcc"
					>(0x10000022UL, 0xfc00003fUL, DecodeOpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 139044 "powerpc.tcc"
					>));
					if(
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139049 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139053 "powerpc.tcc"
					>(0x10000282UL, 0xfc0007ffUL, DecodeOpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 139057 "powerpc.tcc"
					>));
					if(
#line 439 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139062 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139066 "powerpc.tcc"
					>(0x10000242UL, 0xfc0007ffUL, DecodeOpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 139070 "powerpc.tcc"
					>));
					if(
#line 433 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139075 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139079 "powerpc.tcc"
					>(0x10000202UL, 0xfc0007ffUL, DecodeOpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 139083 "powerpc.tcc"
					>));
					if(
#line 427 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139088 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139092 "powerpc.tcc"
					>(0x10000382UL, 0xfc0007ffUL, DecodeOpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 139096 "powerpc.tcc"
					>));
					if(
#line 421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139101 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139105 "powerpc.tcc"
					>(0x10000342UL, 0xfc0007ffUL, DecodeOpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 139109 "powerpc.tcc"
					>));
					if(
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139114 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139118 "powerpc.tcc"
					>(0x10000302UL, 0xfc0007ffUL, DecodeOpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 139122 "powerpc.tcc"
					>));
					if(
#line 409 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139127 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139131 "powerpc.tcc"
					>(0x1000044aUL, 0xfc0007ffUL, DecodeOpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 139135 "powerpc.tcc"
					>));
					if(
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139140 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139144 "powerpc.tcc"
					>(0x10000021UL, 0xfc00003fUL, DecodeOpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139148 "powerpc.tcc"
					>));
					if(
#line 397 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139153 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139157 "powerpc.tcc"
					>(0x10000020UL, 0xfc00003fUL, DecodeOpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139161 "powerpc.tcc"
					>));
					if(
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139166 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139170 "powerpc.tcc"
					>(0x10000082UL, 0xfc0007ffUL, DecodeOpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 139174 "powerpc.tcc"
					>));
					if(
#line 385 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139179 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139183 "powerpc.tcc"
					>(0x10000042UL, 0xfc0007ffUL, DecodeOpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 139187 "powerpc.tcc"
					>));
					if(
#line 379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139192 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139196 "powerpc.tcc"
					>(0x10000002UL, 0xfc0007ffUL, DecodeOpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 139200 "powerpc.tcc"
					>));
					if(
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139205 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139209 "powerpc.tcc"
					>(0x10000182UL, 0xfc0007ffUL, DecodeOpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 139213 "powerpc.tcc"
					>));
					if(
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139218 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139222 "powerpc.tcc"
					>(0x10000142UL, 0xfc0007ffUL, DecodeOpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 139226 "powerpc.tcc"
					>));
					if(
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139231 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139235 "powerpc.tcc"
					>(0x10000102UL, 0xfc0007ffUL, DecodeOpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 139239 "powerpc.tcc"
					>));
					if(
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139244 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139248 "powerpc.tcc"
					>(0x1000040aUL, 0xfc0007ffUL, DecodeOpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 139252 "powerpc.tcc"
					>));
					if(
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139257 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139261 "powerpc.tcc"
					>(0x1000002eUL, 0xfc00003fUL, DecodeOpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 139265 "powerpc.tcc"
					>));
					if(
#line 343 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139270 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139274 "powerpc.tcc"
					>(0x100001caUL, 0xfc1f07ffUL, DecodeOpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 139278 "powerpc.tcc"
					>));
					if(
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139283 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139287 "powerpc.tcc"
					>(0x1000018aUL, 0xfc1f07ffUL, DecodeOpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 139291 "powerpc.tcc"
					>));
					if(
#line 331 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139296 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139300 "powerpc.tcc"
					>(0x1000038aUL, 0xfc0007ffUL, DecodeOpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 139304 "powerpc.tcc"
					>));
					if(
#line 325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139309 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139313 "powerpc.tcc"
					>(0x100003caUL, 0xfc0007ffUL, DecodeOpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 139317 "powerpc.tcc"
					>));
					if(
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139322 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139326 "powerpc.tcc"
					>(0x10000286UL, 0xfc0003ffUL, DecodeOpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 139330 "powerpc.tcc"
					>));
					if(
#line 313 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139335 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139339 "powerpc.tcc"
					>(0x10000246UL, 0xfc0003ffUL, DecodeOpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 139343 "powerpc.tcc"
					>));
					if(
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139348 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139352 "powerpc.tcc"
					>(0x10000206UL, 0xfc0003ffUL, DecodeOpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 139356 "powerpc.tcc"
					>));
					if(
#line 301 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139361 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139365 "powerpc.tcc"
					>(0x10000386UL, 0xfc0003ffUL, DecodeOpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 139369 "powerpc.tcc"
					>));
					if(
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139374 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139378 "powerpc.tcc"
					>(0x10000346UL, 0xfc0003ffUL, DecodeOpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 139382 "powerpc.tcc"
					>));
					if(
#line 289 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139387 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139391 "powerpc.tcc"
					>(0x10000306UL, 0xfc0003ffUL, DecodeOpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 139395 "powerpc.tcc"
					>));
					if(
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139400 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139404 "powerpc.tcc"
					>(0x100002c6UL, 0xfc0003ffUL, DecodeOpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 139408 "powerpc.tcc"
					>));
					if(
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139413 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139417 "powerpc.tcc"
					>(0x100001c6UL, 0xfc0003ffUL, DecodeOpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 139421 "powerpc.tcc"
					>));
					if(
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139426 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139430 "powerpc.tcc"
					>(0x10000086UL, 0xfc0003ffUL, DecodeOpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 139434 "powerpc.tcc"
					>));
					if(
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139439 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139443 "powerpc.tcc"
					>(0x10000046UL, 0xfc0003ffUL, DecodeOpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 139447 "powerpc.tcc"
					>));
					if(
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139452 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139456 "powerpc.tcc"
					>(0x10000006UL, 0xfc0003ffUL, DecodeOpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 139460 "powerpc.tcc"
					>));
					if(
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139465 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139469 "powerpc.tcc"
					>(0x100000c6UL, 0xfc0003ffUL, DecodeOpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 139473 "powerpc.tcc"
					>));
					if(
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139478 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139482 "powerpc.tcc"
					>(0x100003c6UL, 0xfc0003ffUL, DecodeOpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 139486 "powerpc.tcc"
					>));
					if(
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139491 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139495 "powerpc.tcc"
					>(0x1000030aUL, 0xfc0007ffUL, DecodeOpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 139499 "powerpc.tcc"
					>));
					if(
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139504 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139508 "powerpc.tcc"
					>(0x1000034aUL, 0xfc0007ffUL, DecodeOpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 139512 "powerpc.tcc"
					>));
					if(
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139517 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139521 "powerpc.tcc"
					>(0x10000482UL, 0xfc0007ffUL, DecodeOpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 139525 "powerpc.tcc"
					>));
					if(
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139530 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139534 "powerpc.tcc"
					>(0x10000442UL, 0xfc0007ffUL, DecodeOpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 139538 "powerpc.tcc"
					>));
					if(
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139543 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139547 "powerpc.tcc"
					>(0x10000402UL, 0xfc0007ffUL, DecodeOpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 139551 "powerpc.tcc"
					>));
					if(
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139556 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139560 "powerpc.tcc"
					>(0x10000582UL, 0xfc0007ffUL, DecodeOpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 139564 "powerpc.tcc"
					>));
					if(
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139569 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139573 "powerpc.tcc"
					>(0x10000542UL, 0xfc0007ffUL, DecodeOpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 139577 "powerpc.tcc"
					>));
					if(
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139582 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139586 "powerpc.tcc"
					>(0x10000502UL, 0xfc0007ffUL, DecodeOpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 139590 "powerpc.tcc"
					>));
					if(
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139595 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139599 "powerpc.tcc"
					>(0x10000444UL, 0xfc0007ffUL, DecodeOpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 139603 "powerpc.tcc"
					>));
					if(
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139608 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139612 "powerpc.tcc"
					>(0x10000404UL, 0xfc0007ffUL, DecodeOpVand<
#line 38 "ppc.isa"
					CONFIG
#line 139616 "powerpc.tcc"
					>));
					if(
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139621 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139625 "powerpc.tcc"
					>(0x10000280UL, 0xfc0007ffUL, DecodeOpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 139629 "powerpc.tcc"
					>));
					if(
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139634 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139638 "powerpc.tcc"
					>(0x10000080UL, 0xfc0007ffUL, DecodeOpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 139642 "powerpc.tcc"
					>));
					if(
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139647 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139651 "powerpc.tcc"
					>(0x10000240UL, 0xfc0007ffUL, DecodeOpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 139655 "powerpc.tcc"
					>));
					if(
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139660 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139664 "powerpc.tcc"
					>(0x10000040UL, 0xfc0007ffUL, DecodeOpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 139668 "powerpc.tcc"
					>));
					if(
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139673 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139677 "powerpc.tcc"
					>(0x10000200UL, 0xfc0007ffUL, DecodeOpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 139681 "powerpc.tcc"
					>));
					if(
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139686 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139690 "powerpc.tcc"
					>(0x10000000UL, 0xfc0007ffUL, DecodeOpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 139694 "powerpc.tcc"
					>));
					if(
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139699 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139703 "powerpc.tcc"
					>(0x10000380UL, 0xfc0007ffUL, DecodeOpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 139707 "powerpc.tcc"
					>));
					if(
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139712 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139716 "powerpc.tcc"
					>(0x10000340UL, 0xfc0007ffUL, DecodeOpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139720 "powerpc.tcc"
					>));
					if(
#line 133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139725 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139729 "powerpc.tcc"
					>(0x10000300UL, 0xfc0007ffUL, DecodeOpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 139733 "powerpc.tcc"
					>));
					if(
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139738 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139742 "powerpc.tcc"
					>(0x1000000aUL, 0xfc0007ffUL, DecodeOpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 139746 "powerpc.tcc"
					>));
					if(
#line 121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139751 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139755 "powerpc.tcc"
					>(0x10000180UL, 0xfc0007ffUL, DecodeOpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 139759 "powerpc.tcc"
					>));
					if(
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139764 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139768 "powerpc.tcc"
					>(0x7c0003ceUL, 0xfc0007ffUL, DecodeOpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 139772 "powerpc.tcc"
					>));
					if(
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139777 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139781 "powerpc.tcc"
					>(0x7c0001ceUL, 0xfc0007ffUL, DecodeOpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 139785 "powerpc.tcc"
					>));
					if(
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139790 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139794 "powerpc.tcc"
					>(0x7c00018eUL, 0xfc0007ffUL, DecodeOpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 139798 "powerpc.tcc"
					>));
					if(
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139803 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139807 "powerpc.tcc"
					>(0x7c00014eUL, 0xfc0007ffUL, DecodeOpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 139811 "powerpc.tcc"
					>));
					if(
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139816 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139820 "powerpc.tcc"
					>(0x7c00010eUL, 0xfc0007ffUL, DecodeOpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 139824 "powerpc.tcc"
					>));
					if(
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139829 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139833 "powerpc.tcc"
					>(0x10000644UL, 0xffff07ffUL, DecodeOpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 139837 "powerpc.tcc"
					>));
					if(
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139842 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139846 "powerpc.tcc"
					>(0x10000604UL, 0xfc1fffffUL, DecodeOpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 139850 "powerpc.tcc"
					>));
					if(
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139855 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139859 "powerpc.tcc"
					>(0x7c0002ceUL, 0xfc0007ffUL, DecodeOpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 139863 "powerpc.tcc"
					>));
					if(
#line 67 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139868 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139872 "powerpc.tcc"
					>(0x7c0000ceUL, 0xfc0007ffUL, DecodeOpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 139876 "powerpc.tcc"
					>));
					if(
#line 61 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139881 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139885 "powerpc.tcc"
					>(0x7c00004cUL, 0xfc0007ffUL, DecodeOpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 139889 "powerpc.tcc"
					>));
					if(
#line 55 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139894 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139898 "powerpc.tcc"
					>(0x7c00000cUL, 0xfc0007ffUL, DecodeOpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 139902 "powerpc.tcc"
					>));
					if(
#line 49 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139907 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139911 "powerpc.tcc"
					>(0x7c00008eUL, 0xfc0007ffUL, DecodeOpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 139915 "powerpc.tcc"
					>));
					if(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139920 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139924 "powerpc.tcc"
					>(0x7c00004eUL, 0xfc0007ffUL, DecodeOpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 139928 "powerpc.tcc"
					>));
					if(
#line 37 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139933 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139937 "powerpc.tcc"
					>(0x7c00000eUL, 0xfc0007ffUL, DecodeOpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 139941 "powerpc.tcc"
					>));
					if(
#line 31 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139946 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139950 "powerpc.tcc"
					>(0x7e0002acUL, 0xff8007ffUL, DecodeOpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 139954 "powerpc.tcc"
					>));
					if(
#line 25 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139959 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139963 "powerpc.tcc"
					>(0x7e0002ecUL, 0xff8007ffUL, DecodeOpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 139967 "powerpc.tcc"
					>));
					if(
#line 19 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139972 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139976 "powerpc.tcc"
					>(0x7c0002ecUL, 0xff8007ffUL, DecodeOpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 139980 "powerpc.tcc"
					>));
					if(
#line 13 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139985 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139989 "powerpc.tcc"
					>(0x7c0002acUL, 0xff8007ffUL, DecodeOpDst<
#line 38 "ppc.isa"
					CONFIG
#line 139993 "powerpc.tcc"
					>));
					if(
#line 7 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139998 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140002 "powerpc.tcc"
					>(0x7e00066cUL, 0xff9fffffUL, DecodeOpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 140006 "powerpc.tcc"
					>));
					if(
#line 1 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 140011 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140015 "powerpc.tcc"
					>(0x7c00066cUL, 0xff9fffffUL, DecodeOpDss<
#line 38 "ppc.isa"
					CONFIG
#line 140019 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140024 "powerpc.tcc"
					>(0x7c0001e4UL, 0xfc0007feUL, DecodeOpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 140028 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140033 "powerpc.tcc"
					>(0x7c0001a4UL, 0xfc0007feUL, DecodeOpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 140037 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140042 "powerpc.tcc"
					>(0x7c000526UL, 0xfc0007feUL, DecodeOpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 140046 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140051 "powerpc.tcc"
					>(0x7c0004a6UL, 0xfc0007feUL, DecodeOpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 140055 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140060 "powerpc.tcc"
					>(0x7c000124UL, 0xfc0007feUL, DecodeOpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 140064 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140069 "powerpc.tcc"
					>(0x7c000120UL, 0xfc0007feUL, DecodeOpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 140073 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140078 "powerpc.tcc"
					>(0x7c0002e6UL, 0xfc0007feUL, DecodeOpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 140082 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140087 "powerpc.tcc"
					>(0x7c0003a6UL, 0xfc0007feUL, DecodeOpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 140091 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140096 "powerpc.tcc"
					>(0x7c0002a6UL, 0xfc0007feUL, DecodeOpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 140100 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140105 "powerpc.tcc"
					>(0x7c0000a6UL, 0xfc0007feUL, DecodeOpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 140109 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140114 "powerpc.tcc"
					>(0x7c000026UL, 0xfc0007feUL, DecodeOpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 140118 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140123 "powerpc.tcc"
					>(0x7c000400UL, 0xfc0007feUL, DecodeOpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 140127 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140132 "powerpc.tcc"
					>(0xc000000UL, 0xfc000000UL, DecodeOpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 140136 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140141 "powerpc.tcc"
					>(0x7c000008UL, 0xfc0007feUL, DecodeOpTw<
#line 38 "ppc.isa"
					CONFIG
#line 140145 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140150 "powerpc.tcc"
					>(0x4c000064UL, 0xfc0007feUL, DecodeOpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 140154 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140159 "powerpc.tcc"
					>(0x44000002UL, 0xfc000002UL, DecodeOpSc<
#line 38 "ppc.isa"
					CONFIG
#line 140163 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140168 "powerpc.tcc"
					>(0x7c0004acUL, 0xfc0007feUL, DecodeOpSync<
#line 38 "ppc.isa"
					CONFIG
#line 140172 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140177 "powerpc.tcc"
					>(0x7c00012dUL, 0xfc0007ffUL, DecodeOpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 140181 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140186 "powerpc.tcc"
					>(0x7c000028UL, 0xfc0007feUL, DecodeOpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 140190 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140195 "powerpc.tcc"
					>(0x4c00012cUL, 0xfc0007feUL, DecodeOpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 140199 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140204 "powerpc.tcc"
					>(0x7c0006acUL, 0xfc0007feUL, DecodeOpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 140208 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140213 "powerpc.tcc"
					>(0x7c00036cUL, 0xfc0007feUL, DecodeOpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 140217 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140222 "powerpc.tcc"
					>(0x7c00026cUL, 0xfc0007feUL, DecodeOpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 140226 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140231 "powerpc.tcc"
					>(0x7c0007e4UL, 0xffff07ffUL, DecodeOpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 140235 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140240 "powerpc.tcc"
					>(0x7c0007a4UL, 0xffff07ffUL, DecodeOpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 140244 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140249 "powerpc.tcc"
					>(0x7c00046cUL, 0xfc0007feUL, DecodeOpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 140253 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140258 "powerpc.tcc"
					>(0x7c000264UL, 0xfc0007feUL, DecodeOpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 140262 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140267 "powerpc.tcc"
					>(0x7c0002e4UL, 0xfc0007feUL, DecodeOpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 140271 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140276 "powerpc.tcc"
					>(0x7c0007acUL, 0xfc0007feUL, DecodeOpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 140280 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140285 "powerpc.tcc"
					>(0x7c0007ecUL, 0xfc0007feUL, DecodeOpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 140289 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140294 "powerpc.tcc"
					>(0x7c0001ecUL, 0xfc0007feUL, DecodeOpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 140298 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140303 "powerpc.tcc"
					>(0x7c00022cUL, 0xfc0007feUL, DecodeOpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 140307 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140312 "powerpc.tcc"
					>(0x7c00006cUL, 0xfc0007feUL, DecodeOpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 140316 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140321 "powerpc.tcc"
					>(0x7c0003acUL, 0xfc0007feUL, DecodeOpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 140325 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140330 "powerpc.tcc"
					>(0x7c0000acUL, 0xfc0007feUL, DecodeOpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 140334 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140339 "powerpc.tcc"
					>(0x7c0005ecUL, 0xfc0007feUL, DecodeOpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 140343 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140348 "powerpc.tcc"
					>(0x7c00052eUL, 0xfc0007feUL, DecodeOpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 140352 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140357 "powerpc.tcc"
					>(0x7c00056eUL, 0xfc0007feUL, DecodeOpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 140361 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140366 "powerpc.tcc"
					>(0xd4000000UL, 0xfc000000UL, DecodeOpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 140370 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140375 "powerpc.tcc"
					>(0xd0000000UL, 0xfc000000UL, DecodeOpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 140379 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140384 "powerpc.tcc"
					>(0x7c0007aeUL, 0xfc0007feUL, DecodeOpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 140388 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140393 "powerpc.tcc"
					>(0x7c0005aeUL, 0xfc0007feUL, DecodeOpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 140397 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140402 "powerpc.tcc"
					>(0x7c0005eeUL, 0xfc0007feUL, DecodeOpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 140406 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140411 "powerpc.tcc"
					>(0xdc000000UL, 0xfc000000UL, DecodeOpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 140415 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140420 "powerpc.tcc"
					>(0xd8000000UL, 0xfc000000UL, DecodeOpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 140424 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140429 "powerpc.tcc"
					>(0x7c00042eUL, 0xfc0007feUL, DecodeOpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 140433 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140438 "powerpc.tcc"
					>(0x7c00046eUL, 0xfc0007feUL, DecodeOpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 140442 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140447 "powerpc.tcc"
					>(0xc4000000UL, 0xfc000000UL, DecodeOpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 140451 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140456 "powerpc.tcc"
					>(0xc0000000UL, 0xfc000000UL, DecodeOpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 140460 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140465 "powerpc.tcc"
					>(0x7c0004aeUL, 0xfc0007feUL, DecodeOpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 140469 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140474 "powerpc.tcc"
					>(0x7c0004eeUL, 0xfc0007feUL, DecodeOpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 140478 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140483 "powerpc.tcc"
					>(0xcc000000UL, 0xfc000000UL, DecodeOpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 140487 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140492 "powerpc.tcc"
					>(0xc8000000UL, 0xfc000000UL, DecodeOpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 140496 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140501 "powerpc.tcc"
					>(0xbc000000UL, 0xfc000000UL, DecodeOpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 140505 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140510 "powerpc.tcc"
					>(0xb8000000UL, 0xfc000000UL, DecodeOpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 140514 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140519 "powerpc.tcc"
					>(0x7c00052aUL, 0xfc0007feUL, DecodeOpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 140523 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140528 "powerpc.tcc"
					>(0x7c0005aaUL, 0xfc0007feUL, DecodeOpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 140532 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140537 "powerpc.tcc"
					>(0x7c00042aUL, 0xfc0007feUL, DecodeOpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 140541 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140546 "powerpc.tcc"
					>(0x7c0004aaUL, 0xfc0007feUL, DecodeOpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 140550 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140555 "powerpc.tcc"
					>(0x7c00052cUL, 0xfc0007feUL, DecodeOpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140559 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140564 "powerpc.tcc"
					>(0x7c00072cUL, 0xfc0007feUL, DecodeOpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140568 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140573 "powerpc.tcc"
					>(0x7c00042cUL, 0xfc0007feUL, DecodeOpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140577 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140582 "powerpc.tcc"
					>(0x7c00062cUL, 0xfc0007feUL, DecodeOpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140586 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140591 "powerpc.tcc"
					>(0x7c00012eUL, 0xfc0007feUL, DecodeOpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 140595 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140600 "powerpc.tcc"
					>(0x7c00016eUL, 0xfc0007feUL, DecodeOpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 140604 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140609 "powerpc.tcc"
					>(0x94000000UL, 0xfc000000UL, DecodeOpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 140613 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140618 "powerpc.tcc"
					>(0x90000000UL, 0xfc000000UL, DecodeOpStw<
#line 38 "ppc.isa"
					CONFIG
#line 140622 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140627 "powerpc.tcc"
					>(0x7c00032eUL, 0xfc0007feUL, DecodeOpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 140631 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140636 "powerpc.tcc"
					>(0x7c00036eUL, 0xfc0007feUL, DecodeOpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 140640 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140645 "powerpc.tcc"
					>(0xb4000000UL, 0xfc000000UL, DecodeOpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 140649 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140654 "powerpc.tcc"
					>(0xb0000000UL, 0xfc000000UL, DecodeOpSth<
#line 38 "ppc.isa"
					CONFIG
#line 140658 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140663 "powerpc.tcc"
					>(0x7c0001aeUL, 0xfc0007feUL, DecodeOpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 140667 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140672 "powerpc.tcc"
					>(0x7c0001eeUL, 0xfc0007feUL, DecodeOpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 140676 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140681 "powerpc.tcc"
					>(0x9c000000UL, 0xfc000000UL, DecodeOpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 140685 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140690 "powerpc.tcc"
					>(0x98000000UL, 0xfc000000UL, DecodeOpStb<
#line 38 "ppc.isa"
					CONFIG
#line 140694 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140699 "powerpc.tcc"
					>(0x7c00002eUL, 0xfc0007feUL, DecodeOpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 140703 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140708 "powerpc.tcc"
					>(0x7c00006eUL, 0xfc0007feUL, DecodeOpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 140712 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140717 "powerpc.tcc"
					>(0x84000000UL, 0xfc000000UL, DecodeOpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 140721 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140726 "powerpc.tcc"
					>(0x80000000UL, 0xfc000000UL, DecodeOpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 140730 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140735 "powerpc.tcc"
					>(0x7c00022eUL, 0xfc0007feUL, DecodeOpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 140739 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140744 "powerpc.tcc"
					>(0x7c00026eUL, 0xfc0007feUL, DecodeOpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 140748 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140753 "powerpc.tcc"
					>(0xa4000000UL, 0xfc000000UL, DecodeOpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 140757 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140762 "powerpc.tcc"
					>(0xa0000000UL, 0xfc000000UL, DecodeOpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 140766 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140771 "powerpc.tcc"
					>(0x7c0002aeUL, 0xfc0007feUL, DecodeOpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 140775 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140780 "powerpc.tcc"
					>(0x7c0002eeUL, 0xfc0007feUL, DecodeOpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 140784 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140789 "powerpc.tcc"
					>(0xac000000UL, 0xfc000000UL, DecodeOpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 140793 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140798 "powerpc.tcc"
					>(0xa8000000UL, 0xfc000000UL, DecodeOpLha<
#line 38 "ppc.isa"
					CONFIG
#line 140802 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140807 "powerpc.tcc"
					>(0x7c0000aeUL, 0xfc0007feUL, DecodeOpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 140811 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140816 "powerpc.tcc"
					>(0x7c0000eeUL, 0xfc0007feUL, DecodeOpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 140820 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140825 "powerpc.tcc"
					>(0x8c000000UL, 0xfc000000UL, DecodeOpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 140829 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140834 "powerpc.tcc"
					>(0x88000000UL, 0xfc000000UL, DecodeOpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 140838 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140843 "powerpc.tcc"
					>(0x4c000000UL, 0xfc0007feUL, DecodeOpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 140847 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140852 "powerpc.tcc"
					>(0x4c000182UL, 0xfc0007feUL, DecodeOpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 140856 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140861 "powerpc.tcc"
					>(0x4c000342UL, 0xfc0007feUL, DecodeOpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 140865 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140870 "powerpc.tcc"
					>(0x4c000382UL, 0xfc0007feUL, DecodeOpCror<
#line 38 "ppc.isa"
					CONFIG
#line 140874 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140879 "powerpc.tcc"
					>(0x4c000042UL, 0xfc0007feUL, DecodeOpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 140883 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140888 "powerpc.tcc"
					>(0x4c0001c2UL, 0xfc0007feUL, DecodeOpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 140892 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140897 "powerpc.tcc"
					>(0x4c000242UL, 0xfc0007feUL, DecodeOpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 140901 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140906 "powerpc.tcc"
					>(0x4c000102UL, 0xfc0007feUL, DecodeOpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 140910 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140915 "powerpc.tcc"
					>(0x4c000202UL, 0xfc0007feUL, DecodeOpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 140919 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140924 "powerpc.tcc"
					>(0x4c000020UL, 0xfc0007feUL, DecodeOpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 140928 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140933 "powerpc.tcc"
					>(0x4c000420UL, 0xfc0007feUL, DecodeOpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 140937 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140942 "powerpc.tcc"
					>(0x40000000UL, 0xfc000000UL, DecodeOpBc<
#line 38 "ppc.isa"
					CONFIG
#line 140946 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140951 "powerpc.tcc"
					>(0x48000000UL, 0xfc000000UL, DecodeOpB<
#line 38 "ppc.isa"
					CONFIG
#line 140955 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140960 "powerpc.tcc"
					>(0xfc00010cUL, 0xfc0007feUL, DecodeOpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 140964 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140969 "powerpc.tcc"
					>(0xfc00058eUL, 0xfc0007feUL, DecodeOpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 140973 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140978 "powerpc.tcc"
					>(0xfc00004cUL, 0xfc0007feUL, DecodeOpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 140982 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140987 "powerpc.tcc"
					>(0xfc00008cUL, 0xfc0007feUL, DecodeOpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 140991 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140996 "powerpc.tcc"
					>(0xfc00048eUL, 0xfc0007feUL, DecodeOpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 141000 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141005 "powerpc.tcc"
					>(0xfc000080UL, 0xfc0007feUL, DecodeOpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 141009 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141014 "powerpc.tcc"
					>(0xfc000050UL, 0xfc0007feUL, DecodeOpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 141018 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141023 "powerpc.tcc"
					>(0xfc000110UL, 0xfc0007feUL, DecodeOpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 141027 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141032 "powerpc.tcc"
					>(0xfc000090UL, 0xfc0007feUL, DecodeOpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 141036 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141041 "powerpc.tcc"
					>(0xfc000210UL, 0xfc0007feUL, DecodeOpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 141045 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141050 "powerpc.tcc"
					>(0xfc000018UL, 0xfc0007feUL, DecodeOpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 141054 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141059 "powerpc.tcc"
					>(0xfc00001eUL, 0xfc0007feUL, DecodeOpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 141063 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141068 "powerpc.tcc"
					>(0xfc00001cUL, 0xfc0007feUL, DecodeOpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 141072 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141077 "powerpc.tcc"
					>(0xfc000000UL, 0xfc0007feUL, DecodeOpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 141081 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141086 "powerpc.tcc"
					>(0xfc000040UL, 0xfc0007feUL, DecodeOpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 141090 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141095 "powerpc.tcc"
					>(0xec00003cUL, 0xfc00003eUL, DecodeOpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141099 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141104 "powerpc.tcc"
					>(0xfc00003cUL, 0xfc00003eUL, DecodeOpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 141108 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141113 "powerpc.tcc"
					>(0xec00003eUL, 0xfc00003eUL, DecodeOpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 141117 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141122 "powerpc.tcc"
					>(0xfc00003eUL, 0xfc00003eUL, DecodeOpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 141126 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141131 "powerpc.tcc"
					>(0xec000038UL, 0xfc00003eUL, DecodeOpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141135 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141140 "powerpc.tcc"
					>(0xfc000038UL, 0xfc00003eUL, DecodeOpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 141144 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141149 "powerpc.tcc"
					>(0xec00003aUL, 0xfc00003eUL, DecodeOpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 141153 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141158 "powerpc.tcc"
					>(0xfc00003aUL, 0xfc00003eUL, DecodeOpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 141162 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141167 "powerpc.tcc"
					>(0xec00002cUL, 0xfc00003eUL, DecodeOpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 141171 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141176 "powerpc.tcc"
					>(0xfc00002cUL, 0xfc00003eUL, DecodeOpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 141180 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141185 "powerpc.tcc"
					>(0xfc00002eUL, 0xfc00003eUL, DecodeOpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 141189 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141194 "powerpc.tcc"
					>(0xec000028UL, 0xfc00003eUL, DecodeOpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141198 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141203 "powerpc.tcc"
					>(0xfc000028UL, 0xfc00003eUL, DecodeOpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 141207 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141212 "powerpc.tcc"
					>(0xfc000034UL, 0xfc00003eUL, DecodeOpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 141216 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141221 "powerpc.tcc"
					>(0xec000030UL, 0xfc00003eUL, DecodeOpFres<
#line 38 "ppc.isa"
					CONFIG
#line 141225 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141230 "powerpc.tcc"
					>(0xec000032UL, 0xfc00003eUL, DecodeOpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 141234 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141239 "powerpc.tcc"
					>(0xfc000032UL, 0xfc00003eUL, DecodeOpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 141243 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141248 "powerpc.tcc"
					>(0xec000024UL, 0xfc00003eUL, DecodeOpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 141252 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141257 "powerpc.tcc"
					>(0xfc000024UL, 0xfc00003eUL, DecodeOpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 141261 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141266 "powerpc.tcc"
					>(0xec00002aUL, 0xfc00003eUL, DecodeOpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 141270 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141275 "powerpc.tcc"
					>(0xfc00002aUL, 0xfc00003eUL, DecodeOpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 141279 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141284 "powerpc.tcc"
					>(0x7c000430UL, 0xfc0007feUL, DecodeOpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 141288 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141293 "powerpc.tcc"
					>(0x7c000670UL, 0xfc0007feUL, DecodeOpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 141297 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141302 "powerpc.tcc"
					>(0x7c000630UL, 0xfc0007feUL, DecodeOpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 141306 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141311 "powerpc.tcc"
					>(0x7c000030UL, 0xfc0007feUL, DecodeOpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 141315 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141320 "powerpc.tcc"
					>(0x5c000000UL, 0xfc000000UL, DecodeOpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 141324 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141329 "powerpc.tcc"
					>(0x54000000UL, 0xfc000000UL, DecodeOpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 141333 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141338 "powerpc.tcc"
					>(0x50000000UL, 0xfc000000UL, DecodeOpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 141342 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141347 "powerpc.tcc"
					>(0x6c000000UL, 0xfc000000UL, DecodeOpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 141351 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141356 "powerpc.tcc"
					>(0x68000000UL, 0xfc000000UL, DecodeOpXori<
#line 38 "ppc.isa"
					CONFIG
#line 141360 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141365 "powerpc.tcc"
					>(0x7c000278UL, 0xfc0007feUL, DecodeOpXor<
#line 38 "ppc.isa"
					CONFIG
#line 141369 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141374 "powerpc.tcc"
					>(0x64000000UL, 0xfc000000UL, DecodeOpOris<
#line 38 "ppc.isa"
					CONFIG
#line 141378 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141383 "powerpc.tcc"
					>(0x60000000UL, 0xfc000000UL, DecodeOpOri<
#line 38 "ppc.isa"
					CONFIG
#line 141387 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141392 "powerpc.tcc"
					>(0x7c000338UL, 0xfc0007feUL, DecodeOpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 141396 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141401 "powerpc.tcc"
					>(0x7c000378UL, 0xfc0007feUL, DecodeOpOr<
#line 38 "ppc.isa"
					CONFIG
#line 141405 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141410 "powerpc.tcc"
					>(0x7c0000f8UL, 0xfc0007feUL, DecodeOpNor<
#line 38 "ppc.isa"
					CONFIG
#line 141414 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141419 "powerpc.tcc"
					>(0x7c0003b8UL, 0xfc0007feUL, DecodeOpNand<
#line 38 "ppc.isa"
					CONFIG
#line 141423 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141428 "powerpc.tcc"
					>(0x7c000734UL, 0xfc0007feUL, DecodeOpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 141432 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141437 "powerpc.tcc"
					>(0x7c000774UL, 0xfc0007feUL, DecodeOpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 141441 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141446 "powerpc.tcc"
					>(0x7c000238UL, 0xfc0007feUL, DecodeOpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 141450 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141455 "powerpc.tcc"
					>(0x7c000034UL, 0xfc0007feUL, DecodeOpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 141459 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141464 "powerpc.tcc"
					>(0x74000000UL, 0xfc000000UL, DecodeOpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 141468 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141473 "powerpc.tcc"
					>(0x70000000UL, 0xfc000000UL, DecodeOpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 141477 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141482 "powerpc.tcc"
					>(0x7c000078UL, 0xfc0007feUL, DecodeOpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 141486 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141491 "powerpc.tcc"
					>(0x7c000038UL, 0xfc0007feUL, DecodeOpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 141495 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141500 "powerpc.tcc"
					>(0x28000000UL, 0xfc000000UL, DecodeOpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 141504 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141509 "powerpc.tcc"
					>(0x7c000040UL, 0xfc0007feUL, DecodeOpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 141513 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141518 "powerpc.tcc"
					>(0x2c000000UL, 0xfc000000UL, DecodeOpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 141522 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141527 "powerpc.tcc"
					>(0x7c000000UL, 0xfc0007feUL, DecodeOpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 141531 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141536 "powerpc.tcc"
					>(0x7c000190UL, 0xfc0003feUL, DecodeOpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 141540 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141545 "powerpc.tcc"
					>(0x7c0001d0UL, 0xfc0003feUL, DecodeOpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 141549 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141554 "powerpc.tcc"
					>(0x20000000UL, 0xfc000000UL, DecodeOpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 141558 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141563 "powerpc.tcc"
					>(0x7c000110UL, 0xfc0003feUL, DecodeOpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 141567 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141572 "powerpc.tcc"
					>(0x7c000010UL, 0xfc0003feUL, DecodeOpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 141576 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141581 "powerpc.tcc"
					>(0x7c000050UL, 0xfc0003feUL, DecodeOpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 141585 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141590 "powerpc.tcc"
					>(0x7c0000d0UL, 0xfc0003feUL, DecodeOpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 141594 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141599 "powerpc.tcc"
					>(0x7c0001d6UL, 0xfc0003feUL, DecodeOpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 141603 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141608 "powerpc.tcc"
					>(0x1c000000UL, 0xfc000000UL, DecodeOpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 141612 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141617 "powerpc.tcc"
					>(0x7c000016UL, 0xfc0003feUL, DecodeOpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 141621 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141626 "powerpc.tcc"
					>(0x7c000096UL, 0xfc0003feUL, DecodeOpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 141630 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141635 "powerpc.tcc"
					>(0x7c000396UL, 0xfc0003feUL, DecodeOpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 141639 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141644 "powerpc.tcc"
					>(0x7c0003d6UL, 0xfc0003feUL, DecodeOpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 141648 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141653 "powerpc.tcc"
					>(0x7c000194UL, 0xfc0003feUL, DecodeOpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 141657 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141662 "powerpc.tcc"
					>(0x7c0001d4UL, 0xfc0003feUL, DecodeOpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 141666 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141671 "powerpc.tcc"
					>(0x3c000000UL, 0xfc000000UL, DecodeOpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 141675 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141680 "powerpc.tcc"
					>(0x34000000UL, 0xfc000000UL, DecodeOpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 141684 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141689 "powerpc.tcc"
					>(0x30000000UL, 0xfc000000UL, DecodeOpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 141693 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141698 "powerpc.tcc"
					>(0x38000000UL, 0xfc000000UL, DecodeOpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 141702 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141707 "powerpc.tcc"
					>(0x7c000114UL, 0xfc0003feUL, DecodeOpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 141711 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141716 "powerpc.tcc"
					>(0x7c000014UL, 0xfc0003feUL, DecodeOpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 141720 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141725 "powerpc.tcc"
					>(0x7c000214UL, 0xfc0003feUL, DecodeOpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 141729 "powerpc.tcc"
					>));
				}

				template <
#line 38 "ppc.isa"
				class
#line 141736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141739 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141744 "powerpc.tcc"
				>::~Decoder()
				{
					InvalidateDecodingCache();
				}

				template <
#line 38 "ppc.isa"
				class
#line 141753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141756 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 141761 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141765 "powerpc.tcc"
				>::NCDecode(typename CONFIG::address_t addr, CodeType code)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141771 "powerpc.tcc"
					> *operation;
					unsigned int count = decode_table.size();
					unsigned int idx;
					for(idx = 0; idx < count; idx++)
					{
						if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
						{
							operation = decode_table[idx].decode(code, addr);
							operation->initialize_operands();
							operation->initialize_latencies();
							operation->initialize_function();
							operation->initialize_write_fpscr();
							operation->initialize_read_xer();
							operation->initialize_write_xer();
							operation->initialize_write_crbd();
							operation->initialize_write_cr();
							operation->initialize_read_crbb();
							operation->initialize_read_crba();
							operation->initialize_read_cr();
							operation->initialize_write_ctr();
							operation->initialize_write_lr();
							operation->initialize_write_ear();
							operation->initialize_write_ra();
							operation->initialize_write_rd();
							operation->initialize_write_fd();
							operation->initialize_read_ctr();
							operation->initialize_read_lr();
							operation->initialize_read_fs();
							operation->initialize_read_fc();
							operation->initialize_read_fb();
							operation->initialize_read_fa();
							operation->initialize_read_rs();
							operation->initialize_read_rb();
							operation->initialize_read_ra();
							operation->initialize_serialization();
							operation->initialize_unit();
							return operation;
						}
					}
					operation = new Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141814 "powerpc.tcc"
					>(code, addr, "???");
					operation->initialize_operands();
					operation->initialize_latencies();
					operation->initialize_function();
					operation->initialize_write_fpscr();
					operation->initialize_read_xer();
					operation->initialize_write_xer();
					operation->initialize_write_crbd();
					operation->initialize_write_cr();
					operation->initialize_read_crbb();
					operation->initialize_read_crba();
					operation->initialize_read_cr();
					operation->initialize_write_ctr();
					operation->initialize_write_lr();
					operation->initialize_write_ear();
					operation->initialize_write_ra();
					operation->initialize_write_rd();
					operation->initialize_write_fd();
					operation->initialize_read_ctr();
					operation->initialize_read_lr();
					operation->initialize_read_fs();
					operation->initialize_read_fc();
					operation->initialize_read_fb();
					operation->initialize_read_fa();
					operation->initialize_read_rs();
					operation->initialize_read_rb();
					operation->initialize_read_ra();
					operation->initialize_serialization();
					operation->initialize_unit();
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 141850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141853 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141858 "powerpc.tcc"
				>::InvalidateDecodingCache()
				{
					uint32_t index;
					mru_page = 0;
					for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
					{
						DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 141868 "powerpc.tcc"
						> *page, *next_page;
						page = decode_hash_table[index];
						if(page)
						{
							do
							{
								next_page = page->next;
								delete page;
								page = next_page;
							} while(page);
							decode_hash_table[index] = 0;
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 141887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141890 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141895 "powerpc.tcc"
				>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
				{
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					if(mru_page && mru_page->key == page_key) mru_page = 0;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 141904 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							decode_hash_table[index] = cur->next;
							delete cur;
							return;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next = 0;
									delete cur;
									return;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 141937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141940 "powerpc.tcc"
				>
				inline DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 141945 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141949 "powerpc.tcc"
				>::FindPage(typename CONFIG::address_t page_key)
				{
					if(mru_page && mru_page->key == page_key) return mru_page;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 141957 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							mru_page = cur;
							return cur;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next= decode_hash_table[index];
									decode_hash_table[index] = cur;
									mru_page = cur;
									return cur;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
					return 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 141991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141994 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 141999 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142003 "powerpc.tcc"
				>::Decode(typename CONFIG::address_t addr, CodeType insn)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 142009 "powerpc.tcc"
					> *operation;
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142015 "powerpc.tcc"
					> *page;
					page = FindPage(page_key);
					if(!page)
					{
						page = new DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 142023 "powerpc.tcc"
						> (page_key);
						uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
						page->next = decode_hash_table[index];
						decode_hash_table[index] = page;
						mru_page = page;
					}
					operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
					if(operation)
					{
						if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
						return operation;
						delete operation;
					}
					operation = NCDecode(addr, insn);
					page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142048 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142053 "powerpc.tcc"
				>::SetLittleEndian()
				{
					is_little_endian = true;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142065 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142070 "powerpc.tcc"
				>::SetBigEndian()
				{
					is_little_endian = false;
				}

} } } } }
